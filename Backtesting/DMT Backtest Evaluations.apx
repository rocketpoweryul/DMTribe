<?xml version="1.0" encoding="ISO-8859-1"?>
<AmiBroker-Analysis CompactMode="0">
<General>
<FormatVersion>1</FormatVersion>
<Symbol>BHVN</Symbol>
<FormulaPath>D:\\OneDrive\\Michael\\Documents\\GitHub\\TPT\\DMT Backtest Eval Code.afl</FormulaPath>
<FormulaContent>// RGS Code\r\n// Risk Guidance System Tracking System\r\n\r\n// Amibroker 6.38\r\n\r\n/////////// This section uses the custom backtest procedure to create RGS metrics\r\n\r\nSetCustomBacktestProc( "" );\r\nSetBacktestMode( backtestRegularRawMulti   );\r\n\r\n/* Now custom-backtest procedure follows */\r\n\r\nif( Status( "action" ) == actionPortfolio )\r\n{\r\n    bo = GetBacktesterObject();\r\n\r\n    bo.Backtest(); // run default backtest procedure\r\n\r\n\tfh = fopen( "D:\\\\OneDrive\\\\Michael\\\\Documents\\\\Investing\\\\DMT Discord Server\\\\CSV Data\\\\DMT_Eval_Output.csv", "w" );\r\n    //fj = fopen( "D:\\\\OneDrive\\\\Michael\\\\Documents\\\\Investing\\\\DMT Discord Server\\\\CSV Data\\\\OpenTrades.csv", "w" );    \r\n\r\n    if( fh )\r\n    {\r\n        // iterate through closed trades first\r\n        for( trade = bo.GetFirstTrade(); trade; trade = bo.GetNextTrade() )\r\n        {\r\n            // create csv output line\r\n            csvout = trade.Symbol + "," + DateTimeToStr( trade.EntryDateTime ) + "," + NumToStr( trade.EntryPrice, 1.2 ) + "," + DateTimeToStr( trade.ExitDateTime ) + "," + NumToStr( trade.ExitPrice, 1.2 ) + "," + NumToStr( trade.GetPercentProfit, 1.2 ) + "," + NumToStr( trade.GetMAE, 1.2 ) + "," + NumToStr( trade.GetMFE, 1.2 ) + "\\n";\r\n\r\n            fputs( csvout, fh );\r\n\r\n        }\r\n\r\n        // iterate through eventually still open positions\r\n        for( trade = bo.GetFirstOpenPos(); trade; trade = bo.GetNextOpenPos() )\r\n        {\r\n            // create csv output line\r\n            csvout = trade.Symbol + "," + DateTimeToStr( trade.EntryDateTime ) + "," + NumToStr( trade.EntryPrice, 1.2 ) + "," + DateTimeToStr( trade.ExitDateTime ) + "," + NumToStr( trade.ExitPrice, 1.2 ) + "," + NumToStr( trade.GetPercentProfit, 1.2 ) + "," + NumToStr( trade.GetMAE, 1.2 ) + "," + NumToStr( trade.GetMFE, 1.2 ) + "\\n";\r\n\r\n            fputs( csvout, fh );\r\n        }\r\n    }\r\n\r\n    fclose( fh );\r\n    fclose( fj );\r\n    \r\n    stats = bo.GetPerformanceStats(0);\r\n    WP = stats.GetValue("WinnersPercent")/100;\r\n    PL = stats.GetValue("WinnersAvgProfitPercent")/stats.GetValue("LosersAvgLossPercent");\r\n    bo.AddCustomMetric("Expectancy", -PL*WP -(1-WP), 1);\r\n}\r\n\r\n\r\n///////// BACKTEST PROCEDURE //\r\n\r\ndummy = Optimize("dummy", 0, 0, 4999, 1);\r\n\r\nSetTradeDelays(0,0,0,0);\r\n\r\n// Load CSV file\r\nfile = fopen( "D:\\\\OneDrive\\\\Michael\\\\Documents\\\\Investing\\\\DMT Discord Server\\\\CSV Data\\\\RGS_Source.csv", "r" );\r\n\r\n// get date\r\ndt = DateTime();\r\n\r\n// init var\r\nBuy = Sell = DateBuy = BuyPrice = 0;\r\n\r\n// lookup CSV and current date to see if the stock is in the daily trading plan for the day\r\n\r\nif( file )\r\n{\r\n    // discard header row\r\n    line = fgets( file );\r\n\r\n    index = 0;\r\n\r\n    while( ! feof( file ) ) // loop while not end of file\r\n    {\r\n        // extract current csv line\r\n        line = fgets( file );\r\n\r\n        // get ticker\r\n        Ticker = StrExtract( line, 1 );\r\n\r\n        if( Name() == Ticker )\r\n        {\r\n            // extract date and buy point\r\n\t\t\tDateStr\t\t= StrExtract( line, 0 );\r\n            RGSDate \t= StrToDateTime( DateStr );\r\n            RGSBP\t  \t= StrExtract( line, 4 );\r\n            RGSBP\t\t= StrTrim( RGSBP, "$", 1 );\r\n            PivotPrice\t= StrToNum( RGSBP );\r\n\r\n            // Check if breakout occurs\r\n            Breakout\t= H &gt; PivotPrice;\r\n\r\n            // verify date is correct\r\n            DateBuy\t\t= dt == RGSDate;\r\n\r\n            // check 1% limit not breached\r\n            Limit = O &lt; 1.01 * PivotPrice;\r\n\r\n            // fix the buy price to the pivot price\r\n            for( i = index + 1; i &lt; BarCount; i++ )\r\n\t\t\t{\r\n\t\t\t\tif (Buy[i] == 0)\r\n\t\t\t\t\tBuy[i] = DateBuy[i] AND Breakout[i] AND Limit[i];// AND LastValue(Random()) &gt; 0.50;\r\n\t\t\t\t\r\n                if( Buy[i] == 1)\r\n                {\r\n                    BuyPrice[i] = PivotPrice;\r\n                    index = i;\r\n                }\r\n                else\r\n                {\r\n                    BuyPrice[i] += 0;\r\n                }\r\n\t\t\t}\r\n\t\t\t\t\r\n            //// EXIT RULES (//- means not implemented, //* means implemented)\r\n            \r\n            // Sell front-end of position if:\t\t\r\n            //   Any time:\r\n            //*\t\t- 2% stoploss hit\r\n\r\n            \r\n            // Sell back-end of position if:\t\t\r\n\t\t\t//   Any time:\r\n\t\t\t//*\t\t- 4% stoploss hit\r\n\r\n\t\t\t\r\n\t\t\t// Sell half of current position:\t\t\r\n\t\t\t// at +3R ~ 10%, set stop to 1% profit\r\n\t\t\t// at +6R ~ 20%, set stop to 10% profit\r\n\r\n\t\t\t// Sell balance of position:\r\n\t\t\t// major trendline\r\n\t\t\t\r\n            // stop settings\r\n            FirstProfitTarget\t= 20;\t// profit % on half\r\n            SecondProfitTarget\t= 6; \t// profit % on half\r\n            stopFrontInit\t\t= 2;  \t// front initial stop loss\r\n            stopBackInit\t\t= 4;  \t// back initial stop loss\r\n            updatedstop1 \t\t= 1;\t// stop raise \r\n            updatedstop2 \t\t= 10;\t// stop raise\r\n            \r\n            switchdate = 1.088033e+25;\r\n            \r\n            microSMA\t\t\t= 5;\t// SMA for stops\r\n            miniSMA\t\t\t\t= 10;\t// SMA for stops\r\n            smallSMA\t\t\t= 20;\t// SMA for stops\r\n            bigSMA\t\t\t\t= 50;\t// SMA for stops\r\n            SMAdays\t\t\t\t= 10;\t// SMA period above for stops\r\n            \r\n            // initializations to zero\r\n            stopFront\t\t\t= 0;  \t// moving stop on the front half\r\n            stopBack\t\t\t= 0;  \t// moving stop on the back half\r\n\t\t\tpriceatbuy \t\t\t= 0;\t// buy price\r\n            highsincebuy \t\t= 0;\t// high of trade since buy\r\n            barssincebuy \t\t= 0;\t// trade length so far\r\n            highestclose\t\t= 0;\t// highest close of trade so far\r\n            profitPct\t\t\t= 0;\t// profit of open trade\r\n\r\n\t\t\t// exit codes\r\n            sellfront\t\t\t= False;\r\n            sellback\t\t\t= False;\r\n            sellfirsthalf\t\t= False;\r\n            sellhalf50\t\t\t= False;\r\n            sellbalance\t\t\t= False;\r\n            selltrail\t\t\t= False;\r\n            RaiseSTOP\t\t\t= False;\r\n            ProfitProtect\t\t= False;\r\n            \r\n            // this tracks the position size normalized to original size\r\n            positionpct \t= 100;\r\n            \r\n            latch = False;\r\n\r\n\t\t\t// loop through bars to see\r\n            for( j = 0; j &lt; BarCount - index; j++ )\r\n            {\r\n\t\t\t\ti = index + j;\r\n\t\t\t\t\r\n\t\t\t\tDatenow = DateTimeToStr(dt[i]);\r\n\t\t\t\t\r\n                // check if there is a buy signal at the current bar\r\n                if( NOT latch AND Buy[ i ] == 1)\r\n                {\r\n                    priceatbuy = BuyPrice[ i ];\r\n                    index = i;\r\n                    latch = True;\r\n                }\r\n\t\t\t\t\r\n\t\t\t\t// process the sell guidance and stops for the current stock and RGS Source entry, assuming\r\n                if( priceatbuy &gt; 0 AND NOT Buy[i] == 1)\r\n                {\r\n\t\t\t\t\t// mark the price high (for close and high) and days in trade\r\n                    highsincebuy = Max( H[ i-1 ], highsincebuy );\r\n                    highestclose = Max( C[ i-1 ], highestclose );\r\n                    barssincebuy = BarsSince(Buy) + 1;\r\n                    \r\n                    // sell front half if front init stop\r\n                    stopFront = ( 1- stopFrontInit/100 )*priceatbuy;\r\n                    if (NOT sellfront AND L[i]  &lt; stopFront)\r\n                    {\r\n\t\t\t\t\t\t// set the flag to indicate front is sold\r\n\t\t\t\t\t\tsellfront \t\t= True;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// set the sell price to the stop assuming no slippage and scale out\r\n\t\t\t\t\t\t//BuyPrice[i] \t= stopFront;\r\n\t\t\t\t\t\t//Buy[i]\t\t\t= sigScaleOut;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// update fraction of position remaining\r\n\t\t\t\t\t\tpositionpct /= 2;\r\n                    }\r\n\r\n                    // sell back half if back init stop, implies remainder of stock is sold as front half is gone\r\n                    stopBack = ( 1- stopBackInit/100 )*priceatbuy;\r\n                    if (NOT sellback AND L[i]  &lt; stopBack )\r\n                    {\r\n\t\t\t\t\t\t// set the flag to indicate front is sold\r\n\t\t\t\t\t\tsellback \t\t= True;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// set the sell price to the stop assuming no slippage\r\n\t\t\t\t\t\tSellPrice[i] \t= stopBack;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// handle same day blowing through both stops\r\n\t\t\t\t\t\t//if (sellfront &amp;&amp; Buy[i] == sigScaleOut)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tSellPrice[i] = (stopFront + stopBack)/2;\r\n\t\t\t\t\t\t\tBuy[i]\t  \t = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// update fraction of position remaining, which should be none at this point\r\n\t\t\t\t\t\tpositionpct = 0;\r\n                    }\r\n                    \r\n                    // sell half at profit targets\r\n                    profitPct  \t= ( H[i]/priceatbuy - 1 )*100;\r\n                    \r\n                    // modulate first profit stop based on date\r\n                    \r\n                    if (RGSDate &lt; switchdate)\r\n                    {\r\n\t\t\t\t\t\tsellhalfstop = FirstProfitTarget;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsellhalfstop = SecondProfitTarget;\r\n\t\t\t\t\t\t\r\n                    // sell at first profit target, but this applies after min number of days\r\n                    if( NOT sellfirsthalf AND profitPct &gt; sellhalfstop )\r\n                    {\r\n\t\t\t\t\t\t// set the flag to indicate\r\n\t\t\t\t\t\tsellfirsthalf = True;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// set the sell price to the stop assuming no slippage\r\n\t\t\t\t\t\t//BuyPrice[i] \t= priceatbuy*(1 + sellhalfstop/100);\r\n\t\t\t\t\t\t//Buy[i]\t\t\t= sigScaleOut;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// update fraction of position remaining, which should be none at this point\r\n\t\t\t\t\t\tpositionpct /= 2;\t\r\n                    }\r\n                    \r\n                    // check if condition to raise stop to 1% on rest is true\r\n                    if ((RGSDate &lt; switchdate AND profitPct &gt; updatedstop2) OR (RGSDate &gt;= switchdate AND profitPct &gt; sellhalfstop))\r\n\t\t\t\t\t\tProfitProtect = True;\r\n\t\t\t\t\t\r\n                    // Updated stop to 1% profit if you sold half at FPT \r\n                    if( ProfitProtect AND (C[i]/priceatbuy-1)*100 &lt; updatedstop1 ) \r\n                    {\r\n\t\t\t\t\t\tsellbalance = True;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tSellPrice[i] \t= priceatbuy*(1.00 + updatedstop1/100);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// update fraction of position remaining, which should be none at this point\r\n\t\t\t\t\t\tpositionpct = 0;\r\n\t\t\t\t\t\t\r\n                    }\r\n                    \r\n                    // set stop to 10 percent when selling at 20% \r\n                    if ( RGSDate &lt; switchdate AND sellfirsthalf AND (C[i]/priceatbuy-1)*100 &lt; updatedstop2 )\r\n                    {\r\n\t\t\t\t\t\tsellbalance = True;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tSellPrice[i] \t= priceatbuy*(1.00 + updatedstop2/100);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// update fraction of position remaining, which should be none at this point\r\n\t\t\t\t\t\tpositionpct = 0;\r\n                    }\r\n                    \r\n                    // sell half when it breaks it's major SMA, but only after gain of SecondProfitTarget\r\n                    if( sellfirsthalf )\r\n                    {\r\n\t\t\t\t\t\tMAm = MA(C, microSMA);\r\n\t\t\t\t\t\tMA0 = MA(C,  miniSMA);\r\n\t\t\t\t\t\tMA1 = MA(C, smallSMA);\r\n\t\t\t\t\t\tMA2 = MA(C,   bigSMA);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// stock is following mini or smallMA, ie completely above it\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tSumMAm = Sum(C &gt; MAm, SMAdays);\r\n\t\t\t\t\t\tSumMA0 = Sum(C &gt; MA0, SMAdays);\r\n\t\t\t\t\t\tSumMA1 = Sum(C &gt; MA1, SMAdays);\r\n\t\t\t\t\t\tFollowm = SumMAm == SMAdays-1\tAND Ref(SumMAm, -1) == SMAdays;\r\n\t\t\t\t\t\tFollow0 = SumMA0 == SMAdays-1\tAND Ref(SumMA0, -1) == SMAdays;\r\n\t\t\t\t\t\tFollow1 = SumMA1 == SMAdays-1   AND Ref(SumMA1, -1) == SMAdays;\r\n\r\n\t\t\t\t\t\t// if following smaller SMA, use this stop or else use larger SMA\r\n\t\t\t\t\t\tif ( Followm[i] OR Follow0[i] OR Follow1[i] OR C[i] &lt; MA2[i] )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsellbalance = True;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// set the sell price to the stop assuming no slippage\r\n\t\t\t\t\t\t\tif (Followm[i])\r\n\t\t\t\t\t\t\t\tSellPrice\t\t= MAm[i];\r\n\t\t\t\t\t\t\telse if (Follow0[i])\r\n\t\t\t\t\t\t\t\tSellPrice[i] \t= MA0[i];\r\n\t\t\t\t\t\t\telse if (Follow1[i])\r\n\t\t\t\t\t\t\t\tSellPrice[i] \t= MA1[i];\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tSellPrice[i] \t= MA2[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// update fraction of position remaining, which should be none at this point\r\n\t\t\t\t\t\t\tpositionpct = 0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                    \t\t\r\n                    if( positionpct == 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tBuy[i] \t= False;\r\n\t\t\t\t\t\tSell[i] = True;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// initializations to zero\r\n\t\t\t\t\t\tstopFront\t\t\t= 0;  \t// moving stop on the front half\r\n\t\t\t\t\t\tstopBack\t\t\t= 0;  \t// moving stop on the back half\r\n\t\t\t\t\t\tstopTrail\t\t\t= 0;\t// trailing stop\r\n\t\t\t\t\t\tpriceatbuy \t\t\t= 0;\t// buy price\r\n\t\t\t\t\t\thighsincebuy \t\t= 0;\t// high of trade since buy\r\n\t\t\t\t\t\tbarssincebuy \t\t= 0;\t// trade length so far\r\n\t\t\t\t\t\thighestclose\t\t= 0;\t// highest close of trade so far\r\n\t\t\t\t\t\tprofitPct\t\t\t= 0;\t// profit of open trade\r\n\t\t\t\t\t\tspeedstop\t\t\t= 0;\t// speestop value\r\n\r\n\t\t\t\t\t\t// exit codes\r\n\t\t\t\t\t\tsellfront\t\t\t= False;\r\n\t\t\t\t\t\tsellback\t\t\t= False;\r\n\t\t\t\t\t\tsellfirsthalf\t\t= False;\r\n\t\t\t\t\t\tsellhalf50\t\t\t= False;\r\n\t\t\t\t\t\tsellbalance\t\t\t= False;\r\n\t\t\t\t\t\tRaiseSTOP\t\t\t= False;\r\n\t\t\t\t\t\tProfitProtect\t\t= False;\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n\r\n            if (RGSDate &lt; switchdate)\r\n\t\t\t\tSetPositionSize( 25, spsPercentOfEquity);\r\n\t\t\telse\r\n\t\t\t\tSetPositionSize( 25, spsPercentOfEquity);\r\n            \r\n            SetPositionSize( 16, spsShares);\r\n            //SetPositionSize( 50, spsPercentOfPosition * ( Buy == sigScaleOut ) ); // scale out 50% of position\r\n        }\r\n    }\r\n}\r\nelse\r\n{\r\n    printf( "ERROR: file can not be found (does not exist)" );\r\n}\r\n\r\nSetSortColumns( 3 );\r\n\r\n// close the file\r\nfclose( file );\r\n</FormulaContent>
<ApplyTo>2</ApplyTo>
<RangeType>0</RangeType>
<RangeAmount>1</RangeAmount>
<FromDate>2020-08-26 00:00:00</FromDate>
<ToDate>2021-09-17</ToDate>
<SyncOnSelect>0</SyncOnSelect>
<RunEvery>0</RunEvery>
<RunEveryInterval>5min</RunEveryInterval>
<IncludeFilter>
<ExcludeMode>0</ExcludeMode>
<OrSelection>1</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>1</Category0>
<Type1>0</Type1>
<Category1>2</Category1>
<Type2>0</Type2>
<Category2>0</Category2>
<Type3>0</Type3>
<Category3>0</Category3>
<Type4>0</Type4>
<Category4>0</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</IncludeFilter>
<ExcludeFilter>
<ExcludeMode>1</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>-1</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</ExcludeFilter>
</General>
<BacktestSettings>
<InitialEquity>1000000</InitialEquity>
<TradeFlags>1</TradeFlags>
<MaxLossStopMode>0</MaxLossStopMode>
<MaxLossStopValue>0</MaxLossStopValue>
<MaxLossStopAtStop>1</MaxLossStopAtStop>
<ProfitStopMode>0</ProfitStopMode>
<ProfitStopValue>0</ProfitStopValue>
<ProfitStopAtStop>1</ProfitStopAtStop>
<TrailingStopMode>0</TrailingStopMode>
<TrailingStopPeriods>0</TrailingStopPeriods>
<TrailingStopValue>0</TrailingStopValue>
<TrailingStopAtStop>1</TrailingStopAtStop>
<CommissionMode>0</CommissionMode>
<CommissionValue>0</CommissionValue>
<BuyPriceField>0</BuyPriceField>
<BuyDelay>0</BuyDelay>
<SellPriceField>0</SellPriceField>
<SellDelay>0</SellDelay>
<ShortPriceField>0</ShortPriceField>
<ShortDelay>0</ShortDelay>
<CoverPriceField>0</CoverPriceField>
<CoverDelay>0</CoverDelay>
<ReportSystemFormula>0</ReportSystemFormula>
<ReportSystemSettings>0</ReportSystemSettings>
<ReportOverallSummary>1</ReportOverallSummary>
<ReportSummary>1</ReportSummary>
<ReportTradeList>1</ReportTradeList>
<LoadRemainingQuotes>1</LoadRemainingQuotes>
<Periodicity>0</Periodicity>
<InterestRate>0</InterestRate>
<ReportOutPositions>1</ReportOutPositions>
<UseConstantPriceArrays>0</UseConstantPriceArrays>
<PointsOnlyTest>0</PointsOnlyTest>
<AllowShrinkingPosition>0</AllowShrinkingPosition>
<RangeType>0</RangeType>
<RangeLength>0</RangeLength>
<RangeFromDate>2020-08-26 00:00:00</RangeFromDate>
<RangeToDate>2021-09-17</RangeToDate>
<ApplyTo>2</ApplyTo>
<FilterQty>2</FilterQty>
<IncludeFilter>
<ExcludeMode>0</ExcludeMode>
<OrSelection>1</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>1</Category0>
<Type1>0</Type1>
<Category1>2</Category1>
<Type2>0</Type2>
<Category2>0</Category2>
<Type3>0</Type3>
<Category3>0</Category3>
<Type4>0</Type4>
<Category4>0</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</IncludeFilter>
<ExcludeFilter>
<ExcludeMode>1</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>-1</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</ExcludeFilter>
<UseOptimizedEvaluation>0</UseOptimizedEvaluation>
<BacktestRangeType>0</BacktestRangeType>
<BacktestRangeLength>0</BacktestRangeLength>
<BacktestRangeFromDate>2020-08-26 00:00:00</BacktestRangeFromDate>
<BacktestRangeToDate>2021-09-17</BacktestRangeToDate>
<MarginRequirement>100</MarginRequirement>
<SameDayStops>0</SameDayStops>
<RoundLotSize>1</RoundLotSize>
<TickSize>0</TickSize>
<DrawdownPriceField>0</DrawdownPriceField>
<ReverseSignalForcesExit>0</ReverseSignalForcesExit>
<NoDefaultColumns>0</NoDefaultColumns>
<AllowSameBarExit>1</AllowSameBarExit>
<ExtensiveOptimizationWarning>1</ExtensiveOptimizationWarning>
<WaitForBackfill>0</WaitForBackfill>
<MaxRanked>4</MaxRanked>
<MaxTraded>100</MaxTraded>
<MaxTracked>100</MaxTracked>
<PortfolioReportMode>0</PortfolioReportMode>
<MinShares>1</MinShares>
<SharpeRiskFreeReturn>5</SharpeRiskFreeReturn>
<PortfolioMode>0</PortfolioMode>
<PriceBoundCheck>1</PriceBoundCheck>
<AlignToReferenceSymbol>0</AlignToReferenceSymbol>
<ReferenceSymbol>^DJI</ReferenceSymbol>
<UPIRiskFreeReturn>5.4</UPIRiskFreeReturn>
<NBarStopMode>0</NBarStopMode>
<NBarStopValue>0</NBarStopValue>
<NBarStopReentryDelay>0</NBarStopReentryDelay>
<MaxLossStopReentryDelay>0</MaxLossStopReentryDelay>
<ProfitStopReentryDelay>0</ProfitStopReentryDelay>
<TrailingStopReentryDelay>0</TrailingStopReentryDelay>
<AddFutureBars>0</AddFutureBars>
<DistChartSpacing>5</DistChartSpacing>
<ProfitDistribution>1</ProfitDistribution>
<MAFEDistribution>1</MAFEDistribution>
<IndividualDetailedReports>0</IndividualDetailedReports>
<PortfolioReportTradeList>1</PortfolioReportTradeList>
<LimitTradeSizeAsPctVol>0</LimitTradeSizeAsPctVol>
<DisableSizeLimitWhenVolumeIsZero>0</DisableSizeLimitWhenVolumeIsZero>
<UsePrevBarEquityForPosSizing>1</UsePrevBarEquityForPosSizing>
<NBarStopHasPriority>0</NBarStopHasPriority>
<UseCustomBacktestProc>0</UseCustomBacktestProc>
<CustomBacktestProcFormulaPath/>
<MinPosValue>0.01</MinPosValue>
<MaxPosValue>0</MaxPosValue>
<ChartInterval>86400</ChartInterval>
<DisableRuinStop>0</DisableRuinStop>
<OptTarget>CAR/MDD</OptTarget>
<WFMode>0</WFMode>
<GenerateReport>1</GenerateReport>
<MaxLongPos>0</MaxLongPos>
<MaxShortPos>0</MaxShortPos>
<SeparateLongShortRank>0</SeparateLongShortRank>
<TotalSymbolQty>8646</TotalSymbolQty>
<EnableUserReportCharts>1</EnableUserReportCharts>
<ChartWidth>500</ChartWidth>
<ChartHeight>300</ChartHeight>
<SettlementDelay>0</SettlementDelay>
<PortfolioReportSystemFormula>1</PortfolioReportSystemFormula>
<InterestRateSymbol>0</InterestRateSymbol>
<MarginRate>5</MarginRate>
<IncludeBHStats>1</IncludeBHStats>
<BHSymbol>^DJI</BHSymbol>
<MCEnable>1</MCEnable>
<MCRuns>1000</MCRuns>
<MCPosSizeMethod>3</MCPosSizeMethod>
<MCPosSizeShares>100</MCPosSizeShares>
<MCPosSizeValue>1000</MCPosSizeValue>
<MCPosSizePctEquity>5</MCPosSizePctEquity>
<MCChartEquityCurves>1</MCChartEquityCurves>
<MCStrawBroomLines>20</MCStrawBroomLines>
<Scenario>0</Scenario>
<MCChartEquityScale>0</MCChartEquityScale>
<MCUseEquityChanges>0</MCUseEquityChanges>
<MCLogScaleFinalEquity>0</MCLogScaleFinalEquity>
<MCLogScaleDrawdown>0</MCLogScaleDrawdown>
<MCNegativeDrawdown>1</MCNegativeDrawdown>
<ISEnabled>1</ISEnabled>
<ISStartDate>2000-01-01</ISStartDate>
<ISEndDate>2004-01-01</ISEndDate>
<ISLastDate>2017-01-01</ISLastDate>
<ISStep>1</ISStep>
<ISStepUnit>3</ISStepUnit>
<ISAnchored>0</ISAnchored>
<ISLastUsesToday>1</ISLastUsesToday>
<OSEnabled>1</OSEnabled>
<OSStartDate>2004-01-01</OSStartDate>
<OSEndDate>2005-01-01</OSEndDate>
<OSLastDate>2018-01-01</OSLastDate>
<OSStep>1</OSStep>
<OSStepUnit>3</OSStepUnit>
<OSAnchored>0</OSAnchored>
<OSLastUsesToday>1</OSLastUsesToday>
</BacktestSettings>
</AmiBroker-Analysis>
