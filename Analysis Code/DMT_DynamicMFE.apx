<?xml version="1.0" encoding="ISO-8859-1"?>
<AmiBroker-Analysis CompactMode="0">
<General>
<FormatVersion>1</FormatVersion>
<Symbol>VMW</Symbol>
<FormulaPath>C:\\Users\\admin\\OneDrive\\Michael\\Documents\\GitHub\\TPT\\DMT_DynamicMFE_Form.afl</FormulaPath>
<FormulaContent>// Amibroker Analysis\r\n// Dynamic MFE\r\n// Date: 2023/10/15\r\n// Amibroker 6.40.4\r\n\r\n// Hypothesis:\r\n// Using dynamic MFE to extract returns from rallies that could be short and long\r\n// Depending on MFE, the stops and positions sizes will be selected to ensure the maximum money can be extracted from a trade given the market conditions\r\n// That is, in good times, with large MFE, we can have larger stops, larger profit targers and thus smaller position-sizes and get a positive expectancy\r\n// In bad times, rallies will be short-lived, and thus we can have tighter stops, smaller profit targets and thus larger position sizes for positive exp\r\n// Aim for 2:1 trades on the first half, and more on the back half\r\n\r\n// Backtest mode\r\n// from AFL reference:\r\n// signal-based backtest, redundant (raw) entry signals are NOT removed, MULTIPLE positions per symbol will be open if BUY/SHORT signal is true for more than one bar and \r\n// there are free funds, Sell/Cover exit all open positions on given symbol, Scale-In/Out work on all open positions of given symbol at once. \r\nSetCustomBacktestProc( "" );\r\nSetBacktestMode( backtestRegularRawMulti   );\r\n\r\n// source directory for CSV data to be read and written\r\nCSVPath = "C:\\\\Users\\\\admin\\\\OneDrive\\\\Michael\\\\Documents\\\\Investing\\\\DMT Discord Server\\\\CSV Data\\\\";\r\n\r\n/* Now custom-backtest procedure follows */\r\nif( Status( "action" ) == actionPortfolio )\r\n{\r\n\t// low-level backtester required for advanced position sizing\r\n    bo = GetBacktesterObject();\r\n\tbo.PreProcess();\r\n    \r\n    // Determine number of trades to base average\r\n    MFE_MAsize = 10;\r\n    \r\n    // Percent equity at risk for each trade\r\n    Trade_Risk_pct = 1;\r\n    \r\n    for ( bar = 0; bar &lt; BarCount; bar++ )\r\n    {\r\n\t\t//// determine current average MFE\r\n\t\t/// MFE data init values\r\n\t\tnumtrades = 0;\r\n\t\tMFE_trade = 0;\r\n\t\t\r\n\t\t// loop through closed trades\r\n\t\tfor( trade = bo.GetFirstTrade(); trade; trade = bo.GetNextTrade() )\r\n\t\t\tMFE_trade[numtrades++] = trade.GetMFE;\r\n\t\t\r\n\t\t// loop through open trades\r\n\t\tfor( trade = bo.GetFirstOpenPos(); trade; trade = bo.GetNextOpenPos() )\r\n\t\t\tMFE_trade[numtrades++] = trade.GetMFE;\r\n\t\t\r\n\t\t// get average trades for last MFE_MAsize trades\r\n\t\tMFE_avg = 0;\r\n\t\tfor ( i = numtrades - 1; i &gt;= numtrades - MFE_MAsize; i-- )\r\n\t\t\tMFE_avg += MFE_trade[i] / MFE_MAsize;\r\n\t\t\r\n\t\t//// get position sizing and stop data\r\n\t\tstop_size \t= MFE_avg / 2; \t// 2:1 trade philo on first half\r\n\t\tcurr_equity = bo.Equity;\t// equity for current bar\r\n\t\t\r\n\t\t// entering and exiting positions\r\n\t\tfor ( sig = bo.GetFirstSignal(bar); sig; bo.GetNextSignal(bar) )\r\n\t\t{\r\n\t\t\t// calculate position size\r\n\t\t\tRisk_per_trade_dol \t= bo.Equity * Trade_Risk_pct/100;\r\n\t\t\tRisk_per_share_dol \t= sig.Price - sig.Price*( 1 - stop_size/100 );\r\n\t\t\tShares_per_trade\t= Risk_per_trade_dol / Risk_per_share_dol;\r\n\t\t\tTrade_Size\t\t\t= Shares_per_trade * sig.Price;\r\n\t\t\t\r\n\t\t\t// enter long\r\n\t\t\tif ( sig.IsEntry() )\r\n\t\t\t\tbo.EnterTrade( i, sig.Symbol, sig.IsLong(), sig.Price, Trade_Size );\r\n\t\t\t\r\n\t\t\t// exit long (multiraw requires loop through all open positions)\r\n\t\t\tif ( sig.IsExit() )\r\n\t\t\t\tfor ( openpos = bo.GetFirstOpenPos(); openpos; openpos = bo.GetNextOpenPos() )\r\n\t\t\t\t\tbo.ExitTrade( i, sig.Symbol, sig.Price );\r\n\t\t}\r\n\t\t\r\n\t\t\r\n    }\r\n    \r\n    // create output metrics for the RGS historical after backtest is done\r\n\r\n\tfh = fopen( CSVPath + "RGS_Output.csv", "w" );\r\n    fj = fopen( CSVPath + "OpenTrades.csv", "w" );    \r\n\r\n    if( fh )\r\n    {\r\n        // iterate through closed trades first\r\n        for( trade = bo.GetFirstTrade(); trade; trade = bo.GetNextTrade() )\r\n        {            \r\n            csvout = trade.Symbol + "," + DateTimeToStr( trade.EntryDateTime ) + "," + StrFormat("%.2f,", trade.EntryPrice) + DateTimeToStr( trade.ExitDateTime ) + "," + StrFormat("%.2f, %.2f, %.2f, %.2f\\n", trade.ExitPrice, trade.GetPercentProfit, trade.GetMAE, trade.GetMFE);\r\n\r\n            fputs( csvout, fh );\r\n\r\n        }\r\n\r\n        // iterate through eventually still open positions\r\n        for( trade = bo.GetFirstOpenPos(); trade; trade = bo.GetNextOpenPos() )\r\n        {            \r\n            csvout = trade.Symbol + "," + DateTimeToStr( trade.EntryDateTime ) + "," + StrFormat("%.2f,", trade.EntryPrice) + DateTimeToStr( trade.ExitDateTime ) + "," + StrFormat("%.2f, %.2f, %.2f, %.2f\\n", trade.ExitPrice, trade.GetPercentProfit, trade.GetMAE, trade.GetMFE);\r\n\r\n            fputs( csvout, fh );\r\n            fputs( csvout, fj );\r\n        }\r\n    }\r\n\r\n    fclose( fh );\r\n    fclose( fj );\r\n    \r\n    // custom metrics\r\n    stats = bo.GetPerformanceStats(0);\r\n    WP = stats.GetValue("WinnersPercent")/100;\r\n    PL = stats.GetValue("WinnersAvgProfitPercent")/stats.GetValue("LosersAvgLossPercent");\r\n    bo.AddCustomMetric("Expectancy", -PL*WP -(1-WP), 1);\r\n}\r\n\r\n\r\n///////// BACKTEST PROCEDURE //\r\n\r\ndummy = Optimize("dummy", 0, 0, 4999, 1);\r\n\r\nSetTradeDelays(0,0,0,0);\r\n\r\n// Load CSV file\r\nfile = fopen( "C:\\\\Users\\\\admin\\\\OneDrive\\\\Michael\\\\Documents\\\\Investing\\\\DMT Discord Server\\\\CSV Data\\\\RGS_Source.csv", "r" );\r\n\r\n// get date\r\ndt = DateTime();\r\n\r\n// init var\r\nBuy = Sell = DateBuy = BuyPrice = 0;\r\n\r\n// lookup CSV and current date to see if the stock is in the daily trading plan for the day\r\n\r\nif( file AND BarCount &gt; 5)\r\n{\r\n    // discard header row\r\n    line = fgets( file );\r\n\r\n    index = 0;\r\n\r\n    while( ! feof( file ) ) // loop while not end of file\r\n    {\r\n        // extract current csv line\r\n        line = fgets( file );\r\n\r\n        // get ticker\r\n        Ticker = StrExtract( line, 1 );\r\n\r\n        if( Name() == Ticker)\r\n        {\r\n            // extract date and buy point\r\n\t\t\tDateStr\t\t= StrExtract( line, 0 );\r\n            RGSDate \t= StrToDateTime( DateStr );\r\n            RGSBP\t  \t= StrExtract( line, 4 );\r\n            RGSBP\t\t= StrTrim( RGSBP, "$", 1 );\r\n            PivotPrice\t= StrToNum( RGSBP );\r\n\r\n            // Check if breakout occurs\r\n            Breakout\t= H &gt;= PivotPrice;\r\n\r\n            // verify date is correct\r\n            DateBuy\t\t= dt == RGSDate;\r\n\r\n            // check 1% limit not breached\r\n            Limit = O &lt; 1.01 * PivotPrice;\r\n\r\n            // fix the buy price to the pivot price\r\n            for( i = index + 1; i &lt; BarCount; i++ )\r\n\t\t\t{\r\n\t\t\t\tif (Buy[i] == 0)\r\n\t\t\t\t\tBuy[i] = DateBuy[i] AND Breakout[i] AND Limit[i];// AND LastValue(Random()) &gt; 0.50;\r\n\t\t\t\t\r\n                if( Buy[i] == 1)\r\n                {\r\n                    BuyPrice[i] = PivotPrice;\r\n                    index = i;\r\n                }\r\n                else\r\n                {\r\n                    BuyPrice[i] += 0;\r\n                }\r\n\t\t\t}\r\n\t\t}\r\n        \r\n    }\r\n}\r\nelse\r\n{\r\n    printf( "ERROR: file can not be found (does not exist)" );\r\n}\r\n\r\nSetSortColumns( 3 );\r\n\r\n// close the file\r\nfclose( file );\r\n</FormulaContent>
<ApplyTo>2</ApplyTo>
<RangeType>0</RangeType>
<RangeAmount>1</RangeAmount>
<FromDate>2020-08-26 00:00:00</FromDate>
<ToDate>2021-09-17</ToDate>
<SyncOnSelect>0</SyncOnSelect>
<RunEvery>0</RunEvery>
<RunEveryInterval>5min</RunEveryInterval>
<IncludeFilter>
<ExcludeMode>0</ExcludeMode>
<OrSelection>1</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>1</Category0>
<Type1>0</Type1>
<Category1>2</Category1>
<Type2>0</Type2>
<Category2>0</Category2>
<Type3>0</Type3>
<Category3>0</Category3>
<Type4>0</Type4>
<Category4>0</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</IncludeFilter>
<ExcludeFilter>
<ExcludeMode>1</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>-1</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</ExcludeFilter>
</General>
<BacktestSettings>
<InitialEquity>1000000</InitialEquity>
<TradeFlags>1</TradeFlags>
<MaxLossStopMode>0</MaxLossStopMode>
<MaxLossStopValue>0</MaxLossStopValue>
<MaxLossStopAtStop>1</MaxLossStopAtStop>
<ProfitStopMode>0</ProfitStopMode>
<ProfitStopValue>0</ProfitStopValue>
<ProfitStopAtStop>1</ProfitStopAtStop>
<TrailingStopMode>0</TrailingStopMode>
<TrailingStopPeriods>0</TrailingStopPeriods>
<TrailingStopValue>0</TrailingStopValue>
<TrailingStopAtStop>1</TrailingStopAtStop>
<CommissionMode>0</CommissionMode>
<CommissionValue>0</CommissionValue>
<BuyPriceField>0</BuyPriceField>
<BuyDelay>0</BuyDelay>
<SellPriceField>0</SellPriceField>
<SellDelay>0</SellDelay>
<ShortPriceField>0</ShortPriceField>
<ShortDelay>0</ShortDelay>
<CoverPriceField>0</CoverPriceField>
<CoverDelay>0</CoverDelay>
<ReportSystemFormula>0</ReportSystemFormula>
<ReportSystemSettings>0</ReportSystemSettings>
<ReportOverallSummary>1</ReportOverallSummary>
<ReportSummary>1</ReportSummary>
<ReportTradeList>1</ReportTradeList>
<LoadRemainingQuotes>1</LoadRemainingQuotes>
<Periodicity>0</Periodicity>
<InterestRate>0</InterestRate>
<ReportOutPositions>1</ReportOutPositions>
<UseConstantPriceArrays>0</UseConstantPriceArrays>
<PointsOnlyTest>0</PointsOnlyTest>
<AllowShrinkingPosition>0</AllowShrinkingPosition>
<RangeType>0</RangeType>
<RangeLength>0</RangeLength>
<RangeFromDate>2020-08-26 00:00:00</RangeFromDate>
<RangeToDate>2021-09-17</RangeToDate>
<ApplyTo>2</ApplyTo>
<FilterQty>2</FilterQty>
<IncludeFilter>
<ExcludeMode>0</ExcludeMode>
<OrSelection>1</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>1</Category0>
<Type1>0</Type1>
<Category1>2</Category1>
<Type2>0</Type2>
<Category2>0</Category2>
<Type3>0</Type3>
<Category3>0</Category3>
<Type4>0</Type4>
<Category4>0</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</IncludeFilter>
<ExcludeFilter>
<ExcludeMode>1</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>-1</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</ExcludeFilter>
<UseOptimizedEvaluation>0</UseOptimizedEvaluation>
<BacktestRangeType>0</BacktestRangeType>
<BacktestRangeLength>0</BacktestRangeLength>
<BacktestRangeFromDate>2020-08-26 00:00:00</BacktestRangeFromDate>
<BacktestRangeToDate>2021-09-17</BacktestRangeToDate>
<MarginRequirement>100</MarginRequirement>
<SameDayStops>0</SameDayStops>
<RoundLotSize>1</RoundLotSize>
<TickSize>0</TickSize>
<DrawdownPriceField>0</DrawdownPriceField>
<ReverseSignalForcesExit>0</ReverseSignalForcesExit>
<NoDefaultColumns>0</NoDefaultColumns>
<AllowSameBarExit>1</AllowSameBarExit>
<ExtensiveOptimizationWarning>1</ExtensiveOptimizationWarning>
<WaitForBackfill>0</WaitForBackfill>
<MaxRanked>4</MaxRanked>
<MaxTraded>100</MaxTraded>
<MaxTracked>100</MaxTracked>
<PortfolioReportMode>0</PortfolioReportMode>
<MinShares>1</MinShares>
<SharpeRiskFreeReturn>5</SharpeRiskFreeReturn>
<PortfolioMode>0</PortfolioMode>
<PriceBoundCheck>1</PriceBoundCheck>
<AlignToReferenceSymbol>0</AlignToReferenceSymbol>
<ReferenceSymbol>^DJI</ReferenceSymbol>
<UPIRiskFreeReturn>5.4</UPIRiskFreeReturn>
<NBarStopMode>0</NBarStopMode>
<NBarStopValue>0</NBarStopValue>
<NBarStopReentryDelay>0</NBarStopReentryDelay>
<MaxLossStopReentryDelay>0</MaxLossStopReentryDelay>
<ProfitStopReentryDelay>0</ProfitStopReentryDelay>
<TrailingStopReentryDelay>0</TrailingStopReentryDelay>
<AddFutureBars>0</AddFutureBars>
<DistChartSpacing>5</DistChartSpacing>
<ProfitDistribution>1</ProfitDistribution>
<MAFEDistribution>1</MAFEDistribution>
<IndividualDetailedReports>0</IndividualDetailedReports>
<PortfolioReportTradeList>1</PortfolioReportTradeList>
<LimitTradeSizeAsPctVol>0</LimitTradeSizeAsPctVol>
<DisableSizeLimitWhenVolumeIsZero>0</DisableSizeLimitWhenVolumeIsZero>
<UsePrevBarEquityForPosSizing>1</UsePrevBarEquityForPosSizing>
<NBarStopHasPriority>0</NBarStopHasPriority>
<UseCustomBacktestProc>0</UseCustomBacktestProc>
<CustomBacktestProcFormulaPath/>
<MinPosValue>0.01</MinPosValue>
<MaxPosValue>0</MaxPosValue>
<ChartInterval>86400</ChartInterval>
<DisableRuinStop>0</DisableRuinStop>
<OptTarget>CAR/MDD</OptTarget>
<WFMode>0</WFMode>
<GenerateReport>1</GenerateReport>
<MaxLongPos>0</MaxLongPos>
<MaxShortPos>0</MaxShortPos>
<SeparateLongShortRank>0</SeparateLongShortRank>
<TotalSymbolQty>8646</TotalSymbolQty>
<EnableUserReportCharts>1</EnableUserReportCharts>
<ChartWidth>500</ChartWidth>
<ChartHeight>300</ChartHeight>
<SettlementDelay>0</SettlementDelay>
<PortfolioReportSystemFormula>1</PortfolioReportSystemFormula>
<InterestRateSymbol>0</InterestRateSymbol>
<MarginRate>5</MarginRate>
<IncludeBHStats>1</IncludeBHStats>
<BHSymbol>^DJI</BHSymbol>
<MCEnable>1</MCEnable>
<MCRuns>1000</MCRuns>
<MCPosSizeMethod>3</MCPosSizeMethod>
<MCPosSizeShares>100</MCPosSizeShares>
<MCPosSizeValue>1000</MCPosSizeValue>
<MCPosSizePctEquity>5</MCPosSizePctEquity>
<MCChartEquityCurves>1</MCChartEquityCurves>
<MCStrawBroomLines>20</MCStrawBroomLines>
<Scenario>0</Scenario>
<MCChartEquityScale>0</MCChartEquityScale>
<MCUseEquityChanges>0</MCUseEquityChanges>
<MCLogScaleFinalEquity>0</MCLogScaleFinalEquity>
<MCLogScaleDrawdown>0</MCLogScaleDrawdown>
<MCNegativeDrawdown>1</MCNegativeDrawdown>
<ISEnabled>1</ISEnabled>
<ISStartDate>2000-01-01</ISStartDate>
<ISEndDate>2004-01-01</ISEndDate>
<ISLastDate>2017-01-01</ISLastDate>
<ISStep>1</ISStep>
<ISStepUnit>3</ISStepUnit>
<ISAnchored>0</ISAnchored>
<ISLastUsesToday>1</ISLastUsesToday>
<OSEnabled>1</OSEnabled>
<OSStartDate>2004-01-01</OSStartDate>
<OSEndDate>2005-01-01</OSEndDate>
<OSLastDate>2018-01-01</OSLastDate>
<OSStep>1</OSStep>
<OSStepUnit>3</OSStepUnit>
<OSAnchored>0</OSAnchored>
<OSLastUsesToday>1</OSLastUsesToday>
</BacktestSettings>
</AmiBroker-Analysis>
