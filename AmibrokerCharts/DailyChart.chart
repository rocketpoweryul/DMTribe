<?xml version="1.0" encoding="UTF-8"?>
<Window>
	<Sheet>
		<Name>QQQ</Name>
		<Pane>
			<ChartID>1013</ChartID>
			<PercentHeight>90</PercentHeight>
			<Formula>// THIS IS NOT FORMAL CODE\r\n\r\n// This file is a chart formula for Amibroker\r\n// The purpose is to test detection of chart characteristics driven by the function library\r\n\r\n// include the functional library\r\n#pragma nocache\r\n#include_once "C:\\Users\\admin\\OneDrive\\Michael\\Documents\\GitHub\\TPT\\TPT_Func_Lib.afl"\r\n#include_once "Formulas\\Norgate Data\\Norgate Data Functions.afl"\r\n\r\n// Ticker\r\nTick = Name();\r\n\r\n// GUI\r\n_SECTION_BEGIN( "Chart Mode" );\r\ndispFlag = ParamToggle( "Chart Data Mode", "Sell|Buy", 1 );\r\n_SECTION_END();\r\n\r\nxbut = 0;\r\nxbut_shift = 70;\r\n\r\n\r\n// function to return color for grade\r\nfunction getGradeColor(grade_str)\r\n{\r\n\t// figure out color per grade string\r\n\tswitch( grade_str )\r\n\t{\r\n\t\tcase "A+":\r\n\t\tcase "A":\r\n\t\tcase "A-":\r\n\t\t\tthecolor = colorGreen;\r\n\t\t\tbreak;\r\n\t\tcase "B+":\r\n\t\tcase "B":\r\n\t\tcase "B-":\r\n\t\t\tthecolor = colorDarkYellow;\r\n\t\t\tbreak;\r\n\t\tcase "C+":\r\n\t\tcase "C":\r\n\t\tcase "C-":\r\n\t\t\tthecolor = colorOrange;\r\n\t\t\tbreak;\r\n\t\tcase "D+":\r\n\t\tcase "D":\r\n\t\tcase "D-":\r\n\t\t\tthecolor = colorRed;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthecolor = colorDefault;\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\t// return the color required\r\n\treturn thecolor;\r\n}\r\n\r\nGfxSetZOrder( 1 );\r\n{\r\n    IntStkBut = 3;\r\n    GuiButton( "Add to IS", IntStkBut, xbut, 20, 65, 20, notifyClicked );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == 3 )\r\n    {\r\n        IntStock = CategoryFind( "Interesting Stocks", categoryWatchlist );\r\n        CategoryAddSymbol( Tick, categoryWatchlist, IntStock );\r\n    }\r\n\r\n    xbut += xbut_shift;\r\n\r\n    SqStkBut = 4;\r\n    GuiButton( "Add to Sq", SqStkBut, xbut, 20, 65, 20, notifyClicked );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == 4 )\r\n    {\r\n        SqStock = CategoryFind( "Buy List", categoryWatchlist );\r\n        CategoryAddSymbol( Tick, categoryWatchlist, SqStock );\r\n    }\r\n\r\n    xbut += xbut_shift;\r\n\r\n    RemFav = 5;\r\n    GuiButton( "Rem Fav", RemFav, xbut, 20, 65, 20, notifyClicked );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == 5 )\r\n    {\r\n        CategoryRemoveSymbol( Tick, categoryFavorite, 0 );\r\n    }\r\n\r\n    xbut += xbut_shift;\r\n\r\n    ExcludeStock = 6;\r\n    GuiButton( "Exclude", ExcludeStock, xbut, 20, 65, 20, notifyClicked );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == 6 )\r\n    {\r\n        ExcStock = CategoryFind( "DMT EXCLUDE LIST", categoryWatchlist );\r\n        CategoryAddSymbol( Tick, categoryWatchlist, ExcStock );\r\n    }\r\n\r\n    xbut += xbut_shift;\r\n\r\n    GetEarningsData = 7;\r\n    GuiButton( "Corp Earn", GetEarningsData, xbut, 20, 65, 20, notifyClicked );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == 7 )\r\n    {\r\n        exe\t\t= "msedge.exe";\r\n        args \t= "https://www.zacks.com/stock/research/" + Tick + "/earnings-calendar";\r\n        wd   \t= "C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\";\r\n        se = ShellExecute( exe, args, wd );\r\n    }\r\n\r\n    xbut += xbut_shift;\r\n\r\n    // Stock Checkup function\r\n    ISLButton = 9;\r\n\r\n    GuiButton( "IBD SC", ISLButton, xbut, 20, 65, 20, notifyClicked );\r\n    GuiEnable( ISLButton, True );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == ISLButton )\r\n    {\r\n        if( MarketID() == 1 )\r\n            ISLMkt = "nyse";\r\n        else\r\n            if( MarketID() == 2 )\r\n                ISLMkt = "nasdaq";\r\n            else\r\n                GuiEnable( ISLButton, False );\r\n\r\n        ISLticker \t= Name();\r\n        IS_ADR\t\t= StrFind( FullName(), "ADR" ) &gt; 0;\r\n        ISLComp     = StrReplace( FullName(), "Common", "" );\r\n        ISLComp     = StrReplace( ISLComp,    "Class" , "Cl" );\r\n        ISLComp\t\t= StrReplace( ISLComp,    " ",      "-" );\r\n\r\n\r\n\r\n        exe\t\t= "msedge.exe";\r\n        wd   \t= "C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\";\r\n        ISLURL \t= "https://research.investors.com/stock-checkup/" + ISLMkt + "-" + ISLComp + WriteIf( IS_ADR, "ADR-", "" ) + ISLticker + ".aspx";\r\n        ShellExecute( exe, ISLURL, wd );\r\n    }\r\n\r\n    xbut += xbut_shift;\r\n\t\r\n\t\r\n\t\r\n\r\n    // retrieve png of logo from iex\r\n    GetLogo = 8;\r\n    GuiButton( "Get Logo", GetLogo, xbut, 20, 65, 20, notifyClicked );\r\n\t\r\n\tfilenoexist = IsNull(fgetstatus("C:\\\\Users\\\\admin\\\\OneDrive\\\\Desktop\\\\temp\\\\LOGO\\\\" + Tick + ".png", 3));\r\n\r\n//    if( (GuiGetEvent( 0, 0 ) == 8 OR filenoexist) AND NOT StrFind(Tick, "$") )\r\n\tif( (GuiGetEvent( 0, 0 ) == 8 ) AND NOT StrFind(Tick, "$") )\r\n    {\r\n        ih = InternetOpenURL( "https://api.iex.cloud/v1/stock/" + Tick + "/logo" + "?token=" + "pk_52a6e86a06334512bce426aaf3f28dca" );\r\n\r\n        if( ih )\r\n        {\r\n            str = InternetReadString( ih );\r\n\r\n            // example api return is:\r\n            // {"url":"https://storage.googleapis.com/iexcloud-hl37opg/api/logos/AAPL.png"}\r\n\r\n            // process url in api return\r\n            len_of_str \t= StrLen( str );\r\n            urlstart \t= StrFind( str, "https" );\r\n            url \t\t= StrRight( str, len_of_str - urlstart + 1 );\r\n            len_of_url \t= StrLen( url );\r\n            url \t\t= StrLeft( url, len_of_url - 3 );\r\n\r\n            InternetClose( ih );\r\n        }\r\n\r\n        args = "--no-check-certificate -N -P C:\\\\Users\\\\admin\\\\OneDrive\\\\Desktop\\\\temp\\\\LOGO\\\\ " + url;\r\n        se = ShellExecute( "wget.exe", args, "C:\\\\Program Files (x86)\\\\GnuWin32\\\\bin\\\\" );\r\n    }\r\n\r\n    xbut += xbut_shift * 17;\r\n}\r\n\r\n_SECTION_BEGIN( "Price" );\r\n{\r\n    //plot chart data\r\n    thickness = Param( "Bar thickness", -20, -100, 10, 1 );\r\n\r\n    rc = ROC( C, 1 );\r\n    color = IIf( rc &gt;= 0, colorBlue, IIf( rc &lt; 0, colorRed, -1 ) );\r\n\r\n    style = styleNoTitle | styleBar;\r\n\r\n    PlotOHLC( O, H, L, C, "", color, style, Null, Null, 0, 0, thickness );\r\n\r\n    _N( Title = StrFormat( "{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%)", O, H, L, C, SelectedValue( ROC( C, 1 ) ) ) );\r\n\r\n    // plot MAs and RS Line\r\n    SMA200 = MA( C, 200 );\r\n    SMA150 = MA( C, 150 );\r\n    SMA050 = MA( C,  50 );\r\n    SMA020 = MA( C,  20 );\r\n    SMA010 = MA( C,  10 );\r\n\r\n    SMA200_ext = LastValue( C / SMA200 - 1 ) * 100;\r\n    SMA150_ext = LastValue( C / SMA150 - 1 ) * 100;\r\n    SMA050_ext = LastValue( C / SMA050 - 1 ) * 100;\r\n    SMA020_ext = LastValue( C / SMA020 - 1 ) * 100;\r\n    SMA010_ext = LastValue( C / SMA010 - 1 ) * 100;\r\n\r\n    Plot( SMA200, "200D SMA ", colorBlack );\r\n    Plot( SMA150, "150D SMA", colorBlue );\r\n    Plot( SMA050, "50D SMA" , colorRed );\r\n    Plot( SMA020, "20D SMA" , colorGreen );\r\n\r\n    PlotText( "200d SMA " + NumToStr( SMA200_ext, 1.0 ) + "%", BarCount, LastValue( SMA200 ), colorLightGrey, colorDefault, -5 );\r\n    PlotText( "150d SMA " + NumToStr( SMA150_ext, 1.0 ) + "%", BarCount, LastValue( SMA150 ), colorLightBlue, colorDefault, -5 );\r\n    PlotText( "50d SMA "  + NumToStr( SMA050_ext, 1.0 ) + "%", BarCount, LastValue( SMA050 ), colorLightOrange, colorDefault, -5 );\r\n    PlotText( "20d SMA "  + NumToStr( SMA020_ext, 1.0 ) + "%", BarCount, LastValue( SMA020 ), colorLime, colorDefault, -5 );\r\n\r\n    if( NOT dispflag )\r\n    {\r\n        Plot( SMA010, "10D SMA" , colorDarkYellow );\r\n        PlotText( "10d SMA", BarCount, LastValue( SMA010 ), colorDarkYellow, colorDefault, -5 );\r\n    }\r\n\r\n    // Three weeks tight\r\n    /*\r\n    wc = TimeFrameCompress( C, inWeekly );\r\n    ROC_C = abs( ROC( wc, 1 ) );\r\n    TWTRaw   = ROC_C &lt; 1.5 AND Ref( ROC_C, -1 ) &lt; 1.5;\r\n    TWT \t = TWTRaw OR Sum( Ref( TWTRaw, 2 ), 3 );\r\n\r\n    TWT = TimeFrameExpand( TWT, inWeekly, expandPoint );\r\n    TWT = IIf( IsNull( TWT ), 0, TWT );\r\n\t*/\r\n    //PlotShapes(IIf(TWT, shapeHollowSquare, shapeNone), colorGreen, 0, Avg, 0, 0);\r\n\r\n\r\n}\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN( "RS Line" );\r\n{\r\n// Calculcate the RSL\r\n    RSL  = C / Foreign( "$SPX", "C" );\r\n\r\n// bias the RSL to appear below your chart without screwing it up (you may need to adjust the 2.25 value to your tsate)\r\n    rslb = RSL * 1500 + LastVisibleValue( C ) / 2.25;\r\n\r\n// plot the RSL on the chart\r\n    Plot( rslb, "RS Line", colorBlue, styleDashed );\r\n    PlotText( "RS Line", BarCount, LastValue( rslb ), colorLightBlue, colorDefault, -5 );\r\n\r\n// find the last highest value in the last three months\r\n    H_HHV = HHV( H, 69 );\r\n\r\n// find the number of bars since this high occurred\r\n    BaseHigh = BarsSince( H == H_HHV );\r\n\r\n// find the high of the RSL within the consolidation\r\n    RS_HHV = HHV( RSL, 69 );\r\n\r\n// check if a new RSL new high occurs\r\n    RSNH = RSL &gt; Ref( RS_HHV, -1 );\r\n    RSNH = ExRem( RSNH, NOT RSNH );\t// remove consecutive days\r\n\r\n// determine if the RSL new high is within a decently long consolidation (I chose four weeks)\r\n    RSNH_inbase = RSNH AND BaseHigh &gt; 20;\r\n    RSNH_inbase = ExRem( RSNH_inbase, NOT RSNH_inbase ); // remove consecutive days\r\n\r\n\r\n// plot the dots for regular RSL new highs and those within consolidation with different colours\r\n    PlotShapes( IIf( RSNH, shapeCircle, shapeNone ), colorAqua, 0, rslb, 0 );\r\n    PlotShapes( IIf( RSNH_inbase, shapeCircle, shapeNone ), colorOrange, 0, rslb, 0 );\r\n\r\n    /*\r\n    Buy = false;\r\n    Buy[BarCount-2] = true;\r\n    RSLHigh \t\t= ExRem(RSL == HHV(RSL, 69), Buy);\r\n    rslb\t\t\t= RSL + C[BarCount-1]/2.25;\r\n    PlotShapes(IIf(RSLHigh, shapeCircle, shapeNone), colorAqua, 0, rslb, 0);\r\n    Plot(rslb, "RS Line", colorBlue, styleDashed);\r\n    PlotText("RS Line", BarCount+2, LastValue(rslb), colorBlue);\r\n    */\r\n}\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN( "Hourly Pivot High" );\r\n{\r\n    hourpivot = Param( "Hourly Pivot High", 0, 0, HighestVisibleValue( H ), 0.01 );\r\n}\r\n\r\n// determine RS\r\nRS = StaticVarGet( "RS_" + Tick );\r\n/*\r\nRSref = LastValue(HHV(rslb, 21*6));\r\nRScurve = RS/99*RSref*0.28+LastValue(C)*0.6;\r\nPlot(RScurve, "RS Curve", colorGrey50, styleDashed);\r\nPlotText("RS Curve", BarCount+2, LastValue(RScurve), colorBlack);\r\n*/\r\n\r\n// determine FuelTank Rating\r\nFTCapacity \t= Sum( V, 50 );\r\nFTAccumul \t= IIf( H - L == 0, 0, SafeDivide(V * ( ( C - L ) - ( H - C ) ), ( H - L ) ));\r\nFTFuel\t\t= Sum( FTAccumul, 50 );\r\n\r\nCSMA50 = MA( C, 50 );\r\n\r\nFuelTank = round( IIf( FTCapacity == 0, 0, SafeDivide(FTFuel, FTCapacity) ) * 100 ) * IIf( C &lt; CSMA50, 1, CSMA50 / C ) ;\r\n\r\n\r\n///// DEBUG CODE: FUNCTION TEST CODE (EMPTY IF NO FUNCTIONAL UNIT TESTS BEING PERFORMED)\r\n\r\n\r\n/////\r\n\r\n// DEBUG CODE: BLUE AND GOLD ARROW PLOTS\r\nenabledebugarrow = 0;\r\n\r\nif( enabledebugarrow )\r\n{\r\n    //PlotShapes(IIf(SwingLow(L),  shapeUpArrow,   shapeNone), colorOrange, 0, Graph0Low,  -25);\r\n    //PlotShapes(IIf(SwingHigh(H), shapeDownArrow, shapeNone), colorOrange, 0, Graph0High, -25);\r\n\r\n    ConIndex = getContractionIndex( L, H, O, C );\r\n    SH \t\t = SwingHigh( H );\r\n\r\n    i = 1;\r\n    HOBBars = LastValue( HHVBars( H, 130 ) );\r\n    HOB     = LastValue( HHV( H, 130 ) );\r\n\r\n\r\n    do\r\n    {\r\n        CurLow = LowestLow( L, H, O, C, SH, i );\r\n        LowCond  = L == CurLow;\r\n        PlotShapes( IIf( LowCond, shapeUpArrow, shapeNone ), colorBlue, 0, Graph0Low, -40 );\r\n\r\n        CurHigh = HighestHigh( H, SH, i );\r\n        HighCond = H == CurHigh;\r\n        PlotShapes( IIf( HighCond AND SH, shapeDownArrow, shapeNone ), colorBlue, 0, Graph0High, -40 );\r\n\r\n        i++;\r\n        SHBars = SwingIndex( SH, i );\r\n    }\r\n    while( SHBars &lt;= HOBBars );\r\n\r\n    i = 1;\r\n\r\n    do\r\n    {\r\n        CurLow = LowestLow( L, H, O, C, ConIndex, i );\r\n        LowCond  = L == CurLow;\r\n        PlotShapes( IIf( LowCond, shapeUpArrow, shapeNone ), colorDarkYellow, 0, Graph0Low, -40 );\r\n\r\n        CurHigh = HighestHigh( H, ConIndex, i );\r\n        HighCond = H == CurHigh;\r\n        PlotShapes( IIf( HighCond AND ConIndex, shapeDownArrow, shapeNone ), colorDarkYellow, 0, Graph0High, -40 );\r\n\r\n        i++;\r\n        SHBars = SwingIndex( ConIndex, i );\r\n    }\r\n    while( SHBars &lt;= HOBBars );\r\n\r\n}\r\n\r\n// STOCK ANALYSIS CODE\r\n\r\n// init pivot data\r\nPvtVld \t\t= False;\r\nPvtIndex\t= 0;\r\nPvtPrice\t= 0;\r\nLHSBars\t\t= BarCount;\r\nLHSPrice \t= 0;\r\nPvtH\t\t= 0;\r\nPrevH\t\t= 0;\r\nOvlp \t\t= 0;\r\nTurnLA \t\t= Null;\r\nPPPvtVld\t= 0;\r\nDepth \t\t= Null;\r\n\r\nIPO = BarCount &lt; 21 * 12;\r\n\r\n// find a valid base\r\nVldCSBase  \t= False;\r\nVldCapBase  = False;\r\nVldPPBase   = False;\r\n\r\n\r\n// determine if trending\r\nTF = TrendFilter( L, H, O, C, V );\r\n\r\nif( StrMatch( StaticVarGetText( "ChartRefresh" ), Tick ) )\r\n{\r\n    VldPPBase = StaticVarGet( "_VldPPBAse" );\r\n    VldCSBase = StaticVarGet( "_VldCSBase" );\r\n    VldCapBase = StaticVarGet( "_VldCapBase" );\r\n}\r\nelse\r\n{\r\n    VldPPBase\t\t= getPPBaseParam( L, H,\t      "Validity" );\r\n\r\n    if( NOT VldPPBase )\r\n        VldCSBase  \t= getCSBaseParam( L, H, O, C, "Validity" );\r\n\r\n    if( NOT VldCSBase )\r\n        VldCapBase  = getCSCapBaseParam( L, H, O, C, "Validity" );\r\n\r\n    if( VldPPBase ) StaticVarSet( "_VldPPBAse", VldPPBase );\r\n    else StaticVarSet( "_VldPPBAse", False );\r\n\r\n    if( VldCSBase ) StaticVarSet( "_VldCSBase", VldCSBase );\r\n    else StaticVarSet( "_VldCSBase", False );\r\n\r\n    if( VldCapBase ) StaticVarSet( "_VldCapBase", VldCapBase );\r\n    else StaticVarSet( "_VldCapBase", False );\r\n}\r\n\r\n// check for manual base\r\nValidConsolidation = 0;\r\nif (NOT VldCSBase AND NOT VldPPBase AND NOT VldCapBase)\r\n{\r\n\tBS_base = Study("BS", 1045);\r\n\tValidConsolidation = ValueWhen(NOT IsNull(BS_Base), BS_Base) &gt; 0;\r\n}\r\n\r\n// get and plot data depending on base type or else do nothing\r\n\r\nif( VldCapBase )\r\n{\r\n    // get params\r\n    CapValues  \t= getCSCapBaseParam( L, H, O, C, "Values"\t);\r\n\r\n    LHSPrice \t= CapValues[0];\r\n    LHSBars\t\t= CapValues[1];\r\n    LowPrice \t= CapValues[2];\r\n\r\n    LowBar \t\t= IIf( BarIndex() &gt; BarCount - CapValues[1] - 1, LowPrice, Null );\r\n    HighBar\t\t= IIf( BarIndex() &gt; BarCount - CapValues[1] - 1, LHSPrice, Null );\r\n\r\n    Plot( LowBar , "LowBar" , colorTeal, styleThick );\r\n    Plot( HighBar, "HighBar", colorTeal, styleThick );\r\n\r\n    Depth = ( 1 - LowPrice / LHSPrice ) * 100;\r\n\r\n}\r\n\r\nif( VldCSBase )\r\n{\r\n    // get params\r\n    LHSPrice  \t= getCSBaseParam( L, H, O, C, "LHSPrice"\t);\r\n    LHSBars  \t= getCSBaseParam( L, H, O, C, "LHSBars"\t\t);\r\n    LowPrice  \t= getCSBaseParam( L, H, O, C, "LowPrice"\t);\r\n\r\n    LowBar \t\t= IIf( BarIndex() &gt; BarCount - LHSBars - 1, LowPrice, Null );\r\n    HighBar\t\t= IIf( BarIndex() &gt; BarCount - LHSBars - 1, LHSPrice, Null );\r\n\r\n    Plot( LowBar , "LowBar" , colorTeal, styleThick );\r\n    Plot( HighBar, "HighBar", colorTeal, styleThick );\r\n\r\n    Depth = ( 1 - LowPrice / LHSPrice ) * 100;\r\n}\r\n\r\nif( VldPPBase )\r\n{\r\n    // get params\r\n    LHSPrice  \t= getPPBaseParam( L, H, "PoleHigh"\t);\r\n    LowPrice  \t= getPPBaseParam( L, H, "FlagLow"\t);\r\n\r\n    LHSBars  \t= getPPBaseParam( L, H, "PHBar"\t);\r\n    PoleLow  \t= getPPBaseParam( L, H, "PoleLow"\t);\r\n    PoleLen  \t= getPPBaseParam( L, H, "PoleLen"\t);\r\n\r\n    FlagLowLine \t= IIf( BarIndex() &gt; BarCount - LHSBars - 1, LowPrice , Null );\r\n    FlagHighLine\t= IIf( BarIndex() &gt; BarCount - LHSBars - 1, LHSPrice, Null );\r\n\r\n    PoleLine\t\t= LineArray( BarCount - PoleLen - LHSBars, PoleLow, BarCount - LHSBars, LHSPrice );\r\n\r\n    Plot( FlagLowLine , "LowBar"  , colorTeal, styleThick );\r\n    Plot( FlagHighLine, "HighBar" , colorTeal, styleThick );\r\n    Plot( PoleLine,\t   "PoleLine", colorTeal, styleThick );\r\n\r\n    Depth = ( 1 - LowPrice / LHSPrice ) * 100;\r\n}\r\n\r\n/*\r\nif (Depth &gt; 15 AND (VldCSBase OR VldCapBase OR VldPPBase))\r\n{\r\n\tTurnLA = getTurnLA(L, H, O, C);\r\n\r\n\t// format turn for plotting\r\n\tTurnLAPlot = IIf(TurnLA &gt; 1.01*LHSPrice, Null, TurnLA);\r\n\tTurnLAPlot = IIf(TurnLA &lt; 0.99*LowPrice, Null, TurnLA);\r\n\r\n\tPlot(TurnLAPlot, "TurnLA", colorBrown);\r\n}\r\n*/\r\n\r\n\r\n// get and plot pivot data if there is a valid base\r\n\r\n// get contraction index\r\nConIndex = getContractionIndex( L, H, O, C );\r\n\r\nPvtVld \t\t= getMSPivotParam( L, H, O, C, "Validity" );\r\nPvtIndex\t= getMSPivotParam( L, H, O, C, "SwingHighIndex" );\r\nPvtPrice\t= getMSPivotParam( L, H, O, C, "Price"\t);\r\n\r\nPBActive = StaticVarGet( Tick + "PBActive" );\r\nif (IsNull(PBActive))\r\n\tPBActive = False;\r\n\r\n// activate pullback pivot\r\nSetPB = 10;\r\n\r\nGUIText = WriteIf( PBActive, "PB Pvt", "Nml Pvt" );\r\ncolour = IIf( PBActive, colorBlue, IIf(PvtVld, colorGreen, colorRed) );\r\n\r\nGuiButton( GUIText, SetPB, xbut, 20, 65, 20, notifyClicked );\r\nGuiSetColors( SetPB, SetPB, colorDefault, colorWhite, colour );\r\n\r\nif( GuiGetEvent( 0, 0 ) == SetPB )\r\n{\r\n    if( PBActive )\r\n    {\r\n        StaticVarSet( Tick + "PBActive", False, True );\r\n        StaticVarSet( Tick + "PBBar", 0, True );        \r\n    }\r\n    else\r\n    {\r\n        StaticVarSet( Tick + "PBActive", True, True );\r\n    }\r\n}\r\n\r\nxbut += xbut_shift;\r\n\r\n// set pullback bar\r\nif( PBActive )\r\n{\r\n\tPBBar = StaticVarGet( Tick + "PBBar" );\r\n\t\r\n\tif( IsNull( PBBar ) )\r\n\t\tPBBar = 0;\r\n\t\r\n    SetPBBar = 11;\r\n\r\n    GUIText = NumToStr( PBBar, 1.0 );\r\n    \r\n    switch( PBBar )\r\n    {\r\n\t\tcase 0:\r\n\t\t\tcolour = colorGreen;\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tcolour = colorDarkYellow;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tcolour = colorOrange;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tcolour = colorRed;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n    GuiButton( GUIText, SetPBBar, xbut, 20, 25, 20, notifyClicked );\r\n    GuiSetColors( SetPBBar, SetPBBar, colorDefault, colorWhite, colour );\r\n\r\n    if( GuiGetEvent( 0, 0 ) == SetPBBar )\r\n    {\r\n        PBBar = (PBBar + 1);// % 3;\r\n    }\r\n    StaticVarSet( Tick + "PBBar", PBBar, True );\r\n}\r\n\r\n//RequestTimedRefresh( 1 );\r\nRequestMouseMoveRefresh();\r\n\r\nVolOK \t\t= checkVolume( C, V, ConIndex, LHSBars );\r\n\r\n// plot contraction size at contractions\r\nPPH\t  = Height( L, H, O, C, ConIndex, PvtIndex[0], PvtIndex[1] );\r\nPvtH  = Height( L, H, O, C, ConIndex, PvtIndex[2], PvtIndex[3] );\r\nPrevH = Height( L, H, O, C, ConIndex, PvtIndex[4], PvtIndex[5] );\r\n\r\n// plot green arrows at contractions\r\nPPLow    = PvtPrice[0];\r\nPPHigh   = PvtPrice[1];\r\nPvtLow   = PvtPrice[2];\r\nPvtHigh  = PvtPrice[3];\r\nPrevLow  = PvtPrice[4];\r\nPrevHigh = PvtPrice[5];\r\n\r\nif( PBActive )\r\n{\r\n    PvtHigh = LastValue( Ref( H, -PBBar ) );\r\n    PvtVld   = True;\r\n}\r\n\r\n//look for possible hourly pivot or at the turn pivot\r\nif( VldPPBAse AND NOT PvtVld )\r\n{\r\n    PPPvtVld = getPPPivotParam( L, H, C, V, LowPrice, LHSPrice, TurnLA, PvtH, PvtPrice[1] );\r\n}\r\n\r\n// pause pivot arrow\r\nPPCond = isPausePivot( L, H, O, C, ConIndex );\r\nif (NOT PvtVld AND PPCond)\r\n\tPvtVld = True;\r\n\r\ncustompivotinput = ParamToggle( "Custom Pivot", "No|Yes" );\r\ncustompivot = StaticVarGet(Tick + "CustomPivot");\r\nif (IsNull(custompivot))\r\n\tcustompivot = False;\r\n\r\nif (custompivot == NOT custompivotinput)\r\n\tcustompivot = custompivotinput;\r\n\r\nStaticVarSet(Tick + "CustomPivot", custompivot, True);\r\n\r\nCBP = Param( "Buy Point", LastValue( H ), 0, 10000 );\r\n\r\nif( dispflag )\r\n{\r\n\r\n    // text output pivot and stops\r\n    if( PBActive )\r\n    {\r\n        pivotprice = "BP:   $" + NumToStr( PvtHigh + 0.1, \t\t8.2, False );\r\n        limitprice = "Lim: $"  + NumToStr( ( PvtHigh + 0.1 ) * 1.01, 8.2, False );\r\n        PlotText( pivotprice, BarCount + 1, PvtHigh + 0.1, colorBlue, colorwhite, 0 );\r\n        PlotText( limitprice, BarCount + 1, ( PvtHigh + 0.1 ) * 1.01, colorBlue, colorwhite, 10 );\r\n\r\n        stop2 = "2% STP: $" + NumToStr( ( PvtHigh + 0.1 ) * 0.98, 8.2, False );\r\n        stop4 = "4% STP: $" + NumToStr( ( PvtHigh + 0.1 ) * 0.96, 8.2, False );\r\n        HRsell = "2R Sell: $" + NumToStr( ( PvtHigh + 0.1 ) * 1.06, 8.2, False );\r\n        PlotText( stop2, BarCount + 1, ( PvtHigh + 0.1 ) * 0.98, colorBlue, colorwhite );\r\n        PlotText( stop4, BarCount + 1, ( PvtHigh + 0.1 ) * 0.96, colorBlue, colorwhite, 0 );\r\n        PlotText( HRsell, BarCount + 1, ( PvtHigh + 0.1 ) * 1.06, colorBlue, colorwhite, 0 );\r\n\r\n    }\r\n    else\r\n        if( custompivot )\r\n        {\r\n            pivotprice = "BP:   $" + NumToStr( CBP + 0.1, \t\t8.2, False );\r\n            limitprice = "Lim: $"  + NumToStr( ( CBP + 0.1 ) * 1.01, 8.2, False );\r\n            PlotText( pivotprice, BarCount + 1, CBP + 0.1, colorBlue, colorwhite, 0 );\r\n            PlotText( limitprice, BarCount + 1, ( CBP + 0.1 ) * 1.01, colorBlue, colorwhite, 10 );\r\n\r\n            stop2 = "2% STP: $" + NumToStr( ( CBP + 0.1 ) * 0.98, 8.2, False );\r\n            stop4 = "4% STP: $" + NumToStr( ( CBP + 0.1 ) * 0.96, 8.2, False );\r\n            HRsell = "2R Sell: $" + NumToStr( ( CBP + 0.1 ) * 1.06, 8.2, False );\r\n            PlotText( stop2, BarCount + 1, ( CBP + 0.1 ) * 0.98, colorBlue, colorwhite );\r\n            PlotText( stop4, BarCount + 1, ( CBP + 0.1 ) * 0.96, colorBlue, colorwhite, 0 );\r\n            PlotText( HRsell, BarCount + 1, ( CBP + 0.1 ) * 1.06, colorBlue, colorwhite, 0 );\r\n\r\n        }\r\n        else\r\n            if( ( PvtVld OR PPPvtVld == 2 OR( PPPvtVld == 1 AND hourpivot == 0 ) ) AND NOT PPCond  AND dispflag )\r\n            {\r\n                pivotprice = "BP:   $" + NumToStr( PvtHigh + 0.1, \t\t8.2, False );\r\n                limitprice = "Lim: $"  + NumToStr( ( PvtHigh + 0.1 ) * 1.01, 8.2, False );\r\n                PlotText( pivotprice, BarCount + 1, PvtHigh + 0.1, colorGreen, colorwhite, 0 );\r\n                PlotText( limitprice, BarCount + 1, ( PvtHigh + 0.1 ) * 1.01, colorGreen, colorwhite, 10 );\r\n\r\n                stop2 = "2% STP: $" + NumToStr( ( PvtHigh + 0.1 ) * 0.98, 8.2, False );\r\n                stop4 = "4% STP: $" + NumToStr( ( PvtHigh + 0.1 ) * 0.96, 8.2, False );\r\n                HRsell = "2R Sell: $" + NumToStr( ( PvtHigh + 0.1 ) * 1.06, 8.2, False );\r\n                PlotText( stop2, BarCount + 1, ( PvtHigh + 0.1 ) * 0.98, colorGreen, colorwhite );\r\n                PlotText( stop4, BarCount + 1, ( PvtHigh + 0.1 ) * 0.96, colorGreen, colorwhite, 0 );\r\n                PlotText( HRsell, BarCount + 1, ( PvtHigh + 0.1 ) * 1.06, colorGreen, colorwhite, 0 );\r\n            }\r\n            else\r\n                if( PPPvtVld == 1 AND hourpivot &gt; 0 )\r\n                {\r\n                    pivotprice = "BP:   $" + NumToStr( hourpivot + 0.1, \t   8.2, False );\r\n                    limitprice = "Lim: $"  + NumToStr( ( hourpivot + 0.1 ) * 1.01, 8.2, False );\r\n                    PlotText( pivotprice, BarCount + 1, hourpivot + 0.1, colorGreen, colorwhite,   0 );\r\n                    PlotText( limitprice, BarCount + 1, ( hourpivot + 0.1 ) * 1.01, colorGreen, colorwhite,   10 );\r\n\r\n                    stop2 = "2% STP: $" + NumToStr( ( hourpivot + 0.1 ) * 0.98, 8.2, False );\r\n                    stop4 = "4% STP: $" + NumToStr( ( hourpivot + 0.1 ) * 0.96, 8.2, False );\r\n                    HRsell = "2R Sell: $" + NumToStr( ( hourpivot + 0.1 ) * 1.06, 8.2, False );\r\n                    PlotText( stop2, BarCount + 1, ( hourpivot + 0.1 ) * 0.98, colorGreen, colorwhite, 0 );\r\n                    PlotText( stop4, BarCount + 1, ( hourpivot + 0.1 ) * 0.96, colorGreen, colorwhite, 0 );\r\n                    PlotText( HRsell, BarCount + 1, ( hourpivot + 0.1 ) * 1.06, colorGreen, colorwhite, 0 );\r\n                }\r\n                else\r\n                    if( PPCond AND PvtVld )\r\n                    {\r\n                        pivotprice = "BP:   $" + NumToStr( LastValue( H ) + 0.1, \t\t8.2, False );\r\n                        limitprice = "Lim: $"  + NumToStr( ( LastValue( H ) + 0.1 ) * 1.01,     8.2, False );\r\n                        PlotText( pivotprice, BarCount + 1, LastValue( H ) + 0.1, colorGreen, colorwhite, 0 );\r\n                        PlotText( limitprice, BarCount + 1, ( LastValue( H ) + 0.1 ) * 1.01, colorGreen, colorwhite, 10 );\r\n\r\n                        stop2 = "2% STP: $" + NumToStr( ( LastValue( H ) + 0.1 ) * 0.98, 8.2, False );\r\n                        stop4 = "4% STP: $" + NumToStr( ( LastValue( H ) + 0.1 ) * 0.96, 8.2, False );\r\n                        HRsell = "2R Sell: $" + NumToStr( ( LastValue( H ) + 0.1 ) * 1.06, 8.2, False );\r\n                        PlotText( stop2, BarCount + 1, ( LastValue( H ) + 0.1 ) * 0.98, colorGreen, colorwhite, 0 );\r\n                        PlotText( stop4, BarCount + 1, ( LastValue( H ) + 0.1 ) * 0.96, colorGreen, colorwhite, 0 );\r\n                        PlotText( HRsell, BarCount + 1, ( LastValue( H ) + 0.1 ) * 1.06, colorGreen, colorwhite, 0 );\r\n                    }\r\n\r\n    CondH = ( H == PvtHigh OR H == PrevHigh OR H == PPHigh ) AND ConIndex;\r\n\r\n    if( PvtIndex[1] == 0 )\r\n        CondH[BarCount - 1] = True;\r\n\r\n    CondLPP  = BarIndex() == BarCount - 1 AND PPCond;\r\n    CondLPvt = BarIndex() &gt;= BarCount - SwingIndex( ConIndex, PvtIndex[2] ) - 1 AND L == PvtLow;\r\n    CondLPrv = BarIndex() &gt;= BarCount - SwingIndex( ConIndex, PvtIndex[4] ) - 1 AND BarIndex() &lt;= BarCount - SwingIndex( ConIndex, PvtIndex[2] ) + 1 AND L == PrevLow AND NOT IsNull( PrevH );\r\n\r\n    CondL = CondLPP OR CondLPvt OR CondLPrv;\r\n\r\n    if( dispflag )\r\n    {\r\n        PlotShapes( IIf( CondH, shapeDownArrow, shapeNone ), colorGreen, 0, Graph0High, -20 );\r\n        PlotShapes( IIf( CondL, shapeUpArrow,   shapeNone ), colorGreen, 0, Graph0Low , -20 );\r\n\r\n        PlotShapes( IIf( BarIndex() == BarCount - 1 AND PPPvtVld == 1, shapeDownArrow, shapeNone ), colorOrange, 0, Graph0High , -40 );\r\n    }\r\n    \r\n    if( PBActive )\r\n    {\r\n\t\tPlotShapes( IIf( H == PvtHigh, shapeDownArrow, shapeNone ), colorBlue, 0, Graph0High, -20 );\r\n\t\tPlotShapes( IIf( L == LastValue(Ref( L, 0 )), shapeUpArrow, shapeNone ), colorBlue, 0, Graph0Low, -20 );\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n//////////////////////////////////\r\n// Price Dispersion code\r\n/*\r\n{\r\n    // calculate regression parameters for tuneable range\r\n    LRdays = 5;\r\n\r\n    // calculate middle of bar\r\n    PDID   = ( H - L ) / 2 + L;\r\n\r\n    PDInt  = LastValue( LinRegIntercept( PDID, LRdays ) );\r\n    PDSlp  = LastValue( LinRegSlope( PDID, LRdays ) );\r\n\r\n    // calculate regression line\r\n    PDx    = Cum( 1 );\r\n    PDline = PDSlp * ( PDx - ( LastValue( PDx - LRdays ) ) ) + PDInt;\r\n\r\n    // calculate the absolute value of the difference from the high and low to the regression line in percent\r\n    PDdH = abs( H - PDLine ) / PDLine;\r\n    PDdL = abs( L - PDLine ) / PDLine;\r\n\r\n    // calculate the dispersion (array-based)\r\n    PriceDisp = ( Sum( PDdH, LRdays ) + Sum( PDdL, LRdays ) ) / ( LRdays * 2 );\r\n\r\n    //plot dispersion line\r\n    PDLPlot = PDLine;\r\n    PDLPlot = IIf( BarIndex() &lt; BarCount - 5, Null, PDLPlot );\r\n\r\n    //Plot(PDLPlot, "Price Disperson Line", colorTeal, styleThick);\r\n\r\n}\r\n*/\r\n\r\n// plot ATH if close\r\nATH \t= LastValue( Highest( H ) );\r\nathline = LineArray( BarCount - 61, ATH, BarCount - 51, ATH );\r\n\r\nif( BarCount &gt; 52 AND LastValue( H ) &gt; ATH*.85 )\r\n{\r\n    Plot( athline, "ATH", colorPink, styleDashed );\r\n    PlotText( "ATH", BarCount - 61, ATH * 1.001, colorPink );\r\n}\r\n\r\n// plot 104 wk high if close\r\nHFWH \t= LastValue( HHV( H, 252*2 ) );\r\nftwhline = LineArray( BarCount - 51, HFWH, BarCount - 41, HFWH );\r\n\r\nif( BarCount &gt; 252*2 AND LastValue( H ) &gt; HFWH*.85 )\r\n{\r\n    Plot( ftwhline, "ATH", colorDarkTeal, styleDashed );\r\n    PlotText( "104 Wk-High", BarCount - 51, HFWH * 1.001, colorDarkTeal );\r\n}\r\n\r\n\r\n// plot 52 wk high if close\r\nFTWH \t= LastValue( HHV( H, 252 ) );\r\nftwhline = LineArray( BarCount - 41, FTWH, BarCount - 31, FTWH );\r\n\r\nif( BarCount &gt; 52 AND LastValue( H ) &gt; FTWH*.85 )\r\n{\r\n    Plot( ftwhline, "ATH", colorDarkYellow, styleDashed );\r\n    PlotText( "52 Wk-High", BarCount - 41, FTWH * 1.001, colorDarkYellow );\r\n}\r\n\r\n\r\n// fix chart to percentage\r\n// chart options\r\n\r\nHv\t= HighestVisibleValue( H );\r\n\r\nslideval = 1.03;\r\nymin = Hv * 0.60; \r\n\r\nymax = IIf( VldCSBase OR VldPPBase, LHSPrice * slideval, IIf( VldCapBase, Max( ( PvtHigh + 0.1 ) * slideval, Hv * slideval ), Hv * slideval ) );\r\nSetChartOptions( 1, chartShowArrows | chartShowDates, chartGridMiddle, ymin, ymax * 1.1 );\r\n//SetChartOptions(0);\r\n\r\n\r\n\r\n// LOW-LEVEL GRAPHICS OVERLAY CODE\r\nenable = 1;\r\n_SECTION_BEGIN( "Text spacing" );\r\n{\r\n    strt   \t\t\t= Param( "Info Field Bias", 50 );\r\n    inc\t   \t\t\t= Param( "Text Spacing", 22 );\r\n    left   \t\t\t= Param( "Left tab", 20 );\r\n    fontsize\t\t= Param( "Font Size", 47 );\r\n    infogapfield\t= Param( "Detailed Info Bias", 0 );\r\n\r\n}\r\n_SECTION_END();\r\n\r\n// in watchlist\r\n\r\nrowval = strt;\r\n\r\nListNum = CategoryFind( "Interesting Stocks", categoryWatchlist );\r\nGfxSetBkMode( 2 );\r\nGfxSetBkColor( colorWhite );\r\nGfxSelectFont( "Calibri", fontsize / 3, 1000, False, False, 0 );\r\nGfxSetTextColor( colorIndigo );\r\nWLstar = WriteIf( InWatchList( ListNum ), "*", "" );\r\nGfxTextOut( WLstar, left - 15, rowval + fontsize / 3 );\r\n\r\nListNum = CategoryFind( "Buy List", categoryWatchlist );\r\nGfxSelectFont( "Calibri", fontsize / 3, 1000, False, False, 0 );\r\nWLS = WriteIf( InWatchList( ListNum ), "S", "" );\r\nGfxTextOut( WLS, left - 15, rowval + fontsize * 0.80 );\r\n\r\nGfxSelectFont( "Calibri", fontsize / 3, 1000, False, False, 0 );\r\nWLS = WriteIf( IsFavorite(), "F", "" );\r\nGfxTextOut( WLS, left - 15, rowval + fontsize * 1.4 );\r\n\r\nGfxSelectFont( "Calibri", fontsize / 4, 1000, False, False, 0 );\r\nWLS = WriteIf( InWatchListName("weeklyDS"), "W", "" );\r\nGfxTextOut( WLS, left - 17, rowval + fontsize * 2\t );\r\n\r\n\r\n// Ticker\r\nGfxSelectFont( "Calibri", fontsize, 1000, False, False, 0 );\r\nthecolor = iif( ROC( C, 1 ) &gt; 0, colorGreen, colorRed );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( Tick, left, rowval );\r\nrowval += 3.5 * inc;\r\n\r\n// determine earnings dates\r\nih = InternetOpenURL( "https://cloud.iexapis.com/stable/stock/" + Tick + "/stats/nextEarningsDate" + "?token=" + "pk_52a6e86a06334512bce426aaf3f28dca" );\r\n\r\n// default assignment\r\nED = "N/A";\r\n\r\nif( ih AND NOT StrFind(Tick, "$"))\r\n{\r\n    str = InternetReadString( ih );\r\n\r\n    ED = StrMid( str, 1, 10 );\r\n}\r\n\r\nif (ih) InternetClose( ih );\r\n\r\nGfxSelectFont( "Calibri", fontsize / 4, 1000, False, False, 0 );\r\nGfxSetTextColor( colorBlack );\r\n\r\nGfxTextOut( GetFnData( "FullName" ), left, rowval );\r\nrowval += inc;\r\nGfxTextOut( "ED: " + ED, left, rowval );\r\nrowval += inc;\r\n\r\n// GICS and market\r\nGfxSetTextColor( colorViolet );\r\nGfxSelectFont( "Calibri", fontsize / 4, 1000, False, False, 0 );\r\n\r\n// get industry RS\r\nGID = GicsID( 0 );\r\nGID_RS = StaticVarGet( "GicsID_" + GID );\r\n\r\n//GfxTextOut( GicsID( 0 ), left, rowval );\r\n//rowval += inc/1.4;\r\nGfxTextOut( GicsID( 1 ), left, rowval );\r\nrowval += inc / 1.4;\r\nGfxTextOut( "GICS_RS = " + NumToStr( GID_RS, 3.0 ), left, rowval );\r\nrowval += inc / 1.4;\r\n\r\nx = MarketID( 1 );\r\nGfxTextOut( MarketID( 1 ), left, rowval );\r\n\r\n\r\n// RS\r\nrowval += inc;\r\nGfxSelectFont( "Calibri", fontsize / 3, 1000, False, False, 0 );\r\n\r\nRStext = WriteIf( IPO, "IPO", WriteIf( IsNull(RS), "N/A", NumToStr( RS, 1 ) ) );\r\nthecolor = iif( RS &gt; 89, colorGreen, IIf( StrMatch( RStext, "N/A" ), colorDarkYellow, colorRed ) );\r\n\r\nRS3 = StaticVarGet("RS3_" + Tick);\r\nRS3text = WriteIf( IPO, "", WriteIf( IsNull(RS3), "", "3mth: " + NumToStr( RS3, 1 ) ) );\r\nthecolor = iif( RS3 &gt; 89, colorGreen, IIf( StrMatch( RS3text, "" ), colorDarkYellow, colorRed ) );\r\n\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( "RS: " + RStext + "   " + RS3text, left, rowval );\r\nrowval += inc + infogapfield * 3;\r\n\r\n// FuelTank\r\nFTtext = WriteIf( BarCount &lt; 50, "IPO", NumToStr( FuelTank, 1 ) );\r\nthecolor = iif( FuelTank &gt; 0, colorGreen, IIf( StrMatch( FTtext, "N/A" ), colorDarkYellow, colorRed ) );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( "Fuel Tank: " + FTtext, left, rowval );\r\nrowval += inc + 10 + infogapfield * 3;\r\n\r\n\r\nif( dispflag ) // Ticker and VCP graphics code\r\n{\r\n    // detailed data\r\n\r\n    // start row value\r\n\r\n    GfxSelectFont( "Calibri", fontsize / 3, 1000, False, False, 0 );\r\n\r\n    // Trending data\r\n    Trend = WriteIf( LastValue( TF ), "Stage 2 Uptrend", "Not in Stage 2 Uptrend" );\r\n    thecolor = IIf( TF, colorGreen, colorRed );\r\n    GfxSetTextColor( thecolor[BarCount - 1] );\r\n    GfxTextOut( Trend, left, rowval );\r\n    rowval += inc;\r\n\r\n    // Base, contraction and pivot data\r\n    Base = WriteIf( VldCapBase, "Valid Cap Base", WriteIf( VldCSBase, "Valid CS Base", WriteIf( VldPPBase, "Valid PS Base", WriteIf( ValidConsolidation, "Valid Consolidation", "Invalid Base" ) ) ) );\r\n    thecolor = iif( StrMatch( "Valid CS Base", Base ) OR StrMatch( "Valid Cap Base", Base ) OR StrMatch( "Valid PS Base", Base ), colorGreen, IIf(StrMatch( "Valid Consolidation", Base ), colorBlue, colorRed ) );\r\n    GfxSetTextColor( thecolor[BarCount - 1] );\r\n    GfxTextOut( Base, left, rowval );\r\n    rowval += inc;\r\n\r\n    // Base len\r\n    if( VldCapBase OR VldCSBase OR VldPPBase )\r\n    {\r\n        thecolor = IIf(LHSBars &gt;= 25, colorGreen, IIf(LHSBars &gt; 20, colorDarkYellow, colorRed) );\r\n        GfxSetTextColor( thecolor );\r\n        GfxTextOut( "Base Length: " + NumToStr( LHSBars, 1.0 ) + " bars", left, rowval );\r\n        rowval += inc;\r\n    }\r\n\r\n    PvtGood = PvtH &lt; IIf( PPCond,  6.05, 4.05 );\r\n    PvtWide = PvtH &lt; IIf( PPCond, 10.05, 6.55 );\r\n\r\n    Pvt = WriteIf( PBActive, "Manual Pivot/Pullback", WriteIf(PPCond, "Valid Pause Pivot", WriteIf( PvtVld AND PvtGood, "Valid Classic Pivot", WriteIf( PvtVld AND PvtWide, "Valid Wide Pivot", WriteIf( PPPvtVld == 2, "Valid PS Pivot", WriteIf( PPPvtVld, "Possible Hourly PS Pivot", "Invalid Pivot" ) ) ) ) ) );\r\n    Pvt = WriteIf(custompivot, "Custom Pivot", Pvt);\r\n    Pvt = WriteIf( hourpivot &gt; 0, "Hourly PS Pivot", Pvt );\r\n\r\n    thecolor = IIf( StrMatch( Pvt, "Manual Pivot/Pullback" ), colorBlue, iif( StrMatch( "Valid Pause Pivot", Pvt ) OR StrMatch( "Valid Classic Pivot", Pvt ) OR StrMatch( "Valid PS Pivot", Pvt ) OR StrMatch( "Hourly PS Pivot", Pvt ), colorGreen, IIf( StrMatch("Valid Wide Pivot", Pvt ), colorDarkGreen, IIf( StrMatch( "Possible Hourly PS Pivot", Pvt ), colorOrange, colorRed ) ) ) );\r\n    thecolor = IIf(custompivot, colorBlue, thecolor);\r\n    GfxSetTextColor( thecolor[BarCount - 1] );\r\n    GfxTextOut( Pvt, left, rowval );\r\n    rowval += inc;\r\n\r\n    // pause pivot\r\n    if( PPCond AND( PvtVld OR PPPvtVld == 1 ) AND NOT( PPPvtVld = 1 AND hourpivot &gt; 0 ) AND NOT PBActive)\r\n    {\r\n        PvtStr = "Pause Pivot Con: "    + WriteIf( IsNull( PPH ), "N/A", NumToStr( PPH,  1.1 ) + "%" );\r\n        thecolor = iif( PPH &lt;= 8, colorGreen, IIf( PPPvtVld == 1, colorOrange, colorRed ) );\r\n        GfxSetTextColor( thecolor[BarCount - 1] );\r\n        GfxTextOut( PvtStr, left + 5, rowval );\r\n        rowval += inc;\r\n    }\r\n\r\n\t\r\n\tif( NOT PBActive )\r\n\t{\r\n\t\tPvtStr = "PvtCon: "    + WriteIf( IsNull( PvtH ), "N/A", NumToStr( PvtH,  1.1 ) + "%" );\r\n\t\r\n\t\tthecolor = IIf( PvtGood, colorGreen, IIf( PvtWide, colorDarkOliveGreen, IIf( PPPvtVld, colorOrange, IIf( PPCond, colorDarkYellow, colorRed ) ) ) );\r\n\r\n\t\tGfxSetTextColor( thecolor[BarCount - 1] );\r\n\t\tGfxTextOut( PvtStr, left + 5, rowval );\r\n\t\trowval += inc;\r\n\r\n\t\tPrvStr = "PrvCon: "    + WriteIf( IsNull( PrevH ), "N/A", NumToStr( PrevH, 1.1 ) + "%" );\r\n\t\tthecolor = iif( PPPvtVld &gt; 0 OR PrevH &lt;= 16, colorGreen, colorDarkYellow );\r\n\t\tGfxSetTextColor( thecolor[BarCount - 1] );\r\n\t\tGfxTextOut( PrvStr, left + 5, rowval );\r\n\t\trowval += inc;\r\n\r\n\t\tif( PPCond )\r\n\t\t\tOvlp  = Overlap( L, H, O, C, ConIndex, PvtIndex[0], PvtIndex[1], PvtIndex[2], PvtIndex[3] );\r\n\t\telse\r\n\t\t\tOvlp  = Overlap( L, H, O, C, ConIndex, PvtIndex[2], PvtIndex[3], PvtIndex[4], PvtIndex[5] );\r\n\t\r\n\t\tOvstr = "Overlap: " + WriteIf( IsNull( Ovlp ) OR( PvtH &lt;= 6.55 AND PrevH &lt;= 6.55 ), "N/A", NumToStr( ovlp,  1.1 ) + "%" );\r\n\r\n\t\tthecolor = iif( ( Ovlp &gt; 23.6 AND Ovlp &lt; 61.798 ) OR StrMatch( Ovstr, "Overlap: N/A" ), colorGreen, IIf( IsNull( Ovlp ), colorDarkYellow, colorRed ) );\r\n\t\tGfxSetTextColor( thecolor[BarCount - 1] );\r\n\t\tGfxTextOut( Ovstr, left + 5, rowval );\r\n\t\trowval += inc;\r\n\r\n\t\tthecolor = IIf( Depth &lt; 25, colorGreen, IIf( Depth &lt; 35, colorDarkYellow, colorRed ) );\r\n\t\tGfxSetTextColor( thecolor );\r\n\t}\r\n\r\n    if( NOT IsNull( Depth ) )\r\n    {\r\n        GfxTextOut( "Base Depth: " + NumToStr( Depth, 1.1 ) + "%", left + 5, rowval );\r\n        rowval += inc;\r\n    }\r\n\r\n    /*\r\n    VolDryUp = WriteIf(VolOK[0], "Volume Dry Up OK", "Volume Dry Up Not OK");\r\n    thecolor = iif(VolOK[0], colorLime, colorRed);\r\n    GfxSetTextColor(thecolor[BarCount-1]);\r\n    GfxTextOut(VolDryUp, 65, rowval);\r\n    rowval += inc;\r\n\r\n    VolAcc   = WriteIf(VolOK[1], "Volume Accumulation OK", "Volume Accumulation Not OK");\r\n    thecolor = iif(VolOK[1], colorLime, colorRed);\r\n    GfxSetTextColor(thecolor[BarCount-1]);\r\n    GfxTextOut(VolAcc, 65, rowval);\r\n    rowval += inc;\r\n\r\n    PDtext = NumToStr(PriceDisp*100, 1.1);\r\n    PDSlpt = NumToStr(PDSlp*100/LastValue(C), 1.1);\r\n    thecolor = iif(PriceDisp &lt;= 0.05, colorLime, colorRed);\r\n    GfxSetTextColor(thecolor[BarCount-1]);\r\n    GfxTextOut("Price Dispersion: " + PDtext + " %,  slope: " + PDSlpt + " %" , 65, rowval);\r\n    rowval += inc;\r\n    */\r\n\r\n\r\n}\r\n\r\n\r\n// dolvol\r\nrngdolvol = LastValue( BarsSince( IsNull( C ) ) ) - 1;\r\n\r\nif( rngdolvol &lt; 0 )\r\n    rngdolvol = 50;\r\n\r\ndolvol \t\t= C * MA( V, Min( 50, rngdolvol ) );\r\ndolvoltext \t= "DolVol: " + NumToStr( LastValue( dolvol ), 1.0 ) + " $";\r\nIPODVOK \t= ( BarCount &lt;= 12 * 21 AND LastValue( dolvol ) &gt;= 2.5e7 );\r\nClassicDVOK = LastValue( dolvol ) &gt;= 1e7;\r\nPPDVOK\t\t= LastValue( dolvol ) &gt;= 2.5e7 AND VldPPBase;\r\nthecolor \t= IIf( IPODVOK OR ClassicDVOK OR PPDVOK, colorGreen, colorRed );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( dolvoltext, left, rowval );\r\nrowval += inc;\r\n\r\n// float\r\nFloat   = GetFnData( "SharesFloat" );\r\nthecolor = iif( Float &lt; 3e7, colorGreen, colorDarkYellow );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( "Float: " + NumToStr( Float / 1e6, 1.1 ) + " Msh", left, rowval );\r\nrowval += inc;\r\n\r\n// ADR\r\nADR = 100 * ( MA( H / L, 20 ) - 1 );\r\nthecolor = iif( round( ADR * 10 ) / 10 &gt;= 3, colorGreen, colorDarkYellow );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( "ADR: " + NumToStr( ADR, 1.1 ), left, rowval );\r\nrowval += inc;\r\n\r\n// U/D ratio\r\nupday   = C &gt; Ref( C, -1 );\r\ndownday = NOT( upday );\r\nupvol   = Sum( upday*V,   50 );\r\ndownvol = Sum( downday*V, 50 );\r\nudratio = SafeDivide(upvol, downvol);\r\n\r\nthecolor = iif( udratio &gt;= 1.2, colorGreen, colorDarkYellow );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( "U/D Ratio: " + NumToStr( udratio, 1.1 ), left, rowval );\r\nrowval += inc;\r\n\r\n// TI65\r\nTI65 = MA( C, 7 ) / MA( C, 65 );\r\nthecolor = iif( TI65 &gt;= 1.1, colorGreen, colorDarkYellow );\r\nGfxSetTextColor( thecolor[BarCount - 1] );\r\nGfxTextOut( "TI65: " + NumToStr( TI65, 1.1 ), left, rowval );\r\nrowval += inc * 2;\r\n\r\n// IBD Ratings\r\n\r\nCR \t \t= StaticVarGetText( Tick + "_IBD_CR" );\r\nEPS  \t= StaticVarGetText( Tick + "_IBD_EPS" );\r\nRS   \t= StaticVarGetText( Tick + "_IBD_RS" );\r\nIGRS \t= StaticVarGetText( Tick + "_IBD_IGRS" );\r\nSMR  \t= StaticVarGetText( Tick + "_IBD_SMR" );\r\nAD   \t= StaticVarGetText( Tick + "_IBD_AD" );\r\nSPON \t= StaticVarGetText( Tick + "_IBD_SPON" );\r\nIGR \t= StaticVarGetText( Tick + "_IBD_IGR" );\r\nPTM \t= StaticVarGetText( Tick + "_IBD_PTM" );\r\nCYEPS \t= StaticVarGetText( Tick + "_IBD_CYEPS" );\r\nCQEPSE \t= StaticVarGetText( Tick + "_IBD_CQEPSE" );\r\nLQEPS \t= StaticVarGetText( Tick + "_IBD_LQEPS" );\r\nLQS \t= StaticVarGetText( Tick + "_IBD_LQS" );\r\n\r\n// numbers need conversion\r\nCRnum \t\t= StrToNum( StaticVarGetText( Tick + "_IBD_CR"\t\t));\r\nEPSnum\t\t= StrToNum( StaticVarGetText( Tick + "_IBD_EPS"\t\t));\r\nRSnum\t\t= StrToNum( StaticVarGetText( Tick + "_IBD_RS" \t\t));\r\nIGRnum\t\t= StrToNum( StaticVarGetText( Tick + "_IBD_IGR"\t\t));\r\nPTMnum \t\t= StrToNum( StaticVarGetText( Tick + "_IBD_PTM"\t\t));\r\nCYEPSnum\t= StrToNum( StaticVarGetText( Tick + "_IBD_CYEPS"\t));\r\nCQEPSEnum\t= StrToNum( StaticVarGetText( Tick + "_IBD_CQEPSE"\t));\r\nLQEPSnum\t= StrToNum( StaticVarGetText( Tick + "_IBD_LQEPS" \t));\r\nLQSnum\t\t= StrToNum( StaticVarGetText( Tick + "_IBD_LQS"\t\t));\r\n\r\nGfxSelectFont( "Calibri", fontsize / 4.5, 1000, False, False, 0 );\r\nGfxSetTextColor( colorBlack );\r\ncolval = 20;\r\ncb = 30;\r\n\r\nbias = 0.71;\r\ncb = 45;\r\nshift = 3;\r\n\r\nGfxSelectSolidBrush( colorWhite );\r\nGfxRectangle( colval - 10, rowval - 3, colval + cb * 6.0, rowval + cb * 1.9 );\r\nGfxPolyline( colval - 10, rowval + bias * 44, colval + cb * 6.0, rowval + bias * 44 );\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "CR", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(CRnum &gt;= 95, colorGreen, IIf(CRnum &gt;=90, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( CR, colval, rowval );\r\nrowval += inc * bias + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "LQE", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "CQE", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "YE", colval, rowval );\r\nrowval += inc * bias;\r\ncolval += cb;\r\nrowval -= inc * bias * 5 + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "EPS", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(EPSnum &gt;= 25, colorGreen, IIf(EPSnum &gt;= 20, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( EPS, colval, rowval );\r\nGfxSetBkColor( colorWhite );\r\nrowval += inc * bias + shift;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(LQEPSnum &gt;= 25, colorGreen, IIf(LQEPSnum &gt;= 20, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( LQEPS + "%", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(CQEPSEnum &gt;= 25, colorGreen, IIf(CQEPSEnum &gt;= 20, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( CQEPSE + "%", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(CYEPSnum &gt;= 25, colorGreen, IIf(CYEPSnum &gt;= 20, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( CYEPS + "%", colval, rowval );\r\nrowval += inc * bias;\r\ncolval += cb;\r\nrowval -= inc * bias * 5 + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "RS", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(RSnum &gt;= 90, colorGreen, IIf(RSnum &gt;= 80, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( RS, colval, rowval );\r\nrowval += inc * bias + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "Rnk", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "SPON", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "ROE", colval, rowval );\r\nrowval += inc * bias;\r\ncolval += cb;\r\nrowval -= inc * bias * 5 + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "IGRS", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( getGradeColor( IGRS ) );\r\nGfxTextOut( IGRS, colval, rowval );\r\nrowval += inc * bias + shift;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(IGRnum &lt;= 20, colorGreen, IIf(IGRnum &lt;= 40, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( IGR, colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( getGradeColor( SPON ) );\r\nGfxTextOut( " " + SPON, colval, rowval );\r\nrowval += inc * bias;\r\n\r\nROE = GetFnData( "ReturnOnEquity" );\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(ROE &gt;= 17, colorGreen, IIf(ROE &gt;= 12, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( NumToStr( ROE, 3.0 ) + "%", colval - 8, rowval );\r\nrowval += inc * bias;\r\ncolval += cb;\r\nrowval -= inc * bias * 5 + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "AD", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( getGradeColor( AD ) );\r\nGfxTextOut( AD, colval, rowval );\r\nrowval += inc * bias + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "LQS ", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "PTM ", colval, rowval );\r\ncolval += cb;\r\nrowval -= inc * bias * 3 + shift;\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxTextOut( "SMR", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( getGradeColor( SMR ) );\r\nGfxTextOut( SMR, colval, rowval );\r\nrowval += inc * bias + shift;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(LQSnum &gt;= 20, colorGreen, IIf(LQSnum &gt;= 15, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( LQS + "%", colval, rowval );\r\nrowval += inc * bias;\r\n\r\nGfxSetTextColor( colorWhite );\r\nGfxSetBkColor( IIf(PTMnum &gt;= 20, colorGreen, IIf(PTMnum &gt;= 15, colorDarkYellow, colorRed ) ) );\r\nGfxTextOut( PTM + "%", colval, rowval );\r\nrowval += inc * bias;\r\nrowval -= inc * bias * 4 + shift;\r\n\r\noldcolval = colval;\r\noldrowval = rowval;\r\n\r\nGfxSetTextColor( colorDefault );\r\nGfxSetBkColor(   colorWhite   );\r\n\r\n//watchlists\r\n\r\nrowval = 50;\r\ninc = inc / 1.2;\r\ncolval = 250;\r\nGfxSelectFont( "Calibri", fontsize / 4, 800, False, False, 0 );\r\nGfxSetTextColor( colorBlack );\r\n\r\nGfxTextOut( "Watchlists:", colval, rowval );\r\n\r\nrowval += inc;\r\n\r\nwlname = "DMT Choice";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxSelectFont( "Calibri", fontsize / 4, 700, False, False, 0 );\r\n    GfxSetBkColor( colorBlack );\r\n    GfxSetTextColor( colorGold );\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "rocketPower Select";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxSelectFont( "Calibri", fontsize / 4, 700, False, False, 0 );\r\n    GfxSetBkColor( colorBlack );\r\n    GfxSetTextColor( colorLime );\r\n    GfxTextOut( "@" + wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\n\r\nGfxSetBkColor( colorWhite );\r\nGfxSetTextColor( colorBlack );\r\nGfxSelectFont( "Calibri", fontsize / 4, 400, False, False, 0 );\r\n\r\n\r\nwlname = "DMT RS Accel";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "DMT Blue Dot";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD 50";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Big Cap 20";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Sector Leaders";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Stock Spotlight";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD IPO Leaders";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD New Highs";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD RS New Highs";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Global Leaders";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Rising Profits";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Stocks that Funds are Buying";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD CAN SLIM SELECT";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBD Your Weekly Review";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBDSS Top Dogs";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "IBDSS Crazy SEP";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "Cybersecurity and AI";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "DMT RGS Log";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\nwlname = "DMT EXCLUDE LIST";\r\nwlnum  = CategoryFind( wlname, categoryWatchlist );\r\n\r\nif( InWatchList( wlnum ) )\r\n{\r\n    GfxSetTextColor( colorRed );\r\n    GfxSelectFont( "Calibri", fontsize / 4, 800, False, False, 0 );\r\n\r\n    GfxTextOut( wlname, colval, rowval );\r\n    rowval += inc;\r\n}\r\n\r\n////// end disp\r\n\r\n// VCP Graphics\r\n// Using GetAsyncKeyState()\r\nnMM = 6; //Max no. of MM lines\r\n\r\nbi = BarIndex();\r\ndt = DateTime();\r\nt = 0;\r\npct = "";\r\nduration = "";\r\ntitel_new = "";\r\nMouseBtn = GetCursorMouseButtons();\r\nLeftJustClkd = MouseBtn &amp; 8;\r\nLeftClkDownRlsd = MouseBtn &amp; 9;\r\nMiddleClkd = MouseBtn &amp; 4;\r\nchartId = Tick + Interval();\r\n\r\nx = GetCursorXPosition( 0 );\r\ny = GetCursorYPosition( 0 );\r\n\r\nif( GetAsyncKeyState( 48 ) &lt; 0 OR GetAsyncKeyState( 96 ) &lt; 0 AND MiddleClkd )\r\n{\r\n    StaticVarRemove( "x1*" );\r\n    StaticVarRemove( "y1*" );\r\n    StaticVarRemove( "x2*" );\r\n    StaticVarRemove( "y2*" );\r\n    StaticVarRemove( "pct_t*" );\r\n}\r\n\r\nfor( i = 49; i &lt;= 48 + nMM; i++ )\r\n{\r\n    riMM = i - 48;\r\n    DigitPressed = GetAsyncKeyState( i ) &lt; 0 || GetAsyncKeyState( i + 48 ) &lt; 0;\r\n\r\n    if( DigitPressed )\r\n    {\r\n        // This elegant technique shared by @Milosz\r\n        if( LeftJustClkd )\r\n        {\r\n            StaticVarSet( "x1" + chartId + riMM, x, 0 );\r\n            StaticVarSet( "y1" + chartId + riMM, y, 0 );\r\n            StaticVarSet( "y1_start" + chartId + riMM, bi, 0 );\r\n\r\n        }\r\n\r\n        if( LeftClkDownRlsd )\r\n        {\r\n            StaticVarSet( "x2" + chartId + riMM, x, 0 );\r\n            StaticVarSet( "y2" + chartId + riMM, y, 0 );\r\n        }\r\n\r\n        if( MiddleClkd )\r\n        {\r\n            StaticVarRemove( "x1" + chartId + riMM );\r\n            StaticVarRemove( "y1" + chartId + riMM );\r\n            StaticVarRemove( "x2" + chartId + riMM );\r\n            StaticVarRemove( "y2" + chartId + riMM );\r\n            StaticVarRemove( "pct_t" + chartId + riMM );\r\n        }\r\n\r\n        RequestMouseMoveRefresh();\r\n    }\r\n}\r\n\r\nGfxSetBkMode( 1 );\r\nGfxSetCoordsMode( 1 ); // mode = 1 - bar / price mode where X is expressed in bar index and Y is expressed in price.\r\n\r\nfor( i = 1; i &lt;= nMM; i++ )\r\n{\r\n    x1 = Lookup( bi, StaticVarGet( "x1" + chartId + i ) );\r\n    y1 = StaticVarGet( "y1" + chartId + i );\r\n    x2 = Lookup( bi, StaticVarGet( "x2" + chartId + i ) );\r\n    y2 = StaticVarGet( "y2" + chartId + i );\r\n\r\n    if( x1 != 0 AND x2 != 0 )\r\n    {\r\n        t++;\r\n        GfxSelectPen( colorGrey50, 2, 1 );\r\n        GfxMoveTo( x1, y1 );\r\n        GfxLineTo( x2, y2 ); \t// Diagonal line\r\n\r\n        GfxSelectFont( "Courier New", fontsize / 4, 700 );\r\n        pct0 = NumToStr( abs( y2 / y1 - 1 ) * 100, 1.0, False );\r\n        pct1 = NumToStr( abs( y2 / y1 - 1 ) * 100, 1.1, False );\r\n        GfxTextOut( "   T" + NumToStr( i, 1.0 ) + ": " + pct1 , x1, y1 );\r\n        StaticVarSetText( "pct_t" + chartId + i, pct0, false );\r\n    }\r\n}\r\n\r\n// draw logos\r\nGfxSetZOrder( -1 );\r\n\r\npxw = Status( "pxwidth" );\r\npxh = Status( "pxheight" );\r\n\r\nGfxDrawImage( "C:\\\\Users\\\\admin\\\\OneDrive\\\\Michael\\\\Documents\\\\GitHub\\\\TPT\\\\dmt.png", pxw - 230, pxh - 240 );\r\n\r\nlogofilepathname = "C:\\\\Users\\\\admin\\\\OneDrive\\\\Desktop\\\\temp\\\\LOGO\\\\" + Tick + ".png";\r\nlogomissing = IsNull(fgetstatus(logofilepathname, 0,3));\r\n\r\nif ( NOT logomissing )\r\n\tGfxDrawImage( logofilepathname, 20, pxh - 160 );\r\n\r\n// draw Norgate logo\r\nGfxDrawImage( "C:\\\\Users\\\\admin\\\\OneDrive\\\\Desktop\\\\temp\\\\LOGO\\\\" + "norgate" + ".png", pxw-270, pxh - 50 );\r\n\r\nGfxSetZOrder(0);\r\n// draw earnings\r\nGfxDrawImage( "C:\\\\Users\\\\admin\\\\OneDrive\\\\Desktop\\\\temp\\\\earnings\\\\" + Tick + ".png", 10, oldrowval+84 );\r\n\r\n// summaries\r\n\r\nBS = NorgateBusinessSummary();\r\n//FS = NorgateFinancialSummary();\r\n\r\nGfxSelectFont( "calibri", 12 );\r\nGfxDrawText( BS, 775 -320, 50, 900, 1500, 16 );\r\n//GfxDrawText( FS, 1150-450, 660-600, 1450-500, 1500, 16 );\r\n\r\n\r\n_SECTION_END();\r\n\r\n\r\n_SECTION_BEGIN( "Pocket Pivot Detection" );\r\n\r\n// Pocket Pivot Definition\r\n\r\n//Buy volume must be larger than the sell volume of the last 10 days\r\n//Price has to be relatively close to the 10-day MA or 50 day (default 3% within the MA)\r\n\r\n//Adjustable Parameters\r\nPP  = ParamColor( "Pocket Pivot", colorLime );\r\ndetWidth = Param( "Width of Detection (% around 10day)", 3, 0.1, 10, 0.1 );\r\n\r\n//Logic for High Relative Volume\r\nUp = C &gt; Ref( H, -1 ) * 1.002;\t\t\t// changed so that the close has to be above the prev day high\r\nDown = C &lt; Ref( H, -1 ) * 0.998;\t\t// otherwise this will catch inside days as pocket pivots.\r\n// Using H instead of C will not be robust to squats\r\n\r\nVup \t= V * Up;\r\nVdown \t= V * Down;\r\nHighVol = HHV( Vdown, 10 );\r\nVolBO = V * Up &gt; HighVol;\r\n\r\n//Logic for Trading Range ten day\r\nPPMA10\t\t= MA( C, 10 );\r\nLowerPP10 \t= PPMA10 * ( 1 - detWidth / 100 );\r\nUpperPP10 \t= PPMA10 * ( 1 + detWidth / 100 );\r\nPPRange10 \t= H &gt; LowerPP10 AND H &lt; UpperPP10;\r\nPPRange10 \t= Ref( PPRange10, -1 ); // you care about the range of the setup, not the pivot, so look yesterday\r\n\r\n//Logic for Trading Range twenty day\r\nPPMA20\t\t= MA( C, 20 );\r\nLowerPP20 \t= PPMA20 * ( 1 - detWidth / 100 );\r\nUpperPP20 \t= PPMA20 * ( 1 + detWidth / 100 );\r\nPPRange20 \t= H &gt; LowerPP20 AND H &lt; UpperPP20;\r\nPPRange20\t= Ref( PPRange20, -1 ); // you care about the range of the setup, not the pivot, so look yesterday\r\n\r\n//Logic for Trading Range fifty day\r\nPPMA50\t\t= MA( C, 50 );\r\nLowerPP50 \t= PPMA50 * ( 1 - detWidth / 100 );\r\nUpperPP50 \t= PPMA50 * ( 1 + detWidth / 100 );\r\nPPRange50 \t= H &gt; LowerPP50 AND H &lt; UpperPP50;\r\nPPRange50\t= Ref( PPRange50, -1 ); // you care about the range of the setup, not the pivot, so look yesterday\r\n\r\n//Valid Pocket Pivot\r\nPocketPivot = Up AND VolBO AND( PPRange10 OR PPRange20 OR PPRange50 ) AND MA( C, 50 ) &gt; MA( C, 200 );\r\nPocketPivot = ExRem( pocketpivot, NOT pocketpivot ); // remove consecutive flags\r\n\r\n// remove erroneous PPs that are just uptrends\r\nNotPPJustUT = Ref( H == HHV( H, 10 ), -1 );\r\nPocketPivot = PocketPivot AND NOT( NotPPJustUT );\r\n\r\n//Color Bars\r\nPlotShapes( shapeSmallCircle * PocketPivot, PP, 0, L, -12, 0 );\r\n\r\nbi = BarIndex();\r\n\r\nfor( i = FirstVisibleValue( bi ); i &lt; LastVisibleValue( bi ); i++ )\r\n    if( PocketPivot[i] )\r\n        PlotText( "PP", i, L[i], PP, colorDefault, -30 );\r\n\r\n\r\n_SECTION_END();\r\n\r\n// display RGS results\r\nRO = fopen( "C:\\\\Users\\\\admin\\\\OneDrive\\\\Michael\\\\Documents\\\\GitHub\\\\TPT\\\\RGSOutput.csv", "r" );\r\n\r\nif( RO )\r\n{\r\n    lineitem = fgets( RO );\t// move to header position\r\n    incr = 50;\t\t\t\t// increment magnitude constant\r\n    incrbar = 0;\t\t\t// records per bar the number of indications on the chart so they don't overlap\r\n\r\n    while( ! feof( RO ) )\r\n    {\r\n        lineitem = fgets( RO );\t// next stock on list\r\n        RGSTick  = StrExtract( lineitem, 0 );\r\n\r\n        if( StrMatch( Tick, RGSTick ) )\r\n        {\r\n            // get buy date\r\n            cellstr = StrExtract( lineitem, 2 );\r\n            BuyDate = StrToDateTime( cellstr );\r\n\r\n            // get buy  price\r\n            cellstr = StrExtract( lineitem, 3 );\r\n            buypr \t= StrToNum( cellstr );\r\n\r\n            // get exit date\r\n            cellstr = StrExtract( lineitem, 4 );\r\n            SellDate = StrToDateTime( cellstr );\r\n\r\n            // get sell price\r\n            cellstr = StrExtract( lineitem, 5 );\r\n            sellpr \t= StrToNum( cellstr );\r\n\r\n            // get profit\r\n            cellstr = StrExtract( lineitem, 8 );\r\n            profitR = StrToNum( cellstr ) / 3;\r\n\r\n            // convert dates to bar and then to array of where it occurs\r\n            //bi = BarIndex();  // already defined in PP plotter, commented out here for efficiency\r\n            BuyBar\t= Lookup( bi, BuyDate );\r\n            SellBar = Lookup( bi, SellDate );\r\n            BuyBar\t= bi == BuyBar;\r\n            SellBar = bi == SellBar;\r\n\r\n            // plot buy arrow\r\n            PlotShapes( shapeDownArrow * BuyBar, colorDarkGreen, 0, H );\r\n            PlotShapes( shapeStar * BuyBar, colorDarkGreen, 0, buypr, 0, 0 );\r\n\r\n            // plot sale data only is trade is closed\r\n            TradeStatus = StrMatch( StrExtract( lineitem, 1 ), "Long" );\r\n\r\n            if( TradeStatus )\r\n            {\r\n                PlotShapes( shapeUpArrow * SellBar, colorDarkRed, 0, L );\r\n                PlotShapes( shapeStar * SellBar, colorDarkRed, 0, sellpr, 0, 0 );\r\n            }\r\n\r\n\r\n            for( i = FirstVisibleValue( bi ); i &lt;= LastVisibleValue( bi ); i++ )\r\n            {\r\n                if( BuyBar[i] )\r\n                    PlotText( "DMT\\nBUY", i - 1, H[i], colorDarkGreen, colorDefault, 60 );\r\n\r\n                // get status of trade (i.e. not open or "Long")\r\n                if( SellBar[i] AND StrMatch( StrExtract( lineitem, 1 ), "Long" ) )\r\n                {\r\n                    // create R profit str\r\n                    profitstr = NumToStr( profitR, 1.1 ) + "R";\r\n\r\n                    if( incrbar[i] &gt; 0 )\r\n                    {\r\n                        PlotText( "DMT\\nSELL\\n" + profitstr, i - 1, L[i], colorDarkRed, colorDefault, -50 - incr * incrbar[i] );\r\n                    }\r\n                    else\r\n                    {\r\n                        PlotText( "DMT\\nSELL\\n" + profitstr, i - 1, L[i], colorDarkRed, colorDefault, -50 );\r\n\r\n                        incrbar[i]++;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    } // end while\r\n\r\n    fclose( RO );\r\n} // end if\r\n\r\n// splits and dividends using norgate data\r\ndividenddate = GetFnData( "DividendPayDate" );\r\ndividendval  = GetFnData( "DividendPerShare" );\r\nsplitdate\t = GetFnData( "LastSplitDate" );\r\nsplitval\t = GetFnData( "LastSplitRatio" );\r\n\r\nDividendBar\t= Lookup( bi, dividenddate );\r\nDividendBar\t= bi == DividendBar;\r\nSplitBar\t= Lookup( bi, splitdate );\r\nSplitBar\t= bi == SplitBar;\r\n\r\nPlotShapes( IIf( DividendBar, shapeDownArrow, shapeNone ), colorDarkGrey, 0, HighestVisibleValue( H ) * 1.05, 0, 0 );\r\nPlotShapes( IIf( SplitBar,    shapeDownArrow, shapeNone ), colorDarkGrey, 0, HighestVisibleValue( H ) * 1.05, 0, 0 );\r\n\r\nfor( i = FirstVisibleValue( bi ); i &lt;= LastVisibleValue( bi ); i++ )\r\n{\r\n    if( DividendBar[i] )\r\n        PlotText( "D$" + NumToStr( dividendval, 0.2 ), i - 1, HighestVisibleValue( H ) * 1.03, colorDarkGreen, colorDefault, 60 );\r\n\r\n    if( SplitBar[i] )\r\n        if( splitval &lt; 1 )\r\n            PlotText( "S1:" + NumToStr( 1 / splitval, 0.0 ),    i - 1, HighestVisibleValue( H ) * 1.03, colorDarkGreen, colorDefault, 60 );\r\n        else\r\n            PlotText( "S" + NumToStr( splitval, 0.0 ) + ":1", i - 1, HighestVisibleValue( H ) * 1.03, colorDarkGreen, colorDefault, 60 );\r\n}\r\n\r\n/*\r\n// chart real time bar\r\n_SECTION_BEGIN( "Real-Time Bar" );\r\nplotRTbar = ParamToggle( "Show RT Bar", "Hide|Show", 0 );\r\n_SECTION_END();\r\n\r\nif( False ) // plotRTBar )\r\n{\r\n    URL = "https://api.iex.cloud/v1/data/core/quote/" + Tick + "?token=pk_52a6e86a06334512bce426aaf3f28dca";\r\n    ih = InternetOpenURL( URL );\r\n\r\n    if( ih )\r\n    {\r\n        str = InternetReadString( ih );\r\n\r\n        // find the closing price\r\n        numchar = StrFind( str, "latestPrice" );\r\n        str2 = StrRight( str, StrLen( str ) - numchar - 12 );\r\n        numchar = StrFind( str2, "," );\r\n        rtC = StrToNum( StrLeft( str2, numchar - 1 ) );\r\n\r\n        // find the high price\r\n        numchar = StrFind( str, "high" );\r\n        str2 = StrRight( str, StrLen( str ) - numchar - 5 );\r\n        numchar = StrFind( str2, "," );\r\n        rtH = StrToNum( StrLeft( str2, numchar - 1 ) );\r\n\r\n        // find the low price\r\n        numchar = StrFind( str, "low" );\r\n        str2 = StrRight( str, StrLen( str ) - numchar - 4 );\r\n        numchar = StrFind( str2, "," );\r\n        rtL = StrToNum( StrLeft( str2, numchar - 1 ) );\r\n\r\n        // find the open price\r\n        numchar = StrFind( str, "iexOpen" );\r\n        str2 = StrRight( str, StrLen( str ) - numchar - 8 );\r\n        numchar = StrFind( str2, "," );\r\n        rtO = StrToNum( StrLeft( str2, numchar - 1 ) );\r\n\r\n        GfxSetCoordsMode( 2 );\r\n        GfxSelectPen( IIf( rtC &gt; LastValue( C ), colorBlue, colorRed ), 3 );\r\n        GfxPolyline( 1490 - 5, rtO, 1490, rtO );\r\n        GfxPolyline( 1490 + 5, rtC, 1490, rtC );\r\n\r\n        if( rtL == 0 )\r\n        {\r\n            rtL = Min( rtC, rtO );\r\n            GfxSelectPen( colorGrey50, 3, 2 );\r\n        }\r\n\r\n        if( rtH == 0 )\r\n        {\r\n            rtH = Max( rtC, rtO );\r\n            GfxSelectPen( colorGrey50, 3, 2 );\r\n        }\r\n\r\n        GfxPolyline( 1490, rtL, 1490, rtH );\r\n        GfxSetCoordsMode( 0 );\r\n\r\n    }\r\n\r\n    InternetClose( ih );\r\n}\r\n\r\n*/\r\n\r\n// Manual Checklist\r\n// params\r\nGfxSetZOrder(0);\r\n\r\n// initial val constants\r\nxtitle_i \t= 310;\r\nycl_i\t\t= 590;\r\ntextlen\t\t= 415;\r\n\r\n// dynamic vals\r\nxtitle \t= xtitle_i;\t\t\t// left margin\r\nxcl    \t= xtitle + 5;\t// checklist item indent\r\nycl\t\t= ycl_i;\t\t\t// starting y position\r\nyincr\t= 18;\t\t\t// standard increment\r\n\r\n// button to display WL, will act globally\r\nShowCL = StaticVarGet( "ShowCL" );\r\n\r\n// activate pullback pivot\r\nCLID = 99;\r\n\r\nGUIText = WriteIf( ShowCL, "Hide CL", "Show CL" );\r\n\r\n//GuiButton( GUIText, CLID, xtitle, ycl-3, 65, 20, notifyClicked );\r\n\r\nif( GuiGetEvent( 0, 0 ) == CLID )\r\n{\r\n    if( ShowCL )\r\n    {\r\n        StaticVarSet( "ShowCL", False, True );\r\n    }\r\n    else\r\n    {\r\n        StaticVarSet( "ShowCL", True, True );\r\n    }\r\n}\r\n\r\n// function for retrieiving checklist text\r\nfunction getCLText(id)\r\n{\r\n\tswitch(id)\r\n\t{\r\n\t\t// Weekly Chart Bullishness\r\n\t\tcase 0: \r\n\t\t\tstr = "Uptrend before base is on rising volume, showing increased interest";\r\n\t\t\tbreak;\r\n\t\tcase 1: \r\n\t\t\tstr = "Uptrend before base respects the 10w SMA, showing tennis-ball action";\r\n\t\t\tbreak;\r\n\t\tcase 2: \r\n\t\t\tstr = "Uptrend before base shows institutional buying, i.e. blue skyscrapers";\r\n\t\t\tbreak;\r\n\t\tcase 3: \r\n\t\t\tstr = "Shows strength compared to QQQ line, e.g. correction resilient";\r\n\t\t\tbreak;\r\n\t\tcase 4: \r\n\t\t\tstr = "Stock chart does not look volatile";\r\n\t\t\tbreak;\r\n\t\tcase 5: \r\n\t\t\tstr = "Base count is 3 or less";\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t// Daily Chart Bullishness\r\n\t\tcase 6: \r\n\t\t\tstr = "RS Line New Highs within the base";\r\n\t\t\tbreak;\r\n\t\tcase 7: \r\n\t\t\tstr = "Base is mostly above 50d SMA";\r\n\t\t\tbreak;\r\n\t\tcase 8: \r\n\t\t\tstr = "Bullish-looking shakeouts within the base";\r\n\t\t\tbreak;\r\n\t\tcase 9: \r\n\t\t\tstr = "Previous uptrend respects the 20-day SMA";\r\n\t\t\tbreak;\r\n\t\tcase 10: \r\n\t\t\tstr = "Stock chart does not look volatile";\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t// Daily Chart Volume and Overhead Supply\r\n\t\t\tbreak;\r\n\t\tcase 11: \r\n\t\t\tstr = "Stock is near 52w high";\r\n\t\t\tbreak;\r\n\t\tcase 12: \r\n\t\t\tstr = "Stock is near 104w high or ATH";\r\n\t\t\tbreak;\r\n\t\tcase 13: \r\n\t\t\tstr = "Volume recedes in downtrends during base but rises on uptrends";\r\n\t\t\tbreak;\r\n\t\tcase 14: \r\n\t\t\tstr = "Price is now above 'the line' of most traffic in the base";\r\n\t\t\tbreak;\r\n\t\tcase 15: \r\n\t\t\tstr = "Uptrend before base shows institutional buying, i.e. blue skyscrapers";\r\n\t\t\tbreak;\r\n\t\t\r\n\t\t// MVP\r\n\t\tcase 16: \r\n\t\t\tstr = "Stock is up 12 out of 15 days in preceding uptrend";\r\n\t\t\tbreak;\r\n\t\tcase 17: \r\n\t\t\tstr = "Volume increases 25% in this 15-day period";\r\n\t\t\tbreak;\r\n\t\tcase 18: \r\n\t\t\tstr = "Stock is up 20% in this 15-day period";\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tstr = "invalid";\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\treturn str;\r\n}\r\n\r\n// function for retrieiving checklist text\r\nfunction getEnabler(id)\r\n{\r\n\tswitch(id)\r\n\t{\r\n\t\t// Weekly Chart Bullishness\r\n\t\tcase 0: \r\n\t\t\tstr = "&amp;1";\r\n\t\t\tbreak;\r\n\t\tcase 1: \r\n\t\t\tstr = "&amp;2";\r\n\t\t\tbreak;\r\n\t\tcase 2: \r\n\t\t\tstr = "&amp;3";\r\n\t\t\tbreak;\r\n\t\tcase 3: \r\n\t\t\tstr = "&amp;4";\r\n\t\t\tbreak;\r\n\t\tcase 4: \r\n\t\t\tstr = "&amp;5";\r\n\t\t\tbreak;\r\n\t\tcase 5: \r\n\t\t\tstr = "&amp;6";\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t// Daily Chart Bullishness\r\n\t\tcase 6: \r\n\t\t\tstr = "&amp;q";\r\n\t\t\tbreak;\r\n\t\tcase 7: \r\n\t\t\tstr = "&amp;w";\r\n\t\t\tbreak;\r\n\t\tcase 8: \r\n\t\t\tstr = "&amp;e";\r\n\t\t\tbreak;\r\n\t\tcase 9: \r\n\t\t\tstr = "&amp;r";\r\n\t\t\tbreak;\r\n\t\tcase 10: \r\n\t\t\tstr = "&amp;t";\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t// Daily Chart Volume and Overhead Supply\r\n\t\t\tbreak;\r\n\t\tcase 11: \r\n\t\t\tstr = "&amp;a";\r\n\t\t\tbreak;\r\n\t\tcase 12: \r\n\t\t\tstr = "&amp;s";\r\n\t\t\tbreak;\r\n\t\tcase 13: \r\n\t\t\tstr = "&amp;d";\r\n\t\t\tbreak;\r\n\t\tcase 14: \r\n\t\t\tstr = "&amp;f";\r\n\t\t\tbreak;\r\n\t\tcase 15: \r\n\t\t\tstr = "&amp;g";\r\n\t\t\tbreak;\r\n\t\t\r\n\t\t// MVP\r\n\t\tcase 16: \r\n\t\t\tstr = "";\r\n\t\t\tbreak;\r\n\t\tcase 17: \r\n\t\t\tstr = "";\r\n\t\t\tbreak;\r\n\t\tcase 18: \r\n\t\t\tstr = "";\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tstr = "invalid";\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\treturn str;\r\n}\r\n\r\n// display checklist\r\nif( ShowCL )\r\n{\r\n\t// clear CL button\r\n\tCLID = 98;\r\n\tGUIText = "Clear CL";\r\n\r\n\tGuiButton( GUIText, CLID, xtitle+textlen-80, ycl-3, 65, 20, notifyClicked );\r\n\tycl += yincr;\r\n\r\n\tClearCL = GuiGetEvent( 0, 0 ) == CLID;\r\n\r\n\t// draw background\r\n\tGfxSelectSolidBrush(colorLightYellow);\r\n\tGfxRoundRect(xtitle_i-5, ycl_i -4, xtitle+textlen, ycl_i + yincr * 24 +40, 20, 20 );\r\n\t\r\n\t// Title of checklist\r\n    GfxSetBkMode( 2 );\r\n    GfxSetBkColor( colorLightYellow );\r\n    GfxSelectFont( "Calibri", 12, 700 );\r\n    GfxTextOut( "DMT Checklist", xtitle, ycl );\r\n    ycl += yincr;\r\n\r\n    // retrieve and output score\r\n    CLScore = StaticVarGet(Tick + "CLScore");\r\n    if (IsNull(CLScore))\r\n\t\tCLScore = 0;\r\n\t\r\n\tScoreTot = 16;\r\n    GfxSetBkColor( colorLightYellow );\r\n    GfxSetTextColor( IIf(CLScore/ScoreTot &gt; 0.75, colorGreen, IIf(CLScore/ScoreTot &gt; 0.5, colorDarkYellow, colorRed ) ) );\r\n    GfxSetTextColor(ColorRGB( (1 - CLScore/ScoreTot)*255 , CLScore/ScoreTot*170, 20));\r\n    GfxTextOut( "Checklist Score = " + NumToStr( CLSCore/ScoreTot*100, 1.0 ) + "%", xcl, ycl+2 );\r\n    ycl += yincr + 5;\r\n    \r\n\t// checklist using checkbox controls\r\n    CL = 0;\t// initialize checklist array\r\n\r\n\t// populate checklist with checkboxes and subtitles\r\n    subtitles = 0;\t//init\r\n    GfxSetTextColor( colorBlack );\r\n    GfxSetBkColor( colorLightYellow );\r\n\t\r\n\t// retrieve CL array \r\n\tCLArray = StaticVarGet(Tick + "CLArray");\r\n\tif (LastValue(IsNull(CLArray)) OR ClearCL)\r\n\t\tCLArray = 0;\r\n\t\r\n\t\t\r\n\t// loop throught checklist populate it\r\n\tCLScore = 0;\r\n    for( i = 0; i &lt; 19; i++ )\r\n    {\r\n        // special code for outputting subtitles, should probably convert this to a loop/switch\r\n        //Subtitle of checklist\r\n        if( i == 0 )\r\n        {\r\n            GfxSelectFont( "Calibri", 11, 700 );\r\n            GfxTextOut( "Weekly Chart Bullishness", xtitle, ycl );\r\n            subtitles++;\r\n        }\r\n        else\r\n            if( i == 6 )\r\n            {\r\n                //Subtitle of checklist\r\n                GfxSelectFont( "Calibri", 11, 700 );\r\n                GfxTextOut( "Daily Chart Bullishness", xtitle, ycl + ( i + subtitles )*yincr );\r\n                subtitles++;\r\n            }\r\n            else\r\n                if( i == 11 )\r\n                {\r\n                    //Subtitle of checklist\r\n                    GfxSelectFont( "Calibri", 11, 700 );\r\n                    GfxTextOut( "Daily Chart Volume and Overhead Supply", xtitle, ycl + ( i + subtitles )*yincr );\r\n                    subtitles++;\r\n                }\r\n                else\r\n                    if( i == 16 )\r\n                    {\r\n                        //Subtitle of checklist\r\n                        GfxSelectFont( "Calibri", 11, 700 );\r\n                        GfxTextOut( "Auto MVP Calc (not part of Score)", xtitle, ycl + ( i + subtitles )*yincr );\r\n                        subtitles++;\r\n                    }\r\n\r\n        //Calculate checkbox gui id\r\n        CLid = 100 + i;\r\n\r\n        // define checkbox and enable\r\n        cbtext = getCLText( i );\r\n        yloc = ycl + ( i + subtitles )*yincr;\r\n        GuiButton( getEnabler(i), CLid, xcl-1, yloc, 16, 15, notifyClicked );\r\n        GfxSelectFont("Calibri", 10, 500);\r\n        GfxTextOut(cbtext, xcl + 20, yloc);\r\n        GuiEnable( CLid, True );\r\n        \r\n        // checklist status for printing (when generating DTP)\r\n        GfxSelectFont("Calibri", 10, 700);\r\n        GfxSetTextColor(IIf(CLArray[i], colorGreen, colorRed));\r\n        GfxTextOut(WriteIf(CLArray[i], "[Y]", "[N]"), xcl-1, yloc);\r\n        GfxSelectFont("Calibri", 10, 500);\r\n        GfxSetTextColor( colorBlack);\r\n        \r\n        // check stored value and update checklist\r\n        if ( GuiGetEvent(0, 0) == CLid)\r\n\t\t\tCLArray[i] = NOT CLArray[i];\r\n\t\t\t\r\n\t\tGuiSetColors( CLid, CLid, colorDefault, colorWhite, IIf(CLArray[i], colorLime, colorLightOrange ) );\r\n\t\tGuiSetText("M", CLid);\r\n\t\t\r\n\t\t// update CLScore don't count MVP\r\n\t\tif (i &lt; 16)\r\n\t\t\tCLScore += CLArray[i];\r\n    }\r\n    \r\n    \r\n    // automations\r\n    ValidBase = VldCSBase OR VldPPBase OR VldCapBase OR ValidConsolidation;\r\n    \r\n    volSMA\t\t= MA(V, 50);\r\n    \r\n    i = 0;\r\n    if (True)\r\n\t{\t\r\n\t\tstartcheck \t= BarCount - LHSBars-22;\r\n\t\tendcheck\t= BarCount - LHSBars;\r\n\r\n\t\tvolDelta\t= Ref(volSMA, -endcheck) - Ref(volSMA, -startcheck);\r\n\t}\r\n    \r\n    i = 1;\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 3;\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 4;\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 5;\t\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 6;\t\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 7;\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 8;\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\r\n\ti = 9;\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n    i = 10;\t\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 11;\t\r\n    if (True)\r\n\t{\t\r\n\t\t//CLArray[i] = False;\r\n\t}\r\n\t\r\n\ti = 16;\r\n\t\r\n\tif (LastValue(Sum(C&gt;Ref(C,-1), 15)) &gt;= 12)\r\n\t{\r\n\t\tCLArray[i] = True;\r\n\t}\r\n\tGuiSetText("A", 100 + i);\r\n\t\r\n\ti = 17;\r\n\tif (LastValue(volSMA/Ref(volSMA, -15)) &gt; 1.25)\r\n\t{\r\n\t\tCLArray[i] = True;\r\n\t}\r\n\tGuiSetText("A", 100 + i);\r\n\t\r\n\ti = 18;\r\n\tif (LastValue(H/Ref(L, -15)) &gt; 1.20)\r\n\t{\r\n\t\tCLArray[i] = True;\r\n\t}\r\n\tGuiSetText("A", 100 + i);\r\n\t\r\n    // save CL and score\r\n    StaticVarSet(Tick + "CLArray", CLArray, True);\r\n\tStaticVarSet(Tick + "CLScore", CLScore, True);\r\n}\r\n\r\nSetOption("GuiEnableKeyboard", True );\r\n</Formula>
			<FilePath>Formulas\\Custom\\Price 13_imported_imported_imported_imported_imported_imported_imported_imported_imported.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741834</MoreFlags>
			<Min>167.899</Min>
			<Max>317.05</Max>
		</Pane>
		<Pane>
			<ChartID>1035</ChartID>
			<PercentHeight>10</PercentHeight>
			<Formula>_SECTION_BEGIN("Volume");\r\n\r\nPlot( Volume, _DEFAULT_NAME(), IIf( C &gt;= Ref(C,-1), ParamColor("Up Color", colorBlue ), ParamColor("Down Color", colorRed ) ), ParamStyle( "Style", styleHistogram | styleThick, maskHistogram  ) );\r\n\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("VolMA");\r\nVolMA = MA(V, 50);\r\n\r\nPlot(VolMA, "Vol 50-day Avg", colorRed, styleThick);\r\n_SECTION_END();\r\n\r\nbias = 1.2;\r\nbi = BarIndex();\r\npoints = 0;\r\nfor( i = FirstVisibleValue( bi )+1; i &lt; LastVisibleValue( bi ); i++ )\r\n{\r\n\tif (C[i] &lt; C[i-1] AND V[i] &gt; VolMA[i] )\r\n\t\tif( C[i]-L[i] &gt; H[i]-C[i] )\r\n\t\t{\r\n\t\t\tPlotText( "S", i, HighestVisibleValue(V)*bias, colorGreen, colorDefault, -30 ); \r\n\t\t\tpoints++;\r\n\t\t}\r\n\t\telse if ( C[i]-L[i] &lt; H[i]-C[i] )\r\n\t\t{\r\n\t\t\tPlotText( "D", i, HighestVisibleValue(V)*bias, colorRed, colorDefault, -30 );\r\n\t\t\tpoints--;\r\n\t\t}\r\n\tif (C[i] &gt; C[i-1] AND V[i] &gt; VolMA[i] )\r\n\t\tif( C[i]-L[i] &gt; H[i]-C[i] )\r\n\t\t{\r\n\t\t\tPlotText( "A", i, HighestVisibleValue(V)*bias, colorBlue, colorDefault, -30 );\r\n\t\t\tpoints++;\r\n\t\t}\r\n\t\telse if ( C[i]-L[i] &lt; H[i]-C[i] )\r\n\t\t{\r\n\t\t\tPlotText( "D", i, HighestVisibleValue(V)*bias, colorRed, colorDefault, -30 );\r\n\t\t\tpoints--;\r\n\t\t}\r\n}\r\n\r\nGfxSetTextColor(IIf(points&gt;0, colorGreen, colorRed));\r\nGfxDrawText("Points = " + NumToStr(points, 1.0), 1775 , 0, 1900, 100);\r\n</Formula>
			<FilePath>Formulas\\Custom\\Volume (color) 21.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1342177285</MoreFlags>
			<Min>651699</Min>
			<Max>1.00805e+07</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 2</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>2</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("MACD");\r\nr1 = Param( "Fast avg", 12, 2, 200, 1 );\r\nr2 = Param( "Slow avg", 26, 2, 200, 1 );\r\nr3 = Param( "Signal avg", 9, 2, 200, 1 );\r\nPlot( ml = MACD(r1, r2), StrFormat(_SECTION_NAME()+"(%g,%g)", r1, r2), ParamColor("MACD color", colorRed ), ParamStyle("MACD style") );\r\nPlot( sl = Signal(r1,r2,r3), "Signal" + _PARAM_VALUES(), ParamColor("Signal color", colorBlue ), ParamStyle("Signal style") );\r\nPlot( ml-sl, "MACD Histogram", ParamColor("Histogram color", colorDefault ), styleNoTitle | ParamStyle("Histogram style", styleHistogram | styleNoLabel, maskHistogram ) );\r\n\r\nif( Status("action") == actionCommentary )\r\n{\r\nBuy=Cross( ml, sl );\r\nSell = Cross( sl, ml );\r\n\r\nprintf("\\nMACD Value: " + WriteVal( ml )+\r\n", Signal Line: " + WriteVal( sl ));\r\n\r\nprintf("\\n\\nThe MACD can provide buy/sell indications in three ways, signal line crossovers, overbought/oversold conditions, and divergences.\\n");\r\n\r\n\r\nprintf("\\n\\nCrossovers:\\n");\r\nprintf("\\nCurrently the MACD is "+\r\nWriteIf(MACD() &gt; Signal(),"bullish","bearish")+\r\n" since it is trading "+\r\nWriteIf(MACD() &gt; Signal(),"above","below")+\r\n" its signal line.");\r\n\r\n\r\nprintf("\\nThe MACD crossed "+\r\nWriteIf(MACD() &gt; Signal(),"above","below")+\r\n" its signal line "+\r\nWriteVal( Min( BarsSince( Cross( MACD(), Signal() )), BarsSince( Cross( Signal(), MACD()))), 0.0)+\r\n" period(s) ago.");\r\n\r\nbars=SelectedValue(Min( BarsSince( Cross( MACD(), Signal() )), BarsSince( Cross( Signal(), MACD())) ));\r\n\r\nprevclose=Ref(Close,-bars);\r\n\r\nprintf("\\nSince the MACD crossed its moving average, "+\r\nName()+"'s price has "+\r\nWriteIf(Close&gt;prevclose,"increased ","decreased ")+\r\nWriteVal(100*(Close-prevclose)/prevclose) + "%");\r\n\r\nprintf("\\nAnd has ranged from a high of "+\r\nWriteVal(HHV(High,bars+1),6.3)+\r\n" to a low of "+\r\nWriteVal(LLV(Low,bars+1),6.3));\r\n\r\nprintf("\\n\\nOverbought/Oversold:");\r\nOsc = OscP( 12, 26 );\r\nOsc1 = Ref( Osc, -1 );\r\nOsc5 = Ref( Osc, -5 );\r\n\r\nprintf("\\n"+WriteIf( Osc &lt;= -3 AND ( Osc - Osc5 ) == -Sum( abs( Osc - Osc1 ), 5 ),\r\n"The MACD is in an oversold range. Prices may continue to move lower for some time.  Wait for prices to move higher before considering any long positions.", \r\nWriteIf( Osc &gt;= 3 AND ( Osc - Osc5 ) ==  Sum( abs( Osc - Osc1 ), 5 ), \r\n"The MACD is in an overbought range.  Prices may continue to move higher for some time.  Wait for prices to move lower before considering any short positions.", \r\n"The MACD is not in an Overbought/Oversold range.")));\r\n\r\nprintf("\\n\\nDivergence:\\n");\r\ntemp = Trough(Low, 2, 1) &lt; 0.96 * Ref( Trough(Low, 2, 1), -1) AND ValueWhen( Trough(Low, 2, 1) != Ref( Trough(Low, 2, 1), -1 ), MACD(), 1 ) &gt;= 0.90 * ValueWhen( Trough( Low, 2, 1) != Ref( Trough( Low, 2, 1), -1 ), MACD(), 2 ) AND MACD() &lt; 0;\r\n\r\ntemp2= Peak(  High,2, 1) &gt; 1.04 * Ref( Peak( High, 2, 1), -1) AND ValueWhen( Peak( High, 2, 1) != Ref( Peak( High, 2, 1), -1 ), MACD(), 1 ) &lt;= 0.90 * ValueWhen( Peak(  High, 2, 1) != Ref( Peak(  High, 2, 1), -1 ), MACD(), 2 ) AND MACD() &gt; 0;\r\n\r\nprintf(WriteIf( HHV( temp, 5 ) == 1,"A bullish divergence occurred " + WriteVal( BarsSince( temp ), 1.0 ) + \r\n" period(s) ago. Wait for upward price movement for confirmation before considering any long positions.",\r\nWriteIf( HHV( temp2,5) == 1,\r\n"A bearish divergence occurred " +\r\nWriteVal( BarsSince( temp2 ), 1.0 ) +\r\n" period(s) ago.  Wait for downward price movement for confirmation before considering any short positions.",\r\n"There have been no divergence signals within the last 5 periods." ) ));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_MACD.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1342177281</MoreFlags>
			<Min>-5.0896</Min>
			<Max>17.8531</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 3</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>3</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("RSI");\r\nSetChartOptions(0,0,chartGrid30|chartGrid70);\r\nperiods = Param( "Periods", 15, 1, 200, 1 );\r\nPlot( vrsi = RSI( periods), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style")  );\r\n\r\nif( Status("action") == actionCommentary ) \r\n{\r\n\r\nBuy = Cross( vrsi, 30 );\r\nSell = Cross( 70, vrsi );\r\n\r\nprintf( "The current value for the RSI" + periods + " is " + WriteVal( vrsi ) );\r\n\r\nprintf("\\n\\nThe RSI, written by J. Welles Wilder in 1978, can be used in several different ways to analyze a chart.\\n");\r\n\r\nprintf("Tops and Bottoms:\\n\\n");\r\n\r\nprintf( \r\nWriteIf( vrsi &gt; 70, "The RSI is above 70.  This is where it usually tops.  The RSI usually forms tops and bottoms before the underlying security.",\r\nWriteIf( vrsi &lt; 30, "The RSI is below 30.  This is where it usually bottoms.  The RSI usually forms tops and bottoms before the underlying security.",\r\n"The RSI is not currently in a topping (above 70) or bottoming (below 30) range. " \r\n+ WriteIf( Cross( 70, vrsi ), "However, the RSI just crossed below 70 from a topping formation.  This is a bearish sign.",\r\nWriteIf( Cross( vrsi, 30 ), "However, the RSI just crossed above 30 from a bottoming formation.  This is a bullish sign.", "" ) ) ) ) ); \r\n\r\nbars30 = BarsSince( Buy );\r\nbars70 = BarsSince( Sell );\r\n\r\nprintf("\\n\\nBuy/Sell signals:");\r\nprintf("\\nA buy or sell signal is generated when the RSI moves out of an overbought/oversold area. \\nThe last signal was a "+\r\nWriteIf( bars30 &lt; bars70, "buy", WriteIf( bars30 &gt; bars70, "sell", "" ))+\r\nWriteVal( Min( bars30, bars70 ), 3.0 ) + " period(s) ago.");\r\n\r\nprintf("\\n\\nChart Formations:");\r\n\r\nprintf("\\nThe RSI often forms chart patterns (such as head and shoulders or rising wedges) and support/resistance levels that may or may not be visible on the price chart.  "+\r\n"Since the analysis of chart patterns/formations is subjective, the automatic interpretator cannot find them.  Please visually inspect the chart and look for such patterns.");\r\n\r\nprintf("\\n\\nFailure Swings (also known as support or resistance penetrations or breakouts):");\r\nprintf(\r\nWriteIf( vrsi &gt;= HHV( vrsi, 14 ), "The RSI has just reached its highest value in the last 14 period(s).  This is bullish.",\r\nWriteIf( vrsi &lt;= LLV( vrsi, 14 ), "The RSI has just reached its lowest value in the last 14 period(s).  This is bearish.",\r\n"The RSI does not currently show any Failure Swings." ) ) );\r\n\r\nprintf("\\n\\nDivergence:\\n");\r\nprintf(\r\nWriteIf( Close &gt;= HHV( Close, 14 ) AND vrsi &lt; HHV( vrsi, 14 ), \r\n"The security price has set a new 14-day high while the RSI has not.  This is a bearish divergence.",\r\nWriteIf( vrsi &gt;= HHV( vrsi, 14 ) AND Close &lt; HHV( Close, 14 ), \r\n"The RSI has set a new 14-day high while the security price has not.  This is a bullish divergence.",\r\nWriteIf( Close &lt;= LLV( Close, 14 ) AND vrsi &gt; LLV( vrsi, 14 ), \r\n"The security price has set a new 14-day low while the RSI has not.  This is a bullish divergence.",\r\nWriteIf( vrsi &lt;= LLV( vrsi, 14) AND Close &gt; LLV(Close,14), \r\n"The RSI has set a new 14-day low while the security price has not.  This is a bearish divergence.",\r\n"The RSI and price are not diverging." ) ) ) )); \r\n\r\nprintf("\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_RSI.afl</FilePath>
			<Flags>3072</Flags>
			<MoreFlags>1073741825</MoreFlags>
			<Min>31.7851</Min>
			<Max>83.3526</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 4</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>4</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("ROC");\r\nP = ParamField( "Price field" );\r\nperiods = Param("Periods", 15, 1, 200, 1 );\r\nPlot( ROC( P, periods), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style")  );\r\n\r\nif( Status("action") == actionCommentary )\r\n{\r\n printf("(Interpretation is not available yet)");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_ROC.afl</FilePath>
			<Flags>258</Flags>
			<MoreFlags>1342177281</MoreFlags>
			<Min>-21.696</Min>
			<Max>43.8414</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 5</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>5</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("Stochastic Slow");\r\nperiods = Param( "Periods", 15, 1, 200, 1 );\r\nKsmooth = Param( "%K avg", 3, 1, 200, 1 );\r\nPlot( StochK( periods , Ksmooth), "%K"+_PARAM_VALUES(), ParamColor( "%K color", colorCycle ), ParamStyle("%K style") );\r\nDsmooth = Param( "%D avg", 3, 1, 200, 1 );\r\nPlot( StochD( periods , Ksmooth, DSmooth ), "%D"+_PARAM_VALUES(), ParamColor( "%D color", colorCycle ), ParamStyle("%D style") );\r\n\r\nif( Status("action") == actionCommentary )\r\n{\r\n printf("(Interpretation is not available yet)");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Stochastic_Slow.afl</FilePath>
			<Flags>3072</Flags>
			<MoreFlags>1342177281</MoreFlags>
			<Min>-0.368742</Min>
			<Max>99.8359</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 6</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>6</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("Volume");\r\nPlot( Volume, _DEFAULT_NAME(), IIf( C &gt; O, ParamColor("Up Color", colorGreen ), ParamColor("Down Color", colorRed ) ), ParamStyle( "Style", styleHistogram | styleThick, maskHistogram  ) );\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Volume.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1342177281</MoreFlags>
			<Min>48442.2</Min>
			<Max>3.54237e+06</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 7</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>7</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("Ultimate");\r\nr1 = Param("Fast avg", 7, 2, 200, 1 );\r\nr2 = Param("Med avg", 14, 2, 200, 1 );\r\nr3 = Param("Slow avg", 28, 2, 200, 1 );\r\nPlot( Ultimate( r1, r2, r3 ), _DEFAULT_NAME(), ParamColor("Color", colorCycle ), ParamStyle("Style"));\r\n\r\nif( Status("action") == actionCommentary )\r\n{\r\n  printf( "(Interpretation is not available yet)" );\r\n}\r\n\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Ultimate.afl</FilePath>
			<Flags>19456</Flags>
			<MoreFlags>1342177281</MoreFlags>
			<Min>23.7472</Min>
			<Max>73.945</Max>
		</Pane>
	</Sheet>
	<Sheet>
		<Name>Sheet 8</Name>
		<Pane>
			<ChartID>1</ChartID>
			<PercentHeight>75</PercentHeight>
			<Formula>_SECTION_BEGIN("Price");\r\nSetChartOptions(0,chartShowArrows|chartShowDates);\r\n_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));\r\nPlot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 200, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Mid MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 45, 2, 300, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Long MA");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 100, 2, 400, 1 );\r\nPlot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleHidden | styleLine | styleNoLabel ) | styleNoRescale ); \r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("BBands");\r\nP = ParamField("Price field",-1);\r\nPeriods = Param("Periods", 15, 2, 100, 1 );\r\nWidth = Param("Width", 2, 0, 10, 0.05 );\r\nColor = ParamColor("Color", colorLightGrey );\r\nColor = ColorBlend( Color,  GetChartBkColor(), 0.5 );\r\nStyle = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;\r\nPlot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); \r\nPlot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); \r\nPlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );\r\n_SECTION_END();\r\n\r\n_SECTION_BEGIN("Price Interpretation");\r\nmovshort = ParamField("Short Time MA", 8 );\r\nmovmed = ParamField("Mid Time MA", 9 );\r\nmovlong = ParamField("Long Time MA", 10 );\r\nbtop = ParamField("BBTop", 11 );\r\nbbot = ParamField("BBBottom", 12 );\r\nif( Status("action") == actionCommentary )\r\n{\r\nwidth = btop - bbot;\r\nlslop = LinRegSlope( C, 30 ) + 100;\r\nlslo = LLV( lslop, 90 );\r\nlshi = HHV( lslop, 90 );\r\nlswidth = lshi - lslo;\r\ntrend = 100*( lslop - lslo )/lswidth;\r\n\r\nmawidth = MA( width, 100 );\r\nrelwidth = 100*(width - mawidth)/mawidth;\r\n\r\n_N( tname = Name()+"("+FullName()+")" );\r\n\r\nprintf("Price and moving averages:\\n");\r\nprintf( "%s", tname + " has closed " + WriteIf( C &gt; movshort, "above" , "below" ) + " its Short time moving average. ");\r\n\r\nprintf( "%s", "\\nShort time moving average is currently " + WriteIf( movshort &gt; movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort &gt; movlong, "above", "below" ) + " long time moving averages.");\r\n\r\nprintf( "%s", "\\nThe relationship between price and moving averages is: "+\r\nWriteIf( C &gt; movshort AND movshort &gt; movmed, "bullish",\r\nWriteIf( C &lt; movshort AND movshort &lt; movmed, "bearish", "neutral" ) ) + " in short-term, and "+\r\nWriteIf( movshort &gt; movmed AND movmed &gt; movlong , "bullish",\r\nWriteIf( movshort &lt; movmed AND movmed &lt; movlong, "bearish", "neutral" ) ) + " in mid-long term. ");\r\n\r\nprintf("\\n\\nBollinger Bands:\\n");\r\nprintf("%s", tname+ " has closed " + \r\nWriteIf( C &lt; bbot, "below the lower band by " +\r\nWriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &lt; 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &gt; btop, "above the upper band by " +\r\nWriteVal( 100 *( C- btop )/ width, 1.1 ) + "%. " +\r\nWriteIf( trend &gt; 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",\r\nWriteIf( trend &gt; 30 AND trend &lt; 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +\r\n\r\nWriteIf( C &lt; btop AND ( ( btop - C ) / width ) &lt; 0.5, \r\n"below upper band by " +\r\nWriteVal( 100 *( btop - C )/ width, 1.1 ) + "%. ", \r\nWriteIf( C &lt; btop AND C &gt; bbot , "above bottom band by " +\r\nWriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%. ", "" ) ));\r\n\r\nprintf("%s", "\\n"+\r\nWriteIf( ( trend &gt; 30 AND trend &lt; 70 AND ( C &gt; btop OR C &lt; bbot ) ) AND abs(relwidth) &gt; 40,\r\n\t\t "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",\r\n\t\t "Bollinger Bands are " )+\t  \r\nWriteVal( abs( relwidth ), 1.1 ) + "% " +\r\nWriteIf( relwidth &gt; 0, "wider" , "narrower" ) +\r\n" than normal.");\r\n\r\nprintf("\\n");\r\n\r\nprintf("%s",\r\nWriteIf( abs( relwidth ) &lt; 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+\r\nWriteIf( relwidth &lt; -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+\r\n"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+\r\nWriteIf( relwidth &gt; 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+\r\n"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));\r\n\r\nprintf("\\n\\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");\r\n}\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_Price.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1073741835</MoreFlags>
			<Min>139.412</Min>
			<Max>240.554</Max>
		</Pane>
		<Pane>
			<ChartID>8</ChartID>
			<PercentHeight>25</PercentHeight>
			<Formula>_SECTION_BEGIN("OBV");\r\n\r\nPlot( OBV(), _DEFAULT_NAME(), ParamColor("Color", colorCycle ), ParamStyle("Style")  );\r\n\r\nif( Status("action") == actionCommentary )\r\n{\r\nprintf("Interpretation is NOT available yet)");\r\nprintf("On Balance Volume is a running total of volume. It shows if volume is flowing into or out of a security.");\r\n}\r\n\r\n_SECTION_END();\r\n</Formula>
			<FilePath>Formulas\\Drag-drop\\_OBV.afl</FilePath>
			<Flags>256</Flags>
			<MoreFlags>1342177281</MoreFlags>
			<Min>3.43594e+07</Min>
			<Max>4.35623e+07</Max>
		</Pane>
	</Sheet>
	<Includes>
		<File>
			<Path>C:\\Users\\admin\\OneDrive\\Michael\\Documents\\GitHub\\TPT\\TPT_Func_Lib.afl</Path>
			<Formula>/* TPT Functions Library\r\nThis AFL contains the library of functions for the TPT Pivot Microstructure Software\r\nThis AFL should be included in any AFL using the functionality below\r\n*/\r\n\r\n/*  List of Functions\r\nSwingLow\r\nSwingHigh\r\nSwingIndex\r\nLowestLow\r\nHighestHigh\r\nHeight\r\nOverlap\r\ngetCSBaseParam\r\ngetCSCapBaseParam\r\ngetPPBaseParam\r\nisPausePivot\r\ngetContractionIndex\r\ngetMSPivotParam\r\ngenRS\r\nTrendFilter\r\ngetTurnLA\r\ngetPPPivotParam\r\ncheckVolume\r\n*/\r\n\r\n/* History\r\nDate Created:  2020-12-21\r\nDate Modified: 2021-03-20\r\n\r\nMod-Sums:\r\n----------\r\n\r\n2021-03-20 MAM:\r\n- Issue 71: PausePivot detection fixed for cap style conditions\r\n\r\n2021-03-13 MAM:\r\n- Issue 57: Changed contraction indexing to remove nuisance contraction high when lows are equal\r\n- Issue 54: Removed capability for pause pivots to be not in the last bar. Lowest low cannot return same bar SH/SL if not the last bar\r\n\r\n2021-03-06 MAM:\r\n- Issue 61: Fixed issue with contraction indexing not taking into account the High of Base as a contraction high\r\n- Issue 62: Fixed issue with contraction indexing missing an intermediate yet valid contraction\r\n\r\n2021-02-12 MAM: \r\n- Issue 39: Created checkVolume function \r\n\r\n2021-02-11 MAM:\r\n- TrendFilter is updated to use closing price and not 50 day average for dollar volume\r\n\r\n2021-02-08 MAM:\r\n- TrendFilter Updated dolvol values to 10 mil for non-IPO and 25 mil for IPO stocks\r\n- getMSPivotParam now doesn't consider previous contraction size. Only overlap is considered\r\n\r\n2021-02-06 MAM:\r\n- Updated getMSPivotParam to allow any size of previous contraction\r\n- getPPPivotParam updated to v1.1 of power squeeze rules\r\n  - Added that pivot in getPPPivotParam needs to be in upper 61.8% of flag \r\n  - Added volume as an input provision and pivot high for actual use\r\n- Updated getPPBaseParam for detection of flag and pole to detect power play and allows overshoot\r\n- updated getTurnLA to remove situation where initial parameters are not defined\r\n- removed min price from trendfilter since it is base dependent\r\n- set global min (8 mil) to dollarvolume as a check in trendfilter since there can be valid exceptions. Will flag in chart instead if invalid\r\n- Issue #49: fixed bug in getContractionIndex and getMSPivotParam for single contraction instances\r\n- Added function isPausePivot\r\n- Issue #47: fixed contraction index loop going past available contractions\r\n- Issue #50: Eliminated pivot detection when already broken out for classic and power squeeze\r\n\t- Muted any swing high lower than the last bar's high\r\n- fixed same day low of pivot in getMSPivotParam\r\n\r\n2021-01-31 MAM:\r\n- Overlap function now inputs a swing index, updated as well getMSPivotParam as a user function\r\n- Updated TurnLA to mute positive slope lines\r\n- Fixed Lowest Low to protect against 0-inputs into LLV function\r\n- removed ATR requirement from trendfilter\r\n\r\n2021-01-30 MAM:\r\n- Issue #32 fixed: Height function needs to take in a swingindex as input could be from various indexing functions\r\n  - No longer uses swinghigh function\r\n- Fixed lowestlow function indexing issue per issue #29\r\n\r\n2021-01-29 MAM:\r\n- Fixed pause pivot per issue #25\r\n\r\n2021-01-16 MAM:\r\n- LowestLow and HighestHigh now take a swingindex as an input. These allows custom swingindexes to be input\r\n\t- this impacted all user functions per the SW architecture to calculate their own generic or custom swing index, accordingly\r\n- Completely rewrote the getMSPivotParam to be more reliable and efficient using Russian doll search\r\n- LowestLow and all user functions must use open and close data since lowest low needs to evaluate same day contractions\r\n- getMSPivotParam: updated max previous contraction to 16%\r\n\r\n2021-01-10 MAM:\r\n- Updated getMSPivotParam to comment out 2-bar pivot for now since it is incorrect\r\n- Updated quality of detection of single bar contraction to take into account close vs open price\r\n- added getPPPivotParam to calculate alternate pivots for power squeezes\r\nTrendfilter:\r\n\t- loosened dolvol and ATR limits to catch marginal stock (will show red in the chart if strictly off, though)\r\n\t- fixed ATR calculation so that it is ATR % \r\n\r\n2021-01-08 MAM:\r\n- Updated getPPBaseParam to account for overshoot in the flag high relative to the pole high\r\n- Updated trendfilter so that ROC function used lowest price in the last 12 months, not just the exact price one year ago\r\n- Updated trendfilter to be robust to IPOs and per IPO scanning criteria on discord server\r\n- updated getCSBaseParam to allow 20 day bases for IPOs\r\n- added nth = null handling for LowestLow and HighestHigh\r\n- rewrote TurnLA so that it's no longer erroneous\r\n- updated genRS to improve percentile ranking code (0-99 instead of 0-100)\r\n\r\n2021-01-07 MAM:\r\n- Integrated Turn Line function into library\r\n- Created exception when last bar needs to be the lowest low of the pivot contraction\r\n  - impacts lowest low, swingindex and getMSPivotParam functions\r\n- Updated getMSPivotParam to deal with exceptions\r\n- Updated that close needs to be within fib number vs 4% of the pivot contraction high\r\n\r\n2021-01-06 MAM:\r\n- Updated getCSBaseParam baselen calculation\r\n- Improved speed of calculation of getCSCapBaseParam\r\n- Added TrendFilter function\r\n- Sped up getMSPivotParam by skipping prev con calculations if pvt con is already invalid\r\n\r\n2021-01-05 MAM:\r\n- Added 4% below pivot high rule that was missing\r\n- Rewrote getCSBaseParam using the new four step process from the following link:\r\n\thttps://discord.com/channels/776518652592652339/791719187823067227/791719686180962346\r\n- Fixed getCSCapBaseParam bugs\r\n- Updated getPPBaseParam to output info data, similar to other bases\r\n\r\n2021-01-03 MAM:\r\n- Created genRS function\r\n\r\n2021-01-02 MAM:\r\n- Removed use of getCSBaseParam from getMSPivotParam, no longer needed1\r\n- Update of getCSBaseParam to correct for omitting checking whether the price is above the base already\r\n- Created getCSCapBaseParam function for detecting cap pattern\r\n- fixed getCSBaseParam for possible out of bounds array read\r\n- fixed detection of base LHS in getCSBaseParam\r\n- removed further dependency of getMSPivotParam on getCSBaseParam\r\n- fixed error in condition of squiggle filter\r\n- added derived Power play detection function getPPBaseParam\r\n\r\n2021-01-01 MAM:\r\n- Removed redundant code from getMSPivotParam (no functional effect)\r\n- Fixed error where Lnth2 search gets behind Hnth2, now it gives up and continues the outer while loop\r\n- Derived requirement for quitting after full overlap by previous contraction over pivot now is only\r\n   enforced when the overlap rule is met or the previous contraction is not too large already\r\n- Fixed inequality to be less than or equal to, to prevent skipping the loop entirely\r\n- increased tolerance to 2 pct to include more marginal situations, added tolerance to overlap rules too\r\n- added tolerance to slip through previous contractions that are slightly smaller\r\n- updated SwingHigh to allow the high of the last bar to be equal to the middle bar\r\n- Fixed squiggle filter so it quits once overshoot is ok\r\n- removed volatility check from getCSBaseParam as this can be done anywhere easily\r\n\r\n2020-12-30 MAM:\r\n- Fixed possible negative indexing in getCSBaseParam and getMSPivotParam\r\n- Complete rewrite of previous contraction search while loop\r\n\r\n2020-12-29 MAM:\r\n- getMsPivotParam UpdateL\r\n  - Added additional selectable output for MS pivot param for prices of contractions\r\n  - Added additional selectable output for MS pivot param for prices in their actual location in array\r\n  - Fixed endless loop error in valid pivot search (TryCount counter)\r\n  - Fixed if condition in while loop to increment Lnth2\r\n  - VldPvtCon is now scalar\r\n  - Added a tunable tolerance to find marginal situations\r\n- Updated Height function to take in separate indices for high and low\r\n- Fixed bug in Lowest Low wher it wasn't catching lows that occur at swinghighs\r\n\r\n2020-12-28 MAM:\r\n- Continue work on isMSPivotValid\r\n- renamed isMSPivotValid to getMSPivotParam as it will return various params\r\n- Updated getCSBaseParam to output scalars for loop compatibility\r\n\r\n2020-12-24 MAM:\r\nAdded:\r\n - getCSBaseParam completed\r\n - isMSPivotValid started\r\n - updated overlap to take in four integers for more flexibility\r\n - Fixed LowestLow again due to similar bug, yesterday's fix didn't work\r\n\r\n2020-12-23 MAM:\r\nModified:\r\n - Renamed function PriceHeight to Height and output to HeightPct to be consistent\r\n - Overlap function completed\r\n - Fixed bug in LowestLow function where wrong low would be selected\r\n\r\n2020-12-22 MAM:\r\nModified:\r\n - SwingLow completed\r\n - SwingHigh completed\r\n - Height -&gt; PriceHeight change in name not to conflict with output name\r\n - Overlap\r\n\r\nAdded\r\n - LowestLow completed\r\n - HighestHigh completed\r\n - SwingIndex completed\r\n\r\n2020-12-21 MAM: Following functions added:\r\n - SwingLow completed\r\n - SwingHigh completed\r\n - Height\r\n - Overlap\r\n*/\r\n\r\n//------------ Function Code ------------//\r\n\r\n/* SwingLow Function\r\n\r\n\tPurpose:\r\n\tUsed to detect low swings in price. Helps with contraction detection\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput: \tLow price array of current ticker\r\n\tOutput: Binary array which flags bottom of each Swing High with TRUE, otherwise False\r\n*/\r\nfunction SwingLow( LL )\r\n{\r\n    // Tunable Parameters\r\n    HightoLowThresh = 0;\t// Positive-only percent value. Force a gap between first low to second low.\r\n    // Zero assumes anything lower than works\r\n    LowtoHighThresh = 0;\t// Positive-only percent value. Force a gap between second low to third low.\r\n    // Zero assumes anything greater than works\r\n\r\n    // Low bar ref points\r\n    FirstBar \t= Ref( LL, -2 );\r\n    SecondBar\t= Ref( LL, -1 );\r\n    ThirdBar\t= LL;\r\n\r\n    // Threshold gain calculations. Converts percentage thresholds to gain value\r\n    FTSGain = 1 + HightoLowThresh;\t// First To Second bar gain\r\n    STTGain = 1 + LowtoHighThresh;  // Second To Third bar gain\r\n\r\n    // Calculates detection of swing low as referenced in the last bar\r\n    SwingLowTrue = FirstBar &gt; SecondBar * FTSGain AND ThirdBar &gt; SecondBar * STTGain;\r\n\r\n    // Since swings lows are usually pointed out at the trough, shift detection to match this visualization\r\n    // Even if ref uses positive index, it's still causal as the intent is to only shift the detection to\r\n    // the right place\r\n    SwingLowInd = Ref( SwingLowTrue, 1 );\r\n\r\n    // Ensure last bar is false since it cannot possibly be a swing\r\n    SwingLowInd[BarCount - 1] = False;\r\n\r\n    // Return Statement\r\n    return SwingLowInd;\r\n}\r\n\r\n/* SwingHigh Function\r\n\r\n\tPurpose: Used to detect high swings in price. Helps with contraction detection\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput: High price array of current ticker\r\n\tOutput: Binary array which flags bottom of each Swing High with TRUE, otherwise False\r\n*/\r\nfunction SwingHigh( HH )\r\n{\r\n    // Tunable Parameters\r\n    LowtoHighThresh = 0;\t// Positive-only percent value. Force a gap between first high to second high.\r\n    // Zero assumes anything greater than works\r\n    HightoLowThresh = 0;\t// Positive-only percent value. Force a gap between second high to third high.\r\n    // Zero assumes anything lower than works\r\n\r\n    // Low bar ref points\r\n    FirstBar \t= Ref( HH, -2 );\r\n    SecondBar\t= Ref( HH, -1 );\r\n    ThirdBar\t= HH;\r\n\r\n    // Threshold gain calculations. Converts percentage thresholds to gain value\r\n    FTSGain = 1 + LowtoHighThresh;\t// First To Second bar gain\r\n    STTGain = 1 + HightoLowThresh;  // Second To Third bar gain\r\n\r\n    // Calculates detection of swing low as referenced in the last bar\r\n    SwingHighTrue = FirstBar * FTSGain &lt; SecondBar AND ThirdBar * STTGain &lt;= SecondBar;\r\n\r\n    // Since swings lows are usually pointed out at the trough, shift detection to match this visualization\r\n    // Even if ref uses positive index, it's still causal as the intent is to only shift the detection to\r\n    // the right place\r\n    SwingHighInd = Ref( SwingHighTrue, 1 );\r\n\r\n    // Ensure last bar is false since it cannot possibly be a swing\r\n    SwingHighInd[BarCount - 1] = False;\r\n\r\n    // Return Statement\r\n    return SwingHighInd;\r\n\r\n}\r\n\r\n/* SwingIndex Function\r\n\r\n\tPurpose:\r\n\tReturn the bars since the nth swing (high or low)\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput: \tSwingIndex, binary array which can be swinghighind or swinglowind or other similar index\r\n\t\t\tInteger for which contraction to check. 1 is most recent, 2 is 2nd most recent...\r\n\tOutput: Scalar Bars since N occurrence of a swing (high or low)\r\n*/\r\nfunction SwingIndex( SwingInd, nth )\r\n{\r\n    // Reference back nth swings, counting the bars while doing so\r\n\r\n    // Set the reference high reference to initial swinghigh index and low price array\r\n    IndRef = SwingInd;\r\n    count  = LastValue( BarsSince( IndRef ) );\r\n\r\n    // Loop to set arrays to nth swing, skip if nth = 0 or 1\r\n    for( i = 1; i &lt; nth; i++ )\r\n    {\r\n        // retrieve the number of bars since the last swing\r\n        refbar\t= LastValue( BarsSince( IndRef ) );\r\n        // shift the Swing reference accordingly\r\n        IndRef\t= Ref( IndRef,  -refBar - 1 );\r\n        // add the number of bars to the preceding swing\r\n        count  += LastValue( BarsSince( IndRef ) ) + 1;\r\n    }\r\n\r\n\t// special handling for low being last bar low\r\n\tif (nth == 0)\r\n\t\tBarsSinceSwing = 0;\r\n\telse\r\n\t\tBarsSinceSwing = count;\r\n\r\n    // return the accumulation of bars pointing to where the nth swing is\r\n    return BarsSinceSwing;\r\n}\r\n\r\n/* LowestLow Function\r\n\r\n\tPurpose: DetectLowest Low between SwingHighs\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput:\tLow price arracy, high price array, open price array, close price array\r\n\t\t\tSwing Index binary array\r\n\t\t\tInteger to return the lowest low of the nth swing high, 1 being the most recent\r\n\tOutput: Scalar Lowest Price\r\n*/\r\nfunction LowestLow( LL, HH, OO, CC, SwingIndex, nth )\r\n{\r\n    // Move reference so that we capture the nth lowest low of the nth swing high\r\n    // if nth = 1, skip the for loop since i is never less than nth\r\n\r\n    // Set the reference high reference to initial swinghigh index and low price array\r\n    SHRef\t= SwingIndex;  // now an input\r\n    LowRef \t= LL;\r\n\r\n    // Loop to set arrays to nth swing high to lowest low, skip if 0 or 1\r\n    \r\n    for (i = 1; i &lt; nth; i++)\r\n    {\r\n        // retrieve the number of bars since the last swinghigh\r\n        refbar\t= LastValue( BarsSince( SHRef ) );\r\n        // shift the Swinghigh reference accordingly\r\n        SHRef\t= Ref( SHRef,  -refBar );\r\n        // shift the low price reference accordingly\r\n        LowRef\t= Ref( LowRef, -refBar );\r\n        \r\n        // shift remaining price arrays\r\n        HH\t= Ref( HH, -refBar );\r\n        OO\t= Ref( OO, -refBar );\r\n        CC\t= Ref( CC, -refBar );\r\n\r\n        // Mute the nth+1 SwingHigh or the loop will get stuck\r\n        // the reason to mute instead of reference another bar back is that this last bar could be the low\r\n        SHRef[BarCount - 1] = False;\r\n    }\r\n\r\n    \r\n    // special handling if pivot low is the last bar\r\n    if (nth == 0)\r\n    {\r\n\t\tLLPrice = LastValue(LL);\r\n    }\r\n    else\r\n    {\r\n\t\t// Bars since last swing high on the reference bars\r\n\t\tSHBars  = LastValue( BarsSince( SHRef ) );\r\n\t\t// Lowest price since SHBars\r\n\t\tLLPrice = LastValue( LLV( LowRef, SHBars + 1) );\r\n\r\n\t\t// Handling for same day swing high and low\r\n\t\t// Barssince the lowest price\r\n\t\tLLBars  = LastValue( BarsSince( LowRef == LLPrice ) );\r\n\t\t\r\n\t\t// if same day swing high or swing low and not the last bar\r\n\t\tif (SHBars == LLBars AND LLBars &gt; 0)\r\n\t\t{\r\n\t\t\t// reduce period to one bar ahead\r\n\t\t\tSHBars--;\r\n\t\t\t// set actual new low price\r\n\t\t\tLLPrice = LastValue( LLV( LowRef, Max(1, SHBars) ) );\r\n\t\t}\r\n    }\r\n    \r\n    if (IsNull(nth)) \r\n\t\tLowestLowPrice = Null;\r\n\telse\r\n\t\tLowestLowPrice = LLPrice;\r\n\r\n    return LowestLowPrice;\r\n}\r\n\r\n/* HighestHigh Function\r\n\r\n\tPurpose: Return the high price of the nth swinghigh\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput:\thigh price array\r\n\t\t\tSwing Index binary array\r\n\t\t\tInteger to return the lowest low of the nth swing high, 1 being the most recent\r\n\tOutput: Scalar highest price\r\n*/\r\nfunction HighestHigh( HH, SwingIndex, nth )\r\n{\r\n    // Move reference so that we capture the nth highest high of the nth swing high\r\n    // if nth = 1, skip the for loop since i is never less than nth\r\n\r\n    // Set the reference high reference to initial swinghigh index and low price array\r\n    SHRef\t= SwingIndex; // now an input\r\n    HighRef\t= HH;\r\n\r\n    // Loop to set arrays to nth swing high to lowest low\r\n    for( i = 1; i &lt; nth; i++ )\r\n    {\r\n        // retrieve the number of bars since the last swinghigh\r\n        refbar\t= LastValue( BarsSince( SHRef ) );\r\n        // shift the Swinghigh reference accordingly\r\n        SHRef\t= Ref( SHRef,   -refBar - 1 );\r\n        // shift the low price reference accordingly\r\n        HighRef\t= Ref( HighRef, -refBar - 1 );\r\n    }\r\n\r\n    // Mute the nth+1 SwingHigh\r\n    SHRef[BarCount - 1] = False;\r\n\r\n    // Determine the period since the last swinghigh\r\n    HighestHighPeriod = IIf(nth == 0, 0, LastValue( BarsSince( SHRef ) ));\r\n\r\n    // Get the lowest price within the last swing high\r\n    HighestHighPrice  = HighRef[BarCount - HighestHighPeriod - 1];\r\n    \r\n    if (IsNull(nth)) \r\n\t\tHighestHighPrice = Null;\r\n\r\n    return HighestHighPrice;\r\n}\r\n\r\n/* Height Function\r\n\r\n\tPurpose:\r\n\tUsed to measure height from a high to low, which can be a candidate contraction.\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput: \tHigh Price, Low Price arrays, open price array, close price array\r\n\t\t\tSwingIndex, is usually the output of SwingHigh SwingLow ConIndex\r\n\t\t\tHnth, Lnth Integers for which contraction to check. 1 is most recent, 2 is 2nd most recent...\r\n\tOutput: Percent array giving percent change between low and previous high\r\n*/\r\nfunction Height( LL, HH, OO, CC, SH, Lnth, Hnth )\r\n{\r\n    // Calculate peak and trough from high to low\r\n    LowPrice  = LowestLow( LL, HH, OO, CC, SH, Lnth );\r\n    HighPrice = HighestHigh(   HH, SH, Hnth );\r\n\r\n\r\n    // Determine height in percent\r\n    HeightPct = -( LowPrice / HighPrice - 1 ) * 100;\r\n\r\n    return HeightPct;\r\n}\r\n\r\n/* Overlap Function\r\n\r\n\tPurpose:\r\n\tDetermine the amount of overlap the current contraction has vs the previous\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput:\tHigh Price, Low Price arrays, open price array, close price array\r\n\t\t\tLow and High binary indices. True if high or low is to be considered\r\n\t\t\tintegers Lnth1, Lnth2, Hnth1, Hnth2, which indicates which contractions to compare,\r\n\t\t\twhere 1 is the most recent, 2 is the 2nd most recent, etc.\r\n\tOutput: Overlap as a percentage of coverage of nth1 contraction compared to nth2\r\n*/\r\nfunction Overlap( LL, HH, OO, CC, SH, Lnth1, Hnth1, Lnth2, Hnth2 )\r\n{\t\r\n    // Get the high price of the nth1 contraction\r\n    HighPrice1st = HighestHigh( HH, SH, Hnth1 );\r\n\r\n    // Get the low price of the nth1 contraction\r\n    LowPrice1st  = LowestLow( LL, HH, OO, CC, SH, Lnth1 );\r\n\r\n    // Get the high price of the nth2 contraction\r\n    HighPrice2nd = HighestHigh( HH, SH, Hnth2 );\r\n\r\n    // Get the low price of the 2nd nth2 contraction\r\n    LowPrice2nd\t = LowestLow( LL, HH, OO, CC, SH, Lnth2 );\r\n\r\n    // encode the condition for over four situations:\r\n    // Cond 1 - nth1 low  &lt;  nth2 low\t= 1\r\n    // Cond 2 - nth1 low  &gt;= nth2 low\t= 2\r\n    // Cond 3 - nth1 high &lt;  nth2 high\t= 4\r\n    // Cond 4 - nth1 high &gt;= nth2 high\t= 8\r\n    // Cond 5 - nth1 low  &gt;  nth2 high  = 16\r\n    // Cond 6 - nth1 high &lt;  nth2 low   = 16\r\n\r\n    // Calculate the encoding\r\n    CondEncode = IIf( LowPrice1st &lt; LowPrice2nd, 1, 2 ) + IIf( HighPrice1st &lt; HighPrice2nd, 4, 8 );\r\n    // Override previous statement if no overlap at all\r\n    CondEncode = IIf( LowPrice1st &gt; HighPrice2nd OR HighPrice1st &lt; LowPrice2nd, 16, CondEncode );\r\n\r\n    // Calculate the overlap in percent given the encoding\r\n    switch( CondEncode )\r\n    {\r\n            // nth1 is within nth2 completely\r\n            // Encoding: Cond2 and Cond3 = 2 + 4 = 6\r\n        case 6:\r\n            OverlapPct = ( HighPrice1st - LowPrice1st ) / ( HighPrice2nd - LowPrice2nd ) * 100;\r\n            break;\r\n\r\n            // nth1 has lower low and lower high than nth2\r\n            // Encoding: Cond1 and Cond3 = 1 + 4 = 5\r\n            // Therefore the overlap is considered starting from the nth2 contraction low\r\n        case 5:\r\n            OverlapPct = ( HighPrice1st - LowPrice2nd ) / ( HighPrice2nd - LowPrice2nd ) * 100;\r\n            break;\r\n\r\n            // nth1 has a higher low and higher high than nth2\r\n            // Encoding: Cond2 and Cond4 = 2 + 8 = 10\r\n            // Therefore the overlap ends at the hight price of the nth2 contraction\r\n        case 10:\r\n            OverlapPct = ( HighPrice2nd - LowPrice1st ) / ( HighPrice2nd - LowPrice2nd ) * 100;\r\n            break;\r\n\r\n            // nth1 has a lower low and a higher than nth2\r\n            // Encoding: Cond1 and Cond4 = 1 + 8 = 9\r\n            // Therefore nth1 completely enveloped nth2 and overlap is always 100%\r\n        case 9:\r\n            OverlapPct = 100;\r\n            break;\r\n\r\n            // nth1 is completely above or below nth2\r\n            // Encoding: Cond5 or Cond6 = 16 or 32\r\n            // Always 0%\r\n        case 16:\r\n            OverlapPct = 0;\r\n            break;\r\n\r\n            // error case\r\n        default:\r\n            OverLapPct = -1;\r\n            break;\r\n    }\r\n\r\n    return OverlapPct;\r\n}\r\n\r\n/* getCSBaseParam Function\r\n\r\n\tPurpose:\r\n\tDetermine if the classic base is valid\r\n\t- Greater than 30 days within 6 months, less than 35% deep\r\n\t- ATR(30)/Price &lt; 6.5% as a volatility check\r\n\r\n\tCan also return other parameters of the base based on the "Info" input selection\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\tCSBase Four Step Process.png\r\n\r\n\tInput:\tHigh Price, Low Price arrays, open price array, close price array\r\n\t\t\tstring where depending on the input, gives a different output. See output section\r\n\r\n\tOutput:\r\n\t\t\tInfo = "Validity" \t-&gt; Scalar Boolean indicating true or false\r\n\t\t\tInfo = "LHSPrice" \t-&gt; Gives high price of left side of CS base\r\n\t\t\tInfo = "LHSBars"  \t-&gt; Gives bars since the LHS high of the CS base occurred\r\n\t\t\tInfo = "LowPrice" \t-&gt; Gives low price of CS base\r\n*/\r\nfunction getCSBaseParam( LL, HH, OO, CC, Info )\r\n{\r\n    // Assumption is average of 21 trading days per month or 126 days per 6 months.\r\n    // Round up to 130 days\r\n    // DERIVED REQT: Max base length is six months\r\n    SixMths = Min( 130, BarCount - 1 );\r\n\r\n    // Set min requirement parameters\r\n    BaseLenMin = 30;\t// days\r\n    BaseLenMin = IIf(BarCount - 1 == SixMths, 20, 30);\r\n    \r\n    BaseDepthMax \t= 35;   // percent from base low to base high\r\n    \r\n    SH = SwingHigh(HH);  // generic swinghigh index\r\n\r\n\t// Follow the four-step process for determining a classic squeeze base\r\n\t\r\n\t//// 1. Find the base highest high\r\n\t// initialize loop params\r\n\tBaseHH\t= 0;\r\n\ti \t\t= 1; // skip first swing since it obviously isn't the LHS of the base\r\n\tBHSince = 0;\r\n\tdo\r\n\t{\r\n\t\t// increment to the next highest high\r\n\t\ti++;\r\n\t\t\r\n\t\t// get highest high\r\n\t\tBaseHHCand  = HighestHigh(HH, SH, i);\r\n\t\t\r\n\t\t// get 'barssince' value of the candidate base high;\r\n\t\tBHSinceCand = SwingIndex(SH, i);\r\n\t\t\r\n\t\t// set new base high if it beats the old one\r\n\t\tif (BaseHHCand &gt; BaseHH)\r\n\t\t{\r\n\t\t\t// Set to new high candidate\r\n\t\t\tBaseHH \t= BaseHHCand;\r\n\t\t\t\r\n\t\t\t// Set barssince value of new base high\r\n\t\t\tBHSince = BHSinceCand;\r\n\t\t\t\r\n\t\t\t// set Hnth to new highest high index \r\n\t\t\tHnth\t= i;\r\n\t\t}\r\n\t\t\r\n\t}\t// loop while under the six mth limit\r\n\twhile (BHSinceCand &lt;= SixMths);\r\n\t\r\n\t//// 2. Find the lowest low after the highest high\r\n\t// initialize loop params\r\n\tBaseLL\t= 1e6;\t// artificially high number\r\n\ti \t\t= 0;\r\n\tBLSince = 0;\r\n\tdo\r\n\t{\r\n\t\t// increment to the next lowest low;\r\n\t\ti++;\r\n\t\t\r\n\t\t// get the lowest low\r\n\t\tBaseLLCand \t= LowestLow(LL, HH, OO, CC, SH, i);\r\n\t\t\r\n\t\t// get 'barssince' value of the candidate base low;\r\n\t\tBLSinceCand = SwingIndex(SH, i);\r\n\t\t\r\n\t\t// set new base low if it beats the old one\r\n\t\tif (BaseLLCand &lt; BaseLL AND BLSinceCand &lt; BHSince)\r\n\t\t{\r\n\t\t\t// Set to new high candidate\r\n\t\t\tBaseLL \t= BaseLLCand;\r\n\t\t\t\r\n\t\t\t// Set barssince value of new base high\r\n\t\t\tBLSince = BLSinceCand;\r\n\t\t\t\r\n\t\t\t// set Hnth to new highest high index \r\n\t\t\tLnth\t= i;\r\n\t\t}\r\n\t\t\r\n\t} // loop while ahead of the base high\r\n\twhile (BLSinceCand &lt; BHSince);\r\n\t\r\n\t//// 3. Draw a horizontal box to the left and right with a depth between the points in 1 &amp; 2\r\n\t// get binary array where the price high is greater than the base low and lower than the base high\r\n\tinRect = HH &gt;= BaseLL AND HH &lt;= BaseHH AND BarIndex() &gt; BarCount - SixMths;\r\n\t\t\r\n\t//// 4. Count how many days are within the box = BASE width\r\n\t// Get the number of bars between beginning and end of base\r\n\tBaseLen \t= LastValue(BarsSince(inRect == 0));\r\n\t\t\r\n\t//// Determine base validity\t\r\n\t// check if it meets the length requirements\r\n\t\r\n\t/// Disregard same day Base high/lows\r\n\t// overall length validity\r\n\tBaseLenOK \t= BaseLen &gt;= BaseLenMin;\r\n\t\r\n\t/// Check if the depth meets the requirements\r\n\tBaseDepth   = (1 - BaseLL/BaseHH)*100;\r\n\r\n\t// rule out this is not in fact just a deeper base\r\n\tBaseAbsLow = LastValue(LLV(LL, BaseLen));\r\n\t\r\n\t// overall depth validity\t\r\n\tBaseDepthOK = BaseDepth &lt; BaseDepthMax;\r\n\t\r\n\t// Check if broken out\r\n\tBrokenOut \t= LastValue(HH) &gt; BaseHH;\r\n\t\r\n\t// Overall Validity\r\n\tValidBase \t= BaseLenOK AND BaseDepthOK AND NOT BrokenOut;\r\n \r\n    // Return value based on Info input\r\n    switch( Info )\r\n    {\r\n        case "Validity":\r\n            output = ValidBase;\r\n            break;\r\n\r\n        case "LHSPrice":\r\n            output = BaseHH;\r\n            break;\r\n\r\n        case "LHSBars":\r\n            output = BaseLen;\r\n            break;\r\n\r\n        case "LowPrice":\r\n            output = BaseLL;\r\n            break;\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\n/* getCSCapBaseParam Function\r\n\r\n\tPurpose:\r\n\tDetermine if the Cap base is valid\r\n\t- Similar to determine getCSBaseParam, but allows a cap situation\r\n\r\n\tCan also return other parameters of the base based on the "Info" input selection\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput:\tHigh Price, Low Price arrays, open, close arrays\r\n\t\t\tstring where depending on the input, gives a different output. See output section\r\n\r\n\tOutput:\r\n\t\t\tInfo = "Validity" -&gt; Scalar Boolean indicating true or false\r\n\t\t\tInfo = "LHSPrice" -&gt; Gives high price of left side of Cap base\r\n\t\t\tInfo = "LHSBars"  -&gt; Gives bars since the LHS high of the Cap base occurred\r\n\t\t\tInfo = "LowPrice" -&gt; Gives low price of Cap base\r\n*/\r\nfunction getCSCapBaseParam( LL, HH, OO, CC, Info )\r\n{\r\n    //// Tunable parameters\r\n    // Cap time and depth limits\r\n    CapHeightLimPct\t\t= 15;\r\n    CapTimeLimMin\t\t= 10;\r\n    CapTimeLimMax\t\t= 20;\r\n    \r\n    // Max Baselen (see getCSBaseParam)\r\n    SixMths = 130;\r\n\r\n    //// Search for RHS of CS Base  \r\n    // rewinding of price arrays for calls to getCSBaseParam\r\n    LLRef = LL;\r\n    HHRef = HH;\r\n    CCRef = CC;\r\n    // init flag if base was found\r\n    CSBaseFound = False;\r\n    \r\n    // start search from cap high\r\n    i = LastValue(HHVBars(HH, CapTimeLimMax));\r\n\r\n    // start while loop\r\n    // NB if it exits right away, this is actually not a cap pattern but a normal CS Base\r\n    while( NOT CSBaseFound AND i &lt;= CapTimeLimMax )\r\n    {\r\n        //rewind by a day\r\n        LLRef = Ref( LL, -i );\r\n        HHRef = Ref( HH, -i );\r\n        OORef = Ref( OO, -i );\r\n        CCRef = Ref( CC, -i );\r\n\r\n        // check if a CS base is found\r\n        CSBaseFound = getCSBaseParam( LLRef, HHRef, OORef, CCRef, "Validity" );\r\n\r\n        i++;\r\n    } // end while\r\n\r\n    // determine cap validity\r\n    // Check cap length is within limits\r\n    CapLengthOK\t = i &gt;= CapTimeLimMin AND i &lt;= CapTimeLimMax;\r\n    \r\n    // derive the cap high\r\n    CapHigh\t\t = HHV( H, i );\r\n    \r\n    // determine estimate for base high without calling getCSBaseParam, which will slow things down\r\n    CapLow\t\t = HHV(Ref(H, -i), SixMths);    \r\n    \r\n    // determine cap height validity\r\n    CapHeightOK  = ( CapHigh / CapLow - 1 ) * 100 &lt; CapHeightLimPct;\r\n\r\n    // Determine overall cap validity\r\n    ValidBase = LastValue( CSBaseFound AND CapLengthOK AND CapHeightOK );\r\n\r\n\toutput = 0;\r\n    switch( Info )\r\n    {\r\n        case "Validity":\r\n            output = ValidBase;\r\n            break;\r\n\r\n        case "Values":\r\n\t\t\t// get CS Base LHS Price\r\n\t\t\tLHSPrice  \t= getCSBaseParam( LLRef, HHRef, OORef, CCRef, "LHSPrice" );\r\n            output[0] \t\t= LHSPrice;\r\n       \r\n\t\t\t// get CS base LHSBars\r\n\t\t    LHSBars  \t= getCSBaseParam( LLRef, HHRef, OORef, CCRef, "LHSBars" );\r\n\t\t\t// add length of cap to base length for length of entire pattern\r\n\t\t\tLHSBars     = LHSBars + i - 1;\r\n            output[1] = LHSBars;\r\n\r\n\t\t    //get CS Base Low Price\r\n\t\t    LowPrice \t= getCSBaseParam( LLRef, HHRef, OORef, CCRef, "LowPrice" );\r\n            output[2] = LowPrice;\r\n            \r\n            break;\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\n/* getPPBaseParam Function\r\n\r\n\tPurpose:\r\n\tDetermine if the power play base is valid\r\n\r\n\tCan also return other parameters of the base based on the "Info" input selection\r\n\r\n\tReferences:\r\n\tDERIVED FOR NOW\r\n\r\n\tInput:\tHigh Price, Low Price arrays.\r\n\t\t\tstring where depending on the input, gives a different output. See output section\r\n\r\n\tOutput:\r\n\t\t\tInfo = "Validity" -&gt; Scalar Boolean indicating true or false\r\n\t\t\tInfo = "PoleHigh" -&gt; Gives the pole high price\r\n\t\t\tInfo = "PHBar"    -&gt; Gives bars since pole high\r\n\t\t\tInfo = "FlagLow"  -&gt; Gives low price of flag\r\n\t\t\tInfo = "PoleLow"  -&gt; Gives low price of pole\r\n\t\t\tInfo = "PoleLen"  -&gt; gives pole length in bars\r\n*/\r\nfunction getPPBaseParam( LL, HH, Info )\r\n{\r\n    // Tunable Parameters\r\n    BaseLenMax \t\t\t= LLVBars(LL, 130);\r\n\r\n    PoleLowLenMax\t\t=  8 * 5;\t// 8 weeks\r\n    PoleHeightPctMin\t=    95;\t// 100% or more pole height\r\n\r\n    FlagDepthPctMax\t\t=  \t  25;\t// Flag depth is 25%\r\n    //FlagLenMax\t\t\t=\t  50;\t\r\n    FlagLenMin\t\t\t= \t   7;   // Flag length min is 7\r\n    \r\n    FlagOverShootMax\t=      5;\t// allow a flag overshoot of the pole of 5%\r\n\r\n\t// find PHBar and PoleHigh, keeping overshoot in mind\r\n\r\n\t//11 set params for loop\r\n\trefBars \t= 0;\r\n\tHHcheck \t= HH;\r\n\tLLcheck \t= LL;\r\n\tPHBarCount \t= 0;\r\n\tloopmax\t\t= 0;\r\n\tdo\r\n\t{\r\n\t\t// get candidate power play characteristics\r\n\t\tPoleHigh\t\t= HHV(HHcheck, BaseLenMax);\r\n\t\tPHBar\t\t\t= HHVBars( HHcheck, BaseLenMax ) +1;\r\n\t\tPoleLow\t\t\t= Ref( LLV(     LLcheck, PoleLowLenMax ), -PHBar );\r\n\t\tPoleLen\t\t\t= Ref( LLVBars( LLcheck, PoleLowLenMax ), -PHBar ) + 1;    \r\n\t\tPoleHeightPct\t= ( PoleHigh / PoleLow - 1 ) * 100;\r\n\t\t\r\n\t\t// if criteria not met, rewind by PHBars to see if there is another suitable high\r\n\t\tPPValidCand = LastValue(PoleLen &lt;= PoleLowLenMax AND PoleHeightPct &gt;= PoleHeightPctMin AND PHBar + PHBarCount &gt;= FlagLenMin);\r\n\t\tif (NOT PPValidCand)\r\n\t\t{\r\n\t\t\tHHcheck = Ref(HHcheck, -LastValue(PHBar));\r\n\t\t\tLLcheck = Ref(LLcheck, -LastValue(PHBar));\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tPHBarCount += PHBar;\r\n\t\tloopmax++;\r\n\t}\r\n\twhile (NOT PPValidCand AND loopmax &lt; 5);\r\n\t\r\n\t// sum PHBar to get total length1\r\n\tPHBar = PHBarCount;\r\n\t\r\n\tFlagLow \t\t= LLV( LL, PHBar );\r\n\tFlagDepthPct \t= ( 1 - FlagLow / PoleHigh ) * 100;\r\n\t\r\n\tFlagOvershoot\t= (HHV(HH, PHBar)/PoleHigh - 1) * 100;\r\n\r\n    // Detect HTF if Pole is &gt; 100% and flag is at least 5 bars long and flag % change is &lt; 25%\r\n    PPValid = PoleHeightPct &gt;= PoleHeightPctMin AND FlagDepthPct &lt;= FlagDepthPctMax AND PHBar &gt;= FlagLenMin AND FlagOvershoot &lt; FlagOverShootMax;\r\n\r\n    // return output based on Info request\r\n    switch( Info )\r\n    {\r\n        case "Validity":\r\n            output = LastValue(PPValid);\r\n            break;\r\n\r\n        case "PoleHigh":\r\n            output = LastValue(PoleHigh);\r\n            break;\r\n\r\n        case "PHBar":\r\n            output = LastValue(PHBar);\r\n            break;\r\n\r\n        case "FlagLow":\r\n            output = LastValue(FlagLow);\r\n            break;\r\n            \r\n        case "PoleLow":\r\n\t\t\toutput = LastValue(PoleLow);\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tcase "PoleLen":\r\n\t\t\toutput = LastValue(PoleLen);\r\n\t\t\tbreak;\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nfunction isPausePivot(LL, HH, OO, CC, SwingIndex)\r\n{\r\n    PivotHighPct\t\t= 61.798;\t\t\t\t// Pivot High Pct\r\n    \r\n\t// pause pivot detection\r\n\tPausePCond1 = LastValue(HH &gt; Ref(HH, -1));\t// last high &gt; yesterday high\r\n\tPausePCond2 = LastValue(CC &lt; OO);\t\t\t// red candle\r\n\t// check location of pause pivot relative to potential previous contraction\r\n\t// get low of potential pause pivot low\r\n\t// get low of potential pause pivot previous contraction low\r\n\tPP_PvtConLow  \t= LastValue(  LL);\r\n\tPP_PrevConLow \t= LowestLow(  LL, HH, OO, CC, SwingIndex, 1 );\r\n\tPP_PrevConHigh\t= HighestHigh(    HH, \t\t  SwingIndex, 1 );\r\n\t\r\n\t// Upper third rule\r\n\tPausePCond3\t\t= (PP_PvtConLow - PP_PrevConLow)/(PP_PrevConHigh - PP_PrevConLow)*100 &gt; (100 - PivotHighPct) OR LastValue(Sum(SwingIndex, BarCount-1)) &lt; 2;\r\n\t\r\n\t// check all conditions together\r\n\tPPCond \t\t\t= PausePCond1 AND PausePCond2 AND PausePCond3;\r\n\t\r\n\treturn PPCond;\r\n}\r\n\r\n/* getContractionIndex Function\r\n\r\n\tPurpose:\r\n\tReturns a swingindex that is filtered of nuisance swing highs so that it represents actual contractions\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput:\tHigh Price Array, Low Price Array, Open Price Array, Close Price Array\r\n\r\n\tOutput: SwingIndex (boolean array) representing contraction locations\r\n*/\r\nfunction getContractionIndex( LL, HH, OO, CC )\r\n{\r\n\r\n    // Tunable parameters\r\n    SixMths \t\t\t= 130;\t// Six month limit for previous contraction search (high value within)\r\n    PvtConOSMaxPct\t\t= 0;\r\n\r\n    // rough base data\r\n    HighOfBase\t= LastValue( HHV( HH, SixMths ) );\r\n    HOBBars\t\t= LastValue( HHVBars( HH, SixMths ) )+1;\r\n    LowofBase \t= LastValue( LLV( LL, HOBBars ) );\r\n    LOBBars\t\t= LastValue( LLVBars( LL, HOBBars ) );\r\n\r\n    // remove superfluous swinghighs\r\n    // First pass, remove the obvious ones, not taking lowest lows into account\r\n\r\n    // get preloop values\r\n    SH \t\t\t= SwingHigh( HH );\r\n    \r\n    PPCond\t\t= isPausePivot(LL, HH, OO, CC, SH);\r\n\r\n    for( i = 0; i &lt; BarCount - HOBBars - 1; i++ )\r\n        SH[i] = 0;\r\n        \r\n    LastHigh = LastValue(HH);\r\n    for( i = BarCount - HOBBars; i &lt; BarCount - 1; i++ )\r\n    {\r\n\t\tCurHigh = HH[i];\r\n        if (CurHigh &lt; LastHigh)\r\n\t\t\tSH[i] = 0;\r\n\t\t\t\r\n\t}\r\n\r\n    CurHigh \t= IIf(PPCond, LastValue(HH), HighestHigh( HH, SH, 1 ));\r\n    CurHighBS\t= IIf(PPCond, 0, SwingIndex(\tSH, 1 ));\r\n    // create the filtered output and index counter\r\n    SHfilt \t= SH;\r\n    nth = IIf(PPCond, 1, 2);\r\n\r\n    // loop\r\n    do\r\n    {\r\n        // get previous swinghigh\r\n        NewHigh \t= HighestHigh( HH, SH, nth );\r\n        NewHighBS\t= SwingIndex( SH, nth );\r\n\r\n        // if the new one is lower than the current, kill it, otherwise it's the new current high\r\n        if( CurHigh &gt; Newhigh * ( 1 + PvtConOSMaxPct / 100 ) ) // with overshoot allowance\r\n            SHfilt[BarCount - 1 - NewHighBS] = False;\r\n        else\r\n        {\r\n            CurHigh \t= NewHigh;\r\n            CurHighBS\t= NewHighBS;\r\n        }\r\n\r\n        nth++;\r\n\r\n    }\r\n    while( NewHighBS &lt; HOBBars );\r\n\r\n    //pass 2, remove swing highs taking into account lowest low locations\r\n    // get preloop values\r\n    // high data and low data\r\n    CurHigh \t= HighestHigh( HH, SHfilt, 1 );\r\n    CurHighBS\t= SwingIndex( SHfilt, 1 );\r\n    CurLow  \t= LowestLow( LL, HH, OO, CC, SHfilt, 1 );\r\n    // create index counter and 2nd pass SHfilt\r\n    nth = IIf(PPCond, 1, 2);\r\n    \r\n    SHfiltFinal = SHfilt;\r\n\r\n\t// loop\r\n    if( LastValue(Sum(SHfiltFinal, HOBBars)) &gt; 1  )  // skip if only one contraction exists\r\n    {\r\n        do\r\n        {\r\n            // get previous swinghigh and lowest low\r\n            NewHigh \t= HighestHigh( HH, SHfilt, nth );\r\n            NewHighBS\t= SwingIndex( SHfilt, nth );\r\n            NewLow  \t= LowestLow( LL, HH, OO, CC, SHfilt, nth );\r\n            NewLowBS    = LastValue(LLVBars(Ref(LL, -CurHighBS), NewHighBS) + CurHighBS);\r\n\r\n            // if the current low is lower, the algorithm is still climbing so the current high is not the contraction high\r\n            if( CurLow &lt;= NewLow OR NewLowBS == NewHighBS)\r\n            {\r\n                SHfiltFinal[BarCount - 1 - CurHighBS] = False;\r\n                //CurLow\t\t= LowestLow( LL, HH, OO, CC, SHfilt, nth - 1 ); // need to reset it to the new SHfilt\r\n            }\r\n            else\r\n            {\r\n                CurLow\t\t= LowestLow( LL, HH, OO, CC, SHfilt, nth ); // need to reset it to the new SHfilt\r\n            }\r\n\r\n            // set up next loop\r\n            CurHigh \t= NewHigh;\r\n            CurHighBS\t= NewHighBS;\r\n\r\n            nth++;\r\n        }\r\n        while( NewHighBS &lt; HOBBars AND nth &lt;= LastValue(Sum(SHfilt, BarCount)));\r\n    }\r\n\r\n    ConIndex = SHfiltFinal;\r\n\r\n    return ConIndex;\r\n}\r\n\r\n/* getMSPivotParam Function\r\n\r\n\tPurpose:\r\n\tDetermine if the pivot microstructure is correct and the pivot is valid\r\n\r\n\tReferences:\r\n\t1._CLASSIC_SQUEEZE_PIVOTS_FORMING_ABOVE_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pivot.pdf\r\n\r\n\tInput:\tHigh Price Array, Low Price Array, Open Price Array, Close Price Array\r\n\t\t\tInfo string which can equal "Validity" or "Index" or "Price" or "PriceIndex", where:\r\n\t\t\t\tValidity: \t\treturns scalar boolean with validity of the microstructure pivot\r\n\t\t\t\tSwingHighIndex: Returns the SwingHigh Index array of the selected swing high and lowest low of the\r\n\t\t\t\t\t\t\t\tpivot and previous contraction as [Lnth1 Hnth1 Lnth2 Hnth2 ...]\r\n\t\t\t\tPrice: \t\t\tReturns the prices of the selected swing high and lowest low of the\r\n\t\t\t\t\t\t\t\tpivot and previous contraction as [PvtConLow PvtConHigh PrevConLow PrevConHigh...]\r\n\t\t\t\tPriceIndex:\t\tReturns a price array which is zero except for when "Price" occurs". That is,\r\n\t\t\t\t\t\t\t\tif "Price" returns [9 12 10 11 ...], Price Index returns:\r\n\t\t\t\t\t\t\t\t[... 9 ... 12 ... 10 ... 11], where the ellipsis are a padded zeros given their\r\n\t\t\t\t\t\t\t\tdistance between each other.\r\n\t\t\t\t\t\t\t\tThis allows the user to know the location of the prices and the prices for\r\n\t\t\t\t\t\t\t\tfunctions such as plotting\r\n\r\n\t\t\t\t\t\t\t\tNote: all price arrays are size BarCount initialized at zero\r\n\r\n\tOutput: Boolean array indicating true or false\r\n*/\r\nfunction getMSPivotParam( LL, HH, OO, CC, Info )\r\n{\r\n    //// Tunable Parameters\r\n    TolPct\t\t \t\t= 1;\t\t\t\t\t// Set a tolerance to detect marginal conditions\r\n    PvtConSizeMaxPct \t= 6.5 \t + TolPct * 2;\t// Max Pivot Contraction Size\r\n    PvtConOSMaxPct\t\t= 2;\t\t\t\t\t// Max overshoot percent of pivot contraction vs previous\r\n    PrevConSizeMaxPct\t= 16  \t + TolPct * 2;\t// Max Previous Contraction Size\r\n    OverLapMinPct\t\t= 23.6 \t - TolPct * 5;\t// Overlap Min Pct\r\n    OverLapMaxPct\t\t= 61.798 + TolPct * 5;\t// Overlap Max Pct\r\n    PivotHighPct\t\t= 61.798;\t\t\t\t// Pivot High Pct\r\n    PPPrevConLmtPct\t\t= 10\t\t + TolPct * 2;  // Pivot Contraction size limit if there is a pause pivot\r\n    \r\n    // Default Params\r\n    Lnth0 = Null;\t// pause pivot, initially disabled\r\n    Hnth0 = Null;\t// pause pivot, initially disabled\r\n    Lnth1 = 1;\t\t// pivot contraction\r\n    Hnth1 = 1;\t\t// pivot contraction\r\n    Lnth2 = 2;\t\t// previous contraction\r\n    Hnth2 = 2;\t\t// previous contraction\r\n    \r\n\t// get contraction index\r\n\tConIndex = getContractionIndex( LL, HH, OO, CC );\r\n\t\r\n\t// check if previous contraction low is coincident with pivot contraction high\r\n\tPvtConLow\t\t= LowestLow( LL, HH, OO, CC, ConIndex, Lnth1);\r\n\tPvtConLowBars\t= LastValue(BarsSince(LL == PvtConLow));\r\n\tPrevConLow\t\t= LowestLow( LL, HH, OO, CC, ConIndex, Lnth2);\r\n\tPrevConLowBars\t= LastValue(BarsSince(Ref(LL, -PvtConLowBars) == PrevConLow)) + PvtConLowBars;\r\n\t\r\n\t// increment contraction indices if they are coincident\r\n\tif(PvtConLowBars == PrevConLowBars)\r\n\t{\r\n\t\tLnth1--;\r\n\t}\r\n\t\r\n\tPPCond = isPausePivot(LL, HH, OO, CC, ConIndex);\r\n\tif(PPCond)\r\n\t{\r\n\t\t// enable pause pivot\r\n\t\tLnth0 = 0;\r\n\t\tHnth0 = 0;\r\n\t}\r\n\t\telse if (LastValue(Sum(ConIndex, BarCount)) == 1)\r\n\t\t{\r\n\t\t\tLnth1 = 1;\r\n\t\t\tHnth1 = 1;\r\n\t\t\tLnth2 = Null;\r\n\t\t\tHnth2 = Null;\r\n\t\t\t\r\n\t\t\tif (PPCond)\r\n\t\t\t{\r\n\t\t\t\tLnth0 = 0;\r\n\t\t\t\tHnth0 = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n    \r\n    //// Pivot Contraction Validity\r\n    \r\n    PvtConHigh = HighestHigh(   HH, \t\tConIndex, Hnth1 );\r\n    PvtConLow  = LowestLow( LL, HH, OO, CC, ConIndex, Lnth1 );\r\n    // Measure candidate Pivot Contraction size and validity\r\n    PvtConSize\t\t= ( 1 - PvtConLow / PvtConHigh ) * 100;\r\n    PvtConSizeOK\t= PvtConSize &lt; PvtConSizeMaxPct;\r\n\r\n    // Make sure current bar high is &lt;= pivot high and the close is in the upper 61.978% of the previous upthrust\r\n    CurrBarOK = LastValue( H ) &lt;= PvtConHigh AND LastValue(C) &gt; (1-PivotHighPct/100)*PvtConHigh;\r\n\r\n    // Overall Pivot Contraction Validity\r\n    VldPvtCon = LastValue( PvtConSizeOK AND CurrBarOK );    \r\n    \r\n    // Previous Contraction Validity\r\n\tPrevConHigh = IIf(IsNull(Hnth2), Null, HighestHigh(   HH, \t\t ConIndex, Hnth2  ));\r\n\tPrevConLow  = IIf(IsNull(Lnth2), Null, LowestLow( LL, HH, OO, CC, ConIndex, Lnth2 ));\r\n\t\r\n    // check if pivot contraction high overshoots previous contraction by more than 2%\r\n\tPvtConOSOK\t\t= ( PvtConHigh / PrevConHigh - 1 ) * 100 &lt; PvtConOSMaxPct;\r\n    \r\n    // DERIVED REQT: Exclude undercuts of pivot contraction vs previous contraction\r\n\tPvtConLowOK \t= PvtConLow &gt;= PrevConLow;\r\n\t\r\n\t//// Pause Pivot Contraction Validity\r\n    \r\n    if (PPCond)\r\n    {\r\n\t\tPPConHigh = LastValue(HH);\r\n\t\tPPConLow  = LastValue(LL);\r\n\t\t// Measure candidate Pivot Contraction size and validity\r\n\t\tPPConSize\t\t= ( 1 - PPConLow / PPConHigh ) * 100;\r\n\t\tPPConSizeOK\t\t= PPConSize &lt; PvtConSizeMaxPct;\r\n    } \r\n    else\r\n\t\tPPConSizeOK\t\t= False;\r\n\t\t\r\n\t\t// check that pivot contraction is &lt; 10%\r\n\t\tPPPvtConSizeOK \t= PvtConSize &lt; PPPrevConLmtPct;\r\n\t\t\r\n\tVldPPCon = PPConSizeOK; // AND PPPvtConSizeOK;\r\n\t\r\n\t//// Previous Contraction Validity\r\n\t\r\n\t// Measure candidate Pivot Contraction size\r\n\tPrevConSize\t\t= ( 1 - PrevConLow / PrevConHigh ) * 100;\r\n\t// set to true since we only care about the relative size for previous contraction\r\n\tPrevConSizeOK\t= True; //PrevConSize &lt; PrevConSizeMaxPct;\r\n\r\n\t// Check if the previous contraction is bigger than the pivot contraction\r\n\tConSizeCmpOK = PvtConSize &lt;= PrevConSize;\r\n\t\r\n\tif (NOT ConSizeCmpOK)\r\n\t{\r\n\t\tLnth2 = Null;\r\n\t\tHnth2 = Null;\r\n\t}\r\n\t\r\n\t// Check Overlap\r\n\tif(PPCond)\r\n\t\tOverlapPct\t\t= Overlap( LL, HH, OO, CC, ConIndex, Lnth0, Hnth0, Lnth1, Hnth1);\r\n\telse\r\n\t\tOverlapPct\t\t= Overlap( LL, HH, OO, CC, ConIndex, Lnth1, Hnth1, Lnth2, Hnth2);\r\n\t\t\r\n\t// Check if it's possible to disregard if both contractions are less than PvtConSizeMaxPct\r\n\tDisregardRule \t= (PvtConSize &lt; PvtConSizeMaxPct AND PrevConSize &lt; PvtConSizeMaxPct) OR PPCond;\r\n\t// Check overall overlap conditions\r\n\tOverlapOK \t\t= ( OverlapPct &gt; OverLapMinPct AND OverlapPct &lt; OverLapMaxPct ) OR DisregardRule;\r\n\t\r\n\t// Check Pivot High Rule, i.e. location of the high of the pivot contraction vs prev contraction\r\n\tPHPct\t= ( PvtConHigh - PrevConLow ) / ( PrevConHigh - PrevConLow ) * 100;\r\n\t// Check if within tolerance or if the Disregard rule also applies here\r\n\tPHOK \t= PHPct &gt; ( 100 - PivotHighPct ) OR DisregardRule;\r\n    \r\n    // Check that all conditions for valid pivot are attained\r\n    VldPrevCon = PvtConOSOK + PvtConLowOK + PrevConSizeOK + ConSizeCmpOK + OverlapOK + PHOK &gt;= 6;\r\n    \r\n    // Consolidate all detections\r\n    VldMSPivot = ((VldPPCon AND VldPvtCon) OR (VldPvtCon AND VldPrevCon)) AND LastValue(HH) &lt;= PvtConHigh;\r\n    \r\n    // Return value based on Info input\r\n    \r\n    output[0] = Null; // default if no pause pivot\r\n    output[1] = Null; // default if no pause pivot\r\n    \r\n    switch( Info )\r\n    {\r\n        case "Validity":\r\n            // output is there is a valid pivot\r\n            output = VldMSPivot;\r\n            break;\r\n\r\n        case "SwingHighIndex":\r\n            // output array of indices for the pivot\r\n            output[0] = Lnth0;\r\n            output[1] = Hnth0;\r\n            output[2] = Lnth1;\r\n            output[3] = Hnth1;\r\n            output[4] = Lnth2;\r\n            output[5] = Hnth2;\r\n            break;\r\n\r\n        case "Price":\r\n            // output array of contraction high/low prices\r\n            if(PPCond)\r\n\t\t\t{\toutput[0] = PPConLow;\r\n\t\t\t\toutput[1] = PPConHigh;\r\n\t\t\t}\r\n            output[2] = PvtConLow;\r\n            output[3] = PvtConHigh;\r\n            output[4] = PrevConLow;\r\n            output[5] = PrevConHigh;\r\n            break;\r\n\r\n        case "PriceIndex":\r\n            // output array of contraction high/low prices\r\n            // Pivot Contraction Bars\r\n            PvtConLBar \t= BarCount - 1 - LastValue( BarsSince( LL == PvtConLow ) );\r\n            PvtConHBar \t= BarCount - 1 - SwingIndex( SwingHigh( HH ),   Hnth1 );\r\n\r\n            // Previous contraction Bars\r\n            PrevConLBar = BarCount - 1 - LastValue( BarsSince( LL == PrevConLow ) );\r\n            PrevConHBar\t= BarCount - 1 - SwingIndex( SwingHigh( HH ),   Hnth2 );\r\n\r\n            output[PvtConLBar ]\t= PvtConLow;\r\n            output[PvtConHBar ]\t= PvtConHigh;\r\n            output[PrevConLBar] = PrevConLow;\r\n            output[PrevConHBar] = PrevConHigh;\r\n            \r\n            if (PPCond)\r\n            {\r\n\t\t\t\toutput[BarCount-1] \t= PPConHigh;\r\n\t\t\t\toutput[0]\t\t\t= PPConLow;\r\n            }\r\n            \r\n            break;\r\n    } // end switch\r\n    \r\n    return output;\r\n}\r\n\r\n/* genRS Function\r\n\r\n\tPurpose: Generate the IBD style relative strength\r\n\r\n\tReferences:\r\n\thttps://forum.amibroker.com/t/how-to-imitate-ibd-relative-strength-percentile-ranking-of-stocks/\r\n\tAuthor: Michael Angelo MUSTILLO (rocketPower)\r\n\r\n\tInput:\tN/A, it will use Amibroker market lists for NYSE and NASDAQ\r\n\tOutput: Function has no output but will store static variables with the following naming structure:\r\n\t\t\tRS_&lt;Ticker&gt;, e.g. RS_GOOG, with a data format of a percentile value from 0-99\r\n*/\r\nfunction genRS(ThreeMth, prefix)\r\n{\r\n    // Default value for average days in three months of trading\r\n    //ThreeMth = 63;\r\n\r\n    // Collect symbols from all markets\r\n    listNYSE = CategoryGetSymbols( categoryMarket, 1 );\t// NYSE\r\n    listNSDQ = CategoryGetSymbols( categoryMarket, 2 );\t// NASDAQ\r\n    listARCA = CategoryGetSymbols( categoryMarket, 3 );\t// NYSE ARCA\r\n    listNYAM = CategoryGetSymbols( categoryMarket, 4 );\t// NYSE American\r\n    listCBZX = CategoryGetSymbols( categoryMarket, 5 );\t// CBOE BZX\r\n\r\n    // Create the full list of stocks to be ranked as a concatenated string CSV of both markets\r\n    List    = listNYSE + "," + listNSDQ + "," + listARCA + "," + listNYAM + "," + listCBZX;\r\n    ListQty = StrCount( List, "," ) + 1;\r\n\r\n    // Clear the static vars from last run\r\n    //StaticVarRemove( "*" );\r\n\r\n    // Generate the raw RS score for every stock and store in a static var\r\n    for( n = 0; ( Symbol = StrExtract( List, n ) ) != "";  n++ )\r\n    {\r\n        // Set price arrays to current symbol in the loop\r\n        SetForeign( Symbol );\r\n\r\n\r\n\t\t// Calculate Raw RS and filter out cheap or illiquid stocks\r\n        if( LastValue(C) &lt; 5 )\r\n        {\r\n            // Don't consider in percentile ranking\r\n            ListQty--;\r\n        }\r\n        else\r\n            if( BarCount &gt; ThreeMth * 4 )\r\n            {\r\n                x1 = ROC( C, ThreeMth * 1 );\r\n                x2 = ROC( C, ThreeMth * 2 );\r\n                x3 = ROC( C, ThreeMth * 3 );\r\n                x4 = ROC( C, ThreeMth * 4 );\r\n\r\n                // Aggregate raw score\r\n                RSRaw = 2 * x1 + x2 + x3 + x4;\r\n\r\n                // set to static var\r\n                StaticVarSet( "RSRaw_" + Symbol, RSRaw );\r\n            }\r\n            else\r\n                if( BarCount &gt; ThreeMth * 3 )\r\n                {\r\n                    x1 = ROC( C, ThreeMth * 1 );\r\n                    x2 = ROC( C, ThreeMth * 2 );\r\n                    x3 = ROC( C, ThreeMth * 3 );\r\n                    x4 = ROC( C, BarCount - 1 );\r\n\r\n                    // Aggregate raw score\r\n                    RSRaw = 2 * x1 + x2 + x3 + x4;\r\n\r\n                    // set to static var\r\n                    StaticVarSet( "RSRaw_" + Symbol, RSRaw );\r\n                }\r\n                else\r\n                    if( BarCount &gt; ThreeMth * 2 )\r\n                    {\r\n                        x1 = ROC( C, ThreeMth * 1 );\r\n                        x2 = ROC( C, ThreeMth * 2 );\r\n                        x3 = ROC( C, BarCount - 1 );\r\n                        x4 = ROC( C, BarCount - 1 );\r\n\r\n                        // Aggregate raw score\r\n                        RSRaw = 2 * x1 + x2 + x3 + x4;\r\n\r\n                        // set to static var\r\n                        StaticVarSet( "RSRaw_" + Symbol, RSRaw );\r\n                    }\r\n                    else\r\n                        if( BarCount &gt; ThreeMth )\r\n                        {\r\n                            x1 = ROC( C, ThreeMth * 1 );\r\n                            x2 = ROC( C, BarCount - 1 );\r\n                            x3 = ROC( C, BarCount - 1 );\r\n                            x4 = ROC( C, BarCount - 1 );\r\n\r\n                            // Aggregate raw score\r\n                            RSRaw = 2 * x1 + x2 + x3 + x4;\r\n\r\n                            // set to static var\r\n                            StaticVarSet( "RSRaw_" + Symbol, RSRaw );\r\n                        }\r\n                        else\r\n                            if( BarCount &gt; 3 )\t\t// Amibroker complains it needs 3 bars for charts\r\n                            {\r\n                                x1 = ROC( C, BarCount - 1 );\r\n                                x2 = ROC( C, BarCount - 1 );\r\n                                x3 = ROC( C, BarCount - 1 );\r\n                                x4 = ROC( C, BarCount - 1 );\r\n\r\n                                // Aggregate raw score\r\n                                RSRaw = 2 * x1 + x2 + x3 + x4;\r\n\r\n                                // set to static var\r\n                                StaticVarSet( "RSRaw_" + Symbol, RSRaw );\r\n                            }\r\n                            else\r\n                            {\r\n                                // Don't consider in percentile ranking\r\n                                ListQty--;\r\n                            }\r\n\r\n        // Reset price arrays\r\n        RestorePriceArrays();\r\n    }\r\n\r\n    StaticVarGenerateRanks( "Rank", "RSRaw_", 0, 1234 );\r\n    // Generate ranking of results\r\n\r\n    // Convert the static var ranks generated into a percentile score.\r\n    for( n = 0; ( Symbol = StrExtract( List, n ) )  != "";  n++ )\r\n    {\r\n        // get the current symbol's RSRaw_ value\r\n        Rank  = StaticVarGet( "Rank" + "RSraw_" +  Symbol );\r\n\r\n        // create percentile value IBD-style\r\n        RSpctile = 100 - 100 * Rank / ListQty;\r\n\r\n        // alternate percentile rank formula\r\n        RSpctile = floor( ( ListQty - Rank ) / ListQty * 100 );\r\n\r\n        // store the IBD style ranking in new static variable named "RS_&lt;Ticker&gt;"\r\n        StaticVarSet( prefix + Symbol, RSpctile, True );\r\n    }\r\n\r\n    // remove unnecessary static data\r\n    // free up old stuff\r\n    StaticVarRemove( "RSraw_*" );\r\n    StaticVarRemove( "Rank" + "RSraw_*" );\r\n\r\n    return ListQty;\r\n}\r\n\r\n/* TrendFilter Function\r\n\r\n\tPurpose: Determine if stock meet Stage 2 Criteria\r\n\r\n\tReferences:\r\n\tMark Minervini - How to Trade Like a Stock Market Wizard (Trend Template)\r\n\tTPT Discord Server #scanning-criteria, #trend-template\r\n\thttps://media.discordapp.net/attachments/776626855791951883/778750306045526036/unknown.png?width=1187&amp;height=471\r\n\r\n\tInput:\tClose price and Volume arrays, static var with Relative Strength generated with genRS function (needs to run before!)\r\n\tOutput: Scalar Boolean\r\n*/\r\nfunction TrendFilter( LL, HH, OO, CC, VV )\r\n{\t\r\n\tOneMth = 21;  // days\r\n\t\r\n\t// get non-null range (supports rewind)\r\n\tRange = LastValue(BarsSince(IsNull(CC)))-1;\r\n\tif(Range &lt; 0)\r\n\t\tRange = BarCount;\r\n\t\r\n\tif(Range &gt; OneMth*12)\r\n\t{\r\n\t\t// Get moving averages\r\n\t\tSMA200 \t\t= MA(  CC, 200 );\r\n\t\tSMA150 \t\t= MA(  CC, 150 );\r\n\t\tSMA050 \t\t= MA(  CC,  50 );\r\n\t\tHigh52pct \t= HHV( CC, 253 );\r\n\t\tLow52pct\t= LLV( CC, 253 );\r\n\t\tSMAV50\t\t= MA(  VV,  50 );\r\n\t\t\r\n\t\t// Average Dollar volume of past 50 day\r\n\t\tDolVol\t\t= CC*SMAV50;\r\n\t\t\r\n\t\t// determine price from low over last year to high within max baselen\r\n\t\tROCLow\t\t= LLV( LL, 253 );\r\n\t\tROCHigh\t\t= HHV( HH, 130 );\r\n\t\t\r\n\t\tROC12M\t\t= (ROCHigh/RocLow-1)*100; // get the lowest price in the past year to calc ROC\r\n\t\t\r\n\t\t// get RS value\t\t\r\n\t\tRS          = StaticVarGet("RS_" + Name());\t\t// run genRS to update this!!!\r\n\t\t\r\n\t\tATR30\t\t= (ATR(30)/C)*100;\r\n\t\t\r\n\t\t// Trend filter logic taken from TPT Discord #scanning-criteria channel\r\n\t\tx1 = True; //CC\t     \t&gt; 15;\r\n\t\tx2 = CC      \t&gt; High52pct*0.75;\r\n\t\tx3 = RS     \t&gt; 84;\r\n\t\tx4 = SMAV50 \t&gt; 5e4;\r\n\t\tx5 = ROC12M\t\t&gt; 30;\r\n\t\tx6 = True; //DolVol\t\t&gt; 1e7;\r\n\t\tx7 = True; //ATR30      &lt; 7;\r\n\t\t\r\n\t\tx8  = CC  \t &gt; SMA150;\r\n\t\tx9  = CC \t &gt; SMA200;\r\n\t\tx10 = SMA150 &gt; SMA200;\r\n\t\tx11 = SMA200 &gt; Ref(SMA200, -21);\r\n\t\tx12 = SMA050 &gt; SMA150;\r\n\t\tx13 = SMA050 &gt; SMA200;\r\n\t}\r\n\telse\t// IPO\r\n\t{\t\t\r\n\t\t// Get moving averages\r\n\t\tSMA200 \t\t= MA(  CC, 200 );\r\n\t\tSMA150 \t\t= MA(  CC, 150 );\r\n\t\tSMA050 \t\t= MA(  CC,  50 );\r\n\t\tHigh52pct \t= HHV( CC, 253 );\r\n\t\tLow52pct\t= LLV( CC, 253 );\r\n\t\tSMAV50\t\t= MA(  VV,  50 );\r\n\t\t\r\n\t\t// Average Dollar volume of past 50 day\r\n\t\tRawDolVol\t= CC*MA(VV, Range);\r\n\t\tDolVol\t\t= IIf(IsEmpty(SMAV50), RawDolVol, CC*SMAV50);\r\n\t\t\r\n\t\t// determine price from low over last year to high within max baselen\r\n\t\tROCLow\t\t= LLV( LL, 253 );\r\n\t\tROCHigh\t\t= HHV( HH, 130 );\r\n\t\t\r\n\t\tROC12M\t\t= (ROCHigh/RocLow-1)*100; // get the lowest price in the past year to calc ROC\r\n\t\t\r\n\t\t\r\n\t\tATR30\t\t= (ATR(Min(30, Range))/C)*100;\r\n\t\t\r\n\t\t// Trend filter logic taken from TPT Discord #scanning-criteria channel\r\n\t\tx1 = True;  //CC\t     \t&gt; 15;\r\n\t\tx2 = CC &gt; High52pct*0.75;\r\n\t\tx3 = True;\t// disable RS Check\r\n\t\tx4 = IsEmpty(SMAV50) OR SMAV50 &gt; 5e4;\r\n\t\tx5 = True; //ROC12M\t\t&gt; 30;\r\n\t\tx6 = DolVol &gt; 1e6;\r\n\t\tx7 = True;  //ATR30      &lt; 7;\r\n\t\t\r\n\t\t// attempt these if moivng avg exists\r\n\t\tx8  = IsEmpty(SMA150) OR CC  \t &gt; SMA150;\r\n\t\tx9  = IsEmpty(SMA200) OR CC \t &gt; SMA200;\r\n\t\tx10 = IsEmpty(SMA200) OR SMA150  &gt; SMA200;\r\n\t\tx11 = IsEmpty(SMA200) OR BarCount &lt; 221 OR SMA200 &gt; Ref(SMA200, -21);\r\n\t\tx12 = IsEmpty(SMA150) OR SMA050 &gt; SMA150;\r\n\t\tx13 = IsEmpty(SMA200) OR SMA050 &gt; SMA200;\r\n\t}\r\n\t\r\n\tTF = x1 AND x2 AND x3 AND x4 AND x5 AND x6 AND x7 AND x8 AND x9 AND x10 AND x11 AND x12 AND x13;\r\n\t\r\n\treturn TF;\r\n}\r\n\r\n/* getTurnLA Function\r\n\r\n\tPurpose: Determine the turn line array\r\n\r\n\tReferences:\r\n\t2._CLASSIC_EARLY_SQUEEZE_PIVOTS_FORMING_AT_THE_TURN_-_Di_Mauro_Perfect_Pivot_thePrivateTrader.com_Pi.pdf\r\n\r\n\tInput:\tLow and High price arrays\r\n\tOutput: Price array representing the turn line equation\r\n*/\r\nfunction getTurnLA( LL, HH, OO, CC )\r\n{\r\n\r\n    // get CS base data, should work with Power play data as well\r\n    if( getCSBaseParam( LL, HH, OO, CC, "Validity" ) )\r\n    {\r\n        LHSPrice  \t= getCSBaseParam( LL, HH, OO, CC, "LHSPrice"\t);\r\n        LHSBars  \t= getCSBaseParam( LL, HH, OO, CC, "LHSBars"\t);\r\n        LowPrice  \t= getCSBaseParam( LL, HH, OO, CC, "LowPrice"\t);\r\n    }\r\n    else\r\n        if( getPPBaseParam( L, H, "Validity" ) )\r\n        {\r\n            LHSPrice  \t= getPPBaseParam( L, H, "PoleHigh"\t);\r\n            LowPrice\t= getPPBaseParam( L, H, "FlagLow"\t);\r\n            LHSBars  \t= getPPBaseParam( L, H, "PHBar"\t);\r\n            //PoleLow  \t= getPPBaseParam( L, H, "PoleLow"\t);\r\n            //PoleLen  \t= getPPBaseParam( L, H, "PoleLen"\t);\r\n\r\n        }\r\n        else\r\n        {\r\n            LHSPrice  \t= 0;\r\n            LowPrice\t= 0;\r\n            LHSBars  \t= 0;\r\n        }\r\n\r\n    //// calculate turn\r\n    nth = 1;\r\n\r\n    // get nth swinghigh value for baselow\r\n    SH = SwingHigh(HH);\r\n    while( HighestHigh( HH, SH, nth ) != LHSPrice)\r\n\t\tnth++;\r\n\r\n    // get initial candidate top of turn coordinates\r\n    TurnTopP \t= LHSPrice;\r\n    TurnTopB \t= LastValue( BarsSince( HH == LHSPrice ) );\r\n\r\n    // get initial candidate bottom of turn coordinates\r\n    TurnBotP = HighestHigh( HH, SH, nth );\r\n    TurnBotB = LastValue( BarsSince( HH == TurnBotP ) );\r\n\r\n    // Calculate if TurnLA is valid\r\n    LowPriceBars  = LastValue( BarsSince( LL == LowPrice ) );\r\n    HighPriceBars = LastValue( BarsSince( HH == LHSPrice ) );\r\n\r\n    InLHS = BarIndex() &gt;= BarCount - 1 - HighPriceBars AND BarIndex() &lt;= Barcount - 1 - LowPriceBars;\r\n\r\n    // if there is no swing high in the lhs of base set to high of base low day\r\n    if( TurnBotP == LHSPrice )\r\n    {\r\n        TurnBotP = H[BarCount - 1 - LowPriceBars];\r\n        TurnBotB = LastValue( BarsSince( HH == TurnBotP ) );\r\n    }\r\n\r\n    // Calculate the candidate Turn Line with full extend left and right\r\n    TurnLA\t= LineArray( BarCount - 1 - TurnTopB, TurnTopP, BarCount - 1 - TurnBotB, TurnBotP, 3 );\r\n\r\n    CrossTurn = HH &gt; TurnLA;\r\n\r\n    // Check if there's a bad cross of H over TurnLA\r\n    BadCrossDetect = InLHS AND CrossTurn;\r\n\r\n    // Find location of largest excursion\r\n    Excursion \t= IIf( BadCrossDetect, HH - TurnLA, Null );\r\n    ExcBars\t\t= LastValue( HHVBars( Excursion, LHSBars ) );\r\n\r\n    // detect if the line doesn't meet the requirements\r\n    BadLine\t\t= LastValue( Cum( BadCrossDetect ) );\r\n\r\n    // Set the new coordinates depending on where the excursion is\r\n    if(\tTurnTopB - ExcBars &lt; ExcBars - TurnBotB AND BadLine )\r\n    {\r\n        // perform this fix if the error is closer to the top\r\n        TurnTopB = ExcBars;\r\n        TurnTopP = HH[BarCount - 1 - TurnTopB];\r\n    }\r\n    else\r\n        if( BadLine )\r\n        {\r\n            // perform this fix if the error is closer to the bottom\r\n            TurnBotB = ExcBars;\r\n            TurnBotP = HH[BarCount - 1 - TurnBotB];\r\n\r\n        }\r\n\r\n    // Calculate the candidate Turn Line with full extend left and right\r\n    TurnLA\t= LineArray( BarCount - 1 - TurnTopB, TurnTopP, BarCount - 1 - TurnBotB, TurnBotP, 3 );\r\n\r\n    // format linearray for plotting\r\n    TurnLA  = IIf( BarIndex() &gt; BarCount - 2 - LastValue( BarsSince( HH == LHSPrice ) ) AND BarIndex() &lt; BarCount, TurnLA, Null );\r\n    TurnLA  = IIf( TurnTopP &lt;= TurnBotP, Null, TurnLA );\r\n\t\r\n\tTurnLASlopeOK = TurnLA[BarCount-1]/TurnLA[BarCount - 1 - HighPriceBars] &lt; 1;\r\n\t\r\n\tif (NOT TurnLASlopeOK)\r\n\t\tTurnLA = Null;\r\n\r\n    // return output\r\n    return TurnLA;\r\n}\r\n\r\n/* getPPPivotParam Function\r\n\r\n\tPurpose: Determine alternate pivot detection for power squeezes\r\n\r\n\tReferences:\r\n\tTPT Discord channel #perfect-pivot-microstructure\r\n\tPower_Squeeze_Setup_Rules_v1.1.pdf\r\n\r\n\tInput:\tLow and High close and Vol price arrays, Power squeeze parameters, flag low price, pole high price, turn line price array, pivot high price\r\n\tOutput: 0 = no possible pivot, 1 = hourly pivot possible, 2 = daily chart pivot valid\r\n*/\r\nfunction getPPPivotParam( LL, HH, CC, VV, FlagLow, PoleHigh, TurnLA, PvtH, PivotHigh )\r\n{\r\n    // tunables\r\n    UpMoveMaxPct \t\t= 16;\r\n    PivotHeightMaxPct \t= 8;\r\n    PivotHighPct\t\t= 61.798;\r\n    FlatBaseLimPct\t\t= 16;\r\n\r\n    // Find if close is above turn line and where the turn occurred\r\n    CAT \t= LastValue( CC &gt; TurnLA );\r\n    CATBar\t= LastValue( BarsSince( Cross( CC, TurnLA ) ) );\r\n\t\t\r\n\t// bars since the low of flag\r\n    FlagLowBars = LastValue( BarsSince( LL == FlagLow ) );\r\n\r\n\tUpMoveOK \t  = False;\r\n\tFlatBaseValid = False; \r\n\t\r\n    if( CAT )\r\n    {\r\n        // get % move of the upmove after the turn\r\n        UpMoveHigh = LastValue( HHV( HH, CATBar + 1 ) );\r\n        UpMoveBar  = LastValue( HHVBars( HH, CATBar ) );\r\n\r\n        // location of upmove low (low of flag or swing low later?)\r\n        UpMoveLowCand = LastValue( LLV( LL, LLVBars( LL, FlagLowBars + 1 ) ) );\r\n\r\n        // find the upmove price low\r\n        if( UpMoveLowCand &gt; FlagLow )\r\n            UpMoveLow = UpMoveLowCand;\r\n        else\r\n            UpMoveLow = FlagLow;\r\n            \r\n        // calculate the upmove percent change and validity\r\n\t\tUpMovePct  = ( UpMoveHigh / UpMoveLow - 1 ) * 100;\r\n\t\tUpMoveOK   = UpMovePct &lt; UpMoveMaxPct;\r\n\t}\r\n\telse // flag is a flat base\r\n\t\t{\r\n\t\t\tFlagHeightPct = (1 - FlagLow/PoleHigh)*100;\r\n\t\t\tFlatBaseValid = FlagHeightPct &lt;= FlatBaseLimPct;\r\n\t\t}\r\n\t\t\r\n\t// determine if pivot is in the right location within the base\r\n    // get pivot height relative to bottom of turn\r\n    PHPct\t= ( PivotHigh - FlagLow ) / ( PoleHigh - FlagLow ) * 100;\r\n    // remove possibility that low of contraction is the possible hourly pivot\r\n    //LBC\t\t= LastValue(CC);\r\n    //LBHPct  = ( LBC       - FlagLow ) / ( PoleHigh - FlagLow ) * 100;\r\n    PHOK \t= PHPct &gt; ( 100 - PivotHighPct );// AND LBHPct &gt; ( 100 - PivotHighPct );\r\n        \r\n    // format and set output\r\n    if (LastValue(HH) &lt;= PivotHigh AND PvtH &lt; PivotHeightMaxPct AND (CAT OR FlatBaseValid) AND PHOK AND (FlatBaseValid OR UpMoveOK))\r\n\t\toutput = 2;\r\n\telse\r\n\t\tif (LastValue(HH) &lt;= PivotHigh AND (FlatBaseValid OR UpMoveOK) AND PHOK)\r\n\t\t\toutput = 1;\r\n\t\telse\r\n\t\t\toutput = 0;\r\n\t\t\t\r\n    return output;\r\n}\r\n\r\nfunction checkVolume(CC, VV, ConIndex, LHSBars)\r\n{\r\n\t// average volume over 50 days\r\n\tVolMA = MA(V, 50);\r\n\t\r\n\t// get the number of bars since the start of the last contraction\r\n\tPvtConBars = LastValue(BarsSince(ConIndex == True));\r\n\t\t\r\n\t//// VOLUME DRYUP \r\n\t\r\n\t// check if there are any bars in the pivot contraction whose volume is &lt; 50% of the highest volume in the base)\r\n\t// this will set to false any index before the pivot contraction, and then check the volume condition on the rest\r\n\tVolBar50   = Cum(BarIndex() &gt; BarCount - 1 - PvtConBars AND VV &lt; 0.5*LastValue(HHV(VV, LHSBars)));\r\n\t\r\n\t// If the sum is greater than 0, the volume condition is confirmed (event occurred at least once in the pivot contraction)\r\n\tVolBar50OK = VolBar50 &gt; 0;\r\n\t\r\n\t// repeat the same process but check if a volume bar in the pivot contraction was 65% or less than the average volume\r\n\tVolBar65   = Cum(BarIndex() &gt; BarCount - 1 - PvtConBars AND VV &lt; 0.65*LastValue(VolMa));\r\n\t\r\n\t// If the sum is greater than 0, the volume condition is confirmed (event occurred at least once in the pivot contraction)\r\n\tVolBar65OK = VolBar65 &gt; 0;\r\n\t\r\n\t//// EVIDENCE OF ACCUMULATION\r\n\tUpday = CC &gt; Ref(CC, -1);\r\n\t\r\n\t// check for 150% vol bars in base, in at least 3 vol bars\r\n\tVolAcc5050   = Cum(BarIndex() &gt; BarCount - 1 - LHSBars AND VV &gt; 1.5*VolMa AND Upday);\r\n\tVolAcc5050OK = VolAcc5050 &gt; 2;\r\n\t\r\n\t// check for 25mil dollarvolume day in base\r\n\tVolDol25M    \t= Cum(BarIndex() &gt; BarCount - 1 - LHSBars AND CC*VV &gt; 2.5e7 AND Upday);\r\n\tVolDolVol25MOK\t= VolDol25M &gt; 0;\r\n\t\r\n\t// overall volume health\r\n\tVolOK    = False;\r\n\tVolOK[0] = LastValue( VolBar50OK   AND VolBar65OK     );\r\n\tVolOK[1] = LastValue( VolAcc5050OK AND VolDolVol25MOK );\r\n\t\t\r\n\treturn VolOK;\t\r\n}\r\n\r\n\r\n//EOF\r\n</Formula>
		</File>
		<File>
			<Path>Formulas\\Norgate Data\\Norgate Data Functions.afl</Path>
			<Formula>/////////////////////////////\r\n// Norgate Data Functions.afl\r\n// v1.0.30\r\n// \r\n// Purpose:\r\n// This file is intended to be included in other formulas.  It returns data that would\r\n// normally be obtained from GetExtraData functions in the Norgate Data plugin, and\r\n// makes provides more elegant methods to call functions with multiple parameters.  It also provides\r\n// backward-compatible AFL plugin versions for AB &lt; 6.20\r\n//\r\n// Usage:\r\n// Add the folllowing line to the top of your AFL file:\r\n// #include_once "Formulas\\Norgate Data\\Norgate Data Functions.afl"\r\n//\r\n// NOTE: You should NEVER edit this file, as it will be automatically replaced by the\r\n// Norgate Data Updater when new functions are added.\r\n//\r\n// Copyright (C) NorgateData Pty Ltd.  All Rights Reserved.  https://norgatedata.com\r\n//\r\n// Changelog\r\n// v1.0.1 Introduced backwards compatibility fixes for AB &lt; version 6.20.1\r\n// v1.0.2 Minor syntax changes\r\n// v1.0.3 Fixes typo on norgateAllDividendsTimeSeries\r\n// v1.0.4 Changed AFL-based functions (used on AB &lt; 6.20) to more of a hidden function name, as some users were\r\n//        using that in their code despite the documentation stating to use NorgateIndexConstituentTimeSeries() etc. instead\r\n// v1.0.5 Fixed NorgateFundamentals argument not being accepted\r\n// v1.0.6 Fixed NorgateFundamentalsDate.  Created NorgateFundamentalsDateStr (which provides ISO date as a string) and converted NorgateFundamentalsDate to a DateTime,\r\n// v1.0.7 Use local vars to guarantee not clobbering globals\r\n// v1.0.8 Default values for date-based returns\r\n// V1.0.9 Added text arguments to NorgateAllDividendsTimeSeries and fixed argument on NorgateIndexConstituentTimeSeriesOther\r\n// V1.0.10 Type checking on NorgateAllDividendsTimeSeries arguments\r\n// V1.0.11 Added NorgateCurrentIndustryIndexSymbol\r\n// V1.0.12 Added type checking on string return functions so they don't result in errors on non-Norgate symbols (such as composites)\r\n// V1.0.13 Added NorgatePaddingSetting and NorgatePriceAndVolumeAdjustmentSetting\r\n// V1.0.14 Reverted back to AFL forms of indicators due to crashes in AB v6.20 ExtraDataEx\r\n// V1.0.15 Added code to aggregate (sum) the original volume and dividend time series, plus also convert from daily to weekly etc.\r\n// V1.0.16 Further fixes\r\n// V1.0.17 Remove leftover traces, fix compression, amended internal function names\r\n// V1.0.18 Added three ClassificationAtLevel functions\r\n// V1.0.19 Clarified AtLevel parameters\r\n// V1.0.20 Reworked periodicity routines for volume and dividends\r\n// V1.0.21 Renamed NorgateCurrentIndustryIndexSymbol to NorgateCorrespondingIndustryIndex \r\n// V1.0.22 Implemented NorgateCurrentIndexConstituent and NorgateIndustryIndex, renamed NorgateCorrespondingIndustryIndex to NorgateCorrespondingIndustryCurrent\r\n// V1.0.23 Implemented NorgateMajorExchangeListedTimeSeries\r\n// V1.0.24 Implemented NorgateDividendYieldTimeSeries\r\n// V1.0.25 Implemented NorgateCapitalEventTimeSeries\r\n// V1.0.26 -\r\n// V1.0.27 Better handling of no symbol returns from NorgateIndustryIndexCorresponding \r\n// V1.0.28 Implemented NorgateBlankCheckCompanyTimeSeries\r\n// V1.0.29 Back off NorgateBlankCheckCompanyTimeSeries upgrade until the DLL is present to present a catch-22 scenario\r\n// V1.0.30 Re-Implement NorgateBlankCheckCompanyTimeSeries now that DLL upgrades are done\r\n\r\n/////////////////////////////\r\n\r\nfunction NorgateBusinessSummaryLastUpdate()\r\n{\r\n\tlocal datestr;\r\n\tlocal norgateresult;\r\n\tnorgateresult = StrToDateTime("1900-01-01"); // default if no date set\r\n\tdatestr = GetExtraData("NorgateBusinessSummaryLastUpdate");\r\n\tif (typeof(datestr) != "string" &amp;&amp; StrLen(datestr) &gt; 0) {\r\n\t\tnorgateresult = StrToDateTime(datestr);\r\n\t}\r\n   return norgateresult;\r\n}\r\n\r\nfunction NorgateBusinessSummaryLastUpdateStr()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateBusinessSummaryLastUpdate");\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\t\r\n}\r\n\r\nfunction NorgatePaddingSetting()\r\n{\r\n\treturn GetExtraData("NorgatePaddingSetting");\r\n}\r\n\r\nfunction NorgatePriceAndVolumeAdjustmentSetting()\r\n{\r\n\treturn GetExtraData("NorgatePriceAndVolumeAdjustmentSetting");\r\n}\r\n\r\nfunction NorgateAssetid()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateAssetid");\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\t\t\r\n}\r\n\r\nfunction NorgateCurrentIndexConstituent(indexfamily)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateCurrentIndexConstituent=" + indexfamily);\r\n\treturn norgateresult;\t\t\r\n}        \r\n\r\nfunction NorgateIndustryIndexCorresponding(indexfamily, level, indextype)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateIndustryIndexCorresponding=" + indexfamily + "," + level + "," + indextype);\r\n\tif (typeof(norgateresult) != "string" OR norgateresult == "") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\t\t\r\n}     \r\n\r\nfunction NorgateIndustryIndex(indexfamily, level, indextype)\r\n{\r\n\tlocal norgateresult;\r\n\tif (NorgateCurrentIndexConstituent(indexfamily) == 0) {\r\n\t\tnorgateresult="n/a";\r\n\t}\r\n\telse \r\n\t{\r\n\t\tnorgateresult = NorgateIndustryIndexCorresponding(indexfamily, level, indextype);\r\n\t}\r\n\treturn norgateresult;\t\t\r\n}      \r\n\r\n\r\nfunction NorgateCorrespondingIndustryIndex(indexfamily, level, indextype)\r\n{\r\n\t// Deprecated:  Use NorgateCorrespondingIndustryIndex() instead\r\n\treturn NorgateIndustryIndexCorresponding(indexfamily, level, indextype);\r\n}      \r\n\r\nfunction NorgateCurrentIndustryIndexSymbol(indexfamily, level, indextype)\r\n{\r\n\t// Deprecated:  Use NorgateCorrespondingIndustryIndex() instead\r\n\treturn NorgateIndustryIndexCorresponding(indexfamily, level, indextype);\r\n}\r\n\r\n\r\nfunction NorgateBusinessSummary()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateBusinessSummary");\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\t\t\r\n}\r\n\r\nfunction NorgateFinancialSummary()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateFinancialSummary");\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\t\t\t\r\n}\r\n\r\nfunction NorgateFundamentals(fundamentalvar)\r\n{\r\n\treturn GetExtraData("NorgateFundamentals="+fundamentalvar);\r\n}\r\n\r\nfunction NorgateFundamentalsDate(fundamentalvar)\r\n{\r\n\tlocal datestr;\r\n\tlocal norgateresult;\r\n\tnorgateresult = StrToDateTime("1900-01-01");  // default value\r\n\tdatestr = GetExtraData("NorgateFundamentalsDate="+fundamentalvar);\r\n\tif (typeof(datestr) == "string" &amp;&amp; StrLen(datestr) &gt; 0) {\r\n\t\tnorgateresult = StrToDateTime(datestr);\r\n\t}\r\n   return norgateresult;\t\r\n}\r\n\r\nfunction NorgateFundamentalsDateStr(fundamentalvar)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateFundamentalsDate="+fundamentalvar);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\t\r\n}\r\n\r\nfunction NorgateClassification(classificationscheme)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateClassification="+classificationscheme);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateClassificationName(classificationscheme)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateClassificationName="+classificationscheme);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;}\r\n\r\nfunction NorgateClassificationDescription(classificationscheme)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateClassificationDescription="+ classificationscheme);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateClassificationAtLevel(classificationscheme,level)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateClassificationAtLevel="+classificationscheme+","+level);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateClassificationNameAtLevel(classificationscheme,level)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateClassificationNameAtLevel="+classificationscheme+","+level);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;}\r\n\r\nfunction NorgateClassificationDescriptionAtLevel(classificationscheme,level)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = GetExtraData("NorgateClassificationDescriptionAtLevel="+ classificationscheme+","+level);\r\n\tif (typeof(norgateresult) != "string") {\r\n\t\tnorgateresult = "n/a";\r\n\t}\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateIndexConstituentList()\r\n{\r\n\tlocal norgatelist;\r\n\tnorgatelist = GetExtraData("NorgateIndexConstituentList");\r\n\tif (typeof(norgatelist) != "string") {\r\n\t\tnorgatelist = "n/a";\r\n\t}\r\n\treturn norgatelist;\r\n}\r\n\r\n// Time Series wrappers \r\n\r\nfunction NorgateAllDividendsTimeSeries(dividendtypearg)\r\n{\r\n\tlocal norgateresult;\r\n\tlocal dividendtype;\r\n\tdividendtype = 0;\r\n\tlocal origtimeframe;\r\n\torigtimeframe = Interval();\r\n\t\r\n\tif (typeof(dividendtypearg) == "number") {\r\n\t\tdividendtype = dividendtypearg;\r\n\t}\r\n\tif (typeof(dividendtypearg) == "string") {\r\n\t\tif (dividendtypearg == "Ordinary Dividends") {\r\n\t\t\tdividendtype = 1;\r\n\t\t} else if (dividendtypearg == "Special Dividends") {\r\n\t\t\tdividendtype = 2;\r\n\t\t} else if (dividendtypearg == "Total Dividends") {\r\n\t\t\tdividendtype = 3;\r\n\t\t}\r\n\t}\r\n\t\r\n\tnorgateresult = zzzNorgateDataAllDividendsTimeSeries(dividendtype);\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateOriginalCloseTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataOriginalCloseTimeSeries();\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateOriginalVolumeTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataOriginalVolumeTimeSeries(); \r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgatePaddingStatusTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataPaddingStatusTimeSeries();\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateDividendYieldTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataDividendYieldTimeSeries();\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateCapitalEventTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateCapitalEventTimeSeries();\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateIndexConstituentTimeSeries(indexname)\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataIndexConstituentTimeSeries(indexname);\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateMajorExchangeListedTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataMajorExchangeListedTimeSeries();\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateBlankCheckCompanyTimeSeries()\r\n{\r\n\tlocal norgateresult;\r\n\tnorgateresult = zzzNorgateDataBlankCheckCompanyTimeSeries();\r\n\treturn norgateresult;\r\n}\r\n\r\nfunction NorgateIndexConstituentTimeSeriesOther(indexname, othersymbol)\r\n{\r\n\tnorgateresult = zzzNorgateDataIndexConstituentTimeSeriesOther(indexname, othersymbol);\r\n\treturn norgateresult;\r\n}\r\n\r\n\r\n</Formula>
		</File>
	</Includes>
</Window>
